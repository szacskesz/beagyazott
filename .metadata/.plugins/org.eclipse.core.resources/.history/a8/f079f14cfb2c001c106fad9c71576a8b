/* USER CODE BEGIN Header */
/* USER CODE END Header */
/* Includes ------------------------------------------------------------------*/
#include "main.h"

/* Private includes ----------------------------------------------------------*/
/* USER CODE BEGIN Includes */
#include "TM1638/TM1638.h"
#include "HX711/HX711.h"
/* USER CODE END Includes */

/* Private typedef -----------------------------------------------------------*/
/* USER CODE BEGIN PTD */
/* USER CODE END PTD */

/* Private define ------------------------------------------------------------*/
/* USER CODE BEGIN PD */
/* USER CODE END PD */

/* Private macro -------------------------------------------------------------*/
/* USER CODE BEGIN PM */
/* USER CODE END PM */

/* Private variables ---------------------------------------------------------*/
UART_HandleTypeDef huart1;
UART_HandleTypeDef huart3;

/* USER CODE BEGIN PV */
uint8_t buffer[1] = {0};
uint8_t data[256] = {0};
uint8_t data_length = 0;
uint8_t received = 0;

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
	data[data_length] = buffer[0];
	data_length++;

//	if(buffer[0] == '\r')  {
//		received = 1;
//	} else {
//		HAL_UART_Receive_IT(&huart3, buffer, 1);
//	}

	HAL_UART_Receive_IT(&huart3, buffer, 1);
}
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
static void MX_GPIO_Init(void);
static void MX_USART1_UART_Init(void);
static void MX_USART3_UART_Init(void);
/* USER CODE BEGIN PFP */
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
/* USER CODE END 0 */

/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
  /* USER CODE BEGIN 1 */
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
  MX_USART1_UART_Init();
  MX_USART3_UART_Init();
  /* USER CODE BEGIN 2 */
//  TM1638_Init(
//	  DISP_STB_GPIO_Port,
//	  DISP_STB_Pin,
//	  DISP_CLK_GPIO_Port,
//	  DISP_CLK_Pin,
//	  DISP_DIO_GPIO_Port,
//	  DISP_DIO_Pin
//  );
//
//  TM1638_SetDisplayBrightness(DISPLAY_BRIGHTNESS_LEVEL_1);
//  TM1638_SetDisplayState(DISPLAY_STATE_ON);
//
//  TM1638_SetLedStatus(0, LED_ON);
//  TM1638_SetLedStatus(1, LED_ON);
//
//  HX711_Init(
//      HX711_SCK_GPIO_Port,
//      HX711_SCK_Pin,
//	  HX711_DT_GPIO_Port,
//	  HX711_DT_Pin
//  );
//
//  double shift = 0;
//  double coeff = 1;
//  HX711_SetGainLevel(GAIN_128);
//  HX711_Calibrate(shift, coeff);
//  HX711_PowerUp();
//
//  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) { //While blue button not pushed
//	  double value = HX711_ReadValue();
//	  TM1638_SetNumberToDisplay(value);
//  }
//
//  shift = HX711_ReadAverageValue(10);
//  HX711_Calibrate(shift, coeff);
//  TM1638_SetLedStatus(1, LED_OFF);
//
//  HAL_Delay(1000);
//
//  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) { //While blue button not pushed
//	  double value = HX711_ReadValue();
//	  TM1638_SetNumberToDisplay(value);
//  }
//
//  coeff = 2353 / HX711_ReadAverageValue(10);
//  HX711_Calibrate(shift, coeff);
//  TM1638_SetLedStatus(0, LED_OFF);
//  HX711_Calibrate(16405360, 1515 / (double)34575);


  const char str[] = "AT\r";
  HAL_UART_Receive_IT(&huart3, buffer, 1);
  HAL_UART_Transmit(&huart3, str, strlen(str), 1000);
  //while(!received);
  HAL_Delay(2000);
  return 0;

  /*
  uint8_t uartMsg[32]={0};
  uint8_t testCmd[] = "AT\r\n";
  HAL_UART_Transmit(&huart3, (uint8_t *)testCmd, sizeof(testCmd), 1000);
  HAL_Delay(1000);
  while(1) {
	  HAL_UART_Receive(&huart3, uartMsg, sizeof(uartMsg), 2000);
  }

*/


//
//  char Test[] = "AT";
//  char Reply[2] = "";
//  HAL_StatusTypeDef res = HAL_UART_Transmit(&huart3, (uint8_t *)Test, strlen(Test), 1000);
//  HAL_Delay(1000);
//  HAL_StatusTypeDef res2 = HAL_UART_Receive(&huart3, (uint8_t *)Reply, 2, 1000);
//  while(1) {
//	  HAL_UART_Receive(&huart3, (uint8_t *)Reply, 2, 1000);
//  }



  //HAL_UART_Receive(&huart1, uartMsg, 64, 2000);
  //HAL_UART_Receive(&huart1, uartMsg, 64, 2000);

  return 0;
  /*

  uint8_t testCmd[] = "AT"; //test message, reply is "OK" or "ERROR"
  uint8_t buffer[50] = ""; //variable to store usart reply message

  char pinCmd[] = "AT+CPIN=\"2888\""; // pincode

  char textModeCmd[] = "AT+CMGF=1"; // set to text mode
  char phoneNumberCmd[] = "AT+CMGS=\"+36305225843\""; // number to send sms

  char msgEndCmd[] = "26";

  HAL_Delay(1000);
  HAL_UART_Transmit(&huart2, testCmd, strlen(testCmd), 1000);
  HAL_Delay(1000);
  HAL_UART_Receive(&huart2, buffer, 50, 1000);
  if(!strcmp(buffer, "OK")) return 1;

  return 0;
  if(!strcmp(buffer, "OK")) return 1;
	  HAL_UART_Transmit(&huart2, (uint8_t *)textModeCmd, strlen(textModeCmd), 10);
	  HAL_UART_Transmit(&huart2, (uint8_t *)phoneNumberCmd, strlen(phoneNumberCmd), 10);

	  char msgToSend[] = "Hello World!";

	  HAL_UART_Transmit(&huart2, (uint8_t *)msgToSend, strlen(msgToSend), 10);
	  HAL_UART_Transmit(&huart2, (uint8_t *)msgEndCmd, strlen(msgEndCmd), 10);

	  HAL_Delay(1000);
	  */
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
//	  double value = HX711_ReadAverageValue(10);
//	  TM1638_SetNumberToDisplay(value);
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}

/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
  {
    Error_Handler();
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
  {
    Error_Handler();
  }
}

/**
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{

  /* USER CODE BEGIN USART1_Init 0 */

  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
  huart1.Init.BaudRate = 9600;
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
  huart1.Init.StopBits = UART_STOPBITS_1;
  huart1.Init.Parity = UART_PARITY_NONE;
  huart1.Init.Mode = UART_MODE_TX_RX;
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart1) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}

/**
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{

  /* USER CODE BEGIN USART3_Init 0 */

  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
  huart3.Init.BaudRate = 9600;
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
  huart3.Init.StopBits = UART_STOPBITS_1;
  huart3.Init.Parity = UART_PARITY_NONE;
  huart3.Init.Mode = UART_MODE_TX_RX;
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
  if (HAL_UART_Init(&huart3) != HAL_OK)
  {
    Error_Handler();
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}

/**
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
  GPIO_InitTypeDef GPIO_InitStruct = {0};

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
  __HAL_RCC_GPIOD_CLK_ENABLE();
  __HAL_RCC_GPIOA_CLK_ENABLE();
  __HAL_RCC_GPIOB_CLK_ENABLE();

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_CLK_Pin|DISP_STB_Pin|DISP_DIO_Pin|HX711_SCK_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pins : DISP_CLK_Pin DISP_STB_Pin DISP_DIO_Pin HX711_SCK_Pin */
  GPIO_InitStruct.Pin = DISP_CLK_Pin|DISP_STB_Pin|DISP_DIO_Pin|HX711_SCK_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);

  /*Configure GPIO pin : HX711_DT_Pin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
  GPIO_InitStruct.Pull = GPIO_NOPULL;
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);

}

/* USER CODE BEGIN 4 */
/* USER CODE END 4 */

/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}

#ifdef  USE_FULL_ASSERT
/**
  * @brief  Reports the name of the source file and the source line number
  *         where the assert_param error has occurred.
  * @param  file: pointer to the source file name
  * @param  line: assert_param error line source number
  * @retval None
  */
void assert_failed(uint8_t *file, uint32_t line)
{
  /* USER CODE BEGIN 6 */
  /* USER CODE END 6 */
}
#endif /* USE_FULL_ASSERT */

/************************ (C) COPYRIGHT STMicroelectronics *****END OF FILE****/
