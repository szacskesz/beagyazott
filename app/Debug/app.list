
app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00006f98  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000594  080070a8  080070a8  000170a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800763c  0800763c  000201e4  2**0
                  CONTENTS
  4 .ARM          00000000  0800763c  0800763c  000201e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800763c  0800763c  000201e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800763c  0800763c  0001763c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007640  08007640  00017640  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08007644  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001a4  200001e8  08007828  000201e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000038c  08007828  0002038c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b78e  00000000  00000000  0002020d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002515  00000000  00000000  0002b99b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ad0  00000000  00000000  0002deb0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000009d8  00000000  00000000  0002e980  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018ecd  00000000  00000000  0002f358  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b900  00000000  00000000  00048225  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000877d4  00000000  00000000  00053b25  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000db2f9  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003b50  00000000  00000000  000db34c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08007090 	.word	0x08007090

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08007090 	.word	0x08007090

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_drsub>:
 8000160:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000164:	e002      	b.n	800016c <__adddf3>
 8000166:	bf00      	nop

08000168 <__aeabi_dsub>:
 8000168:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800016c <__adddf3>:
 800016c:	b530      	push	{r4, r5, lr}
 800016e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000172:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000176:	ea94 0f05 	teq	r4, r5
 800017a:	bf08      	it	eq
 800017c:	ea90 0f02 	teqeq	r0, r2
 8000180:	bf1f      	itttt	ne
 8000182:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000186:	ea55 0c02 	orrsne.w	ip, r5, r2
 800018a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800018e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000192:	f000 80e2 	beq.w	800035a <__adddf3+0x1ee>
 8000196:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800019a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800019e:	bfb8      	it	lt
 80001a0:	426d      	neglt	r5, r5
 80001a2:	dd0c      	ble.n	80001be <__adddf3+0x52>
 80001a4:	442c      	add	r4, r5
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	ea82 0000 	eor.w	r0, r2, r0
 80001b2:	ea83 0101 	eor.w	r1, r3, r1
 80001b6:	ea80 0202 	eor.w	r2, r0, r2
 80001ba:	ea81 0303 	eor.w	r3, r1, r3
 80001be:	2d36      	cmp	r5, #54	; 0x36
 80001c0:	bf88      	it	hi
 80001c2:	bd30      	pophi	{r4, r5, pc}
 80001c4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001c8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001cc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001d0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x70>
 80001d6:	4240      	negs	r0, r0
 80001d8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001dc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001e0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001e4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001e8:	d002      	beq.n	80001f0 <__adddf3+0x84>
 80001ea:	4252      	negs	r2, r2
 80001ec:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001f0:	ea94 0f05 	teq	r4, r5
 80001f4:	f000 80a7 	beq.w	8000346 <__adddf3+0x1da>
 80001f8:	f1a4 0401 	sub.w	r4, r4, #1
 80001fc:	f1d5 0e20 	rsbs	lr, r5, #32
 8000200:	db0d      	blt.n	800021e <__adddf3+0xb2>
 8000202:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000206:	fa22 f205 	lsr.w	r2, r2, r5
 800020a:	1880      	adds	r0, r0, r2
 800020c:	f141 0100 	adc.w	r1, r1, #0
 8000210:	fa03 f20e 	lsl.w	r2, r3, lr
 8000214:	1880      	adds	r0, r0, r2
 8000216:	fa43 f305 	asr.w	r3, r3, r5
 800021a:	4159      	adcs	r1, r3
 800021c:	e00e      	b.n	800023c <__adddf3+0xd0>
 800021e:	f1a5 0520 	sub.w	r5, r5, #32
 8000222:	f10e 0e20 	add.w	lr, lr, #32
 8000226:	2a01      	cmp	r2, #1
 8000228:	fa03 fc0e 	lsl.w	ip, r3, lr
 800022c:	bf28      	it	cs
 800022e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000232:	fa43 f305 	asr.w	r3, r3, r5
 8000236:	18c0      	adds	r0, r0, r3
 8000238:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800023c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000240:	d507      	bpl.n	8000252 <__adddf3+0xe6>
 8000242:	f04f 0e00 	mov.w	lr, #0
 8000246:	f1dc 0c00 	rsbs	ip, ip, #0
 800024a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800024e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000252:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000256:	d31b      	bcc.n	8000290 <__adddf3+0x124>
 8000258:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800025c:	d30c      	bcc.n	8000278 <__adddf3+0x10c>
 800025e:	0849      	lsrs	r1, r1, #1
 8000260:	ea5f 0030 	movs.w	r0, r0, rrx
 8000264:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000268:	f104 0401 	add.w	r4, r4, #1
 800026c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000270:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000274:	f080 809a 	bcs.w	80003ac <__adddf3+0x240>
 8000278:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800027c:	bf08      	it	eq
 800027e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000282:	f150 0000 	adcs.w	r0, r0, #0
 8000286:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800028a:	ea41 0105 	orr.w	r1, r1, r5
 800028e:	bd30      	pop	{r4, r5, pc}
 8000290:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000294:	4140      	adcs	r0, r0
 8000296:	eb41 0101 	adc.w	r1, r1, r1
 800029a:	3c01      	subs	r4, #1
 800029c:	bf28      	it	cs
 800029e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80002a2:	d2e9      	bcs.n	8000278 <__adddf3+0x10c>
 80002a4:	f091 0f00 	teq	r1, #0
 80002a8:	bf04      	itt	eq
 80002aa:	4601      	moveq	r1, r0
 80002ac:	2000      	moveq	r0, #0
 80002ae:	fab1 f381 	clz	r3, r1
 80002b2:	bf08      	it	eq
 80002b4:	3320      	addeq	r3, #32
 80002b6:	f1a3 030b 	sub.w	r3, r3, #11
 80002ba:	f1b3 0220 	subs.w	r2, r3, #32
 80002be:	da0c      	bge.n	80002da <__adddf3+0x16e>
 80002c0:	320c      	adds	r2, #12
 80002c2:	dd08      	ble.n	80002d6 <__adddf3+0x16a>
 80002c4:	f102 0c14 	add.w	ip, r2, #20
 80002c8:	f1c2 020c 	rsb	r2, r2, #12
 80002cc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002d0:	fa21 f102 	lsr.w	r1, r1, r2
 80002d4:	e00c      	b.n	80002f0 <__adddf3+0x184>
 80002d6:	f102 0214 	add.w	r2, r2, #20
 80002da:	bfd8      	it	le
 80002dc:	f1c2 0c20 	rsble	ip, r2, #32
 80002e0:	fa01 f102 	lsl.w	r1, r1, r2
 80002e4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002e8:	bfdc      	itt	le
 80002ea:	ea41 010c 	orrle.w	r1, r1, ip
 80002ee:	4090      	lslle	r0, r2
 80002f0:	1ae4      	subs	r4, r4, r3
 80002f2:	bfa2      	ittt	ge
 80002f4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002f8:	4329      	orrge	r1, r5
 80002fa:	bd30      	popge	{r4, r5, pc}
 80002fc:	ea6f 0404 	mvn.w	r4, r4
 8000300:	3c1f      	subs	r4, #31
 8000302:	da1c      	bge.n	800033e <__adddf3+0x1d2>
 8000304:	340c      	adds	r4, #12
 8000306:	dc0e      	bgt.n	8000326 <__adddf3+0x1ba>
 8000308:	f104 0414 	add.w	r4, r4, #20
 800030c:	f1c4 0220 	rsb	r2, r4, #32
 8000310:	fa20 f004 	lsr.w	r0, r0, r4
 8000314:	fa01 f302 	lsl.w	r3, r1, r2
 8000318:	ea40 0003 	orr.w	r0, r0, r3
 800031c:	fa21 f304 	lsr.w	r3, r1, r4
 8000320:	ea45 0103 	orr.w	r1, r5, r3
 8000324:	bd30      	pop	{r4, r5, pc}
 8000326:	f1c4 040c 	rsb	r4, r4, #12
 800032a:	f1c4 0220 	rsb	r2, r4, #32
 800032e:	fa20 f002 	lsr.w	r0, r0, r2
 8000332:	fa01 f304 	lsl.w	r3, r1, r4
 8000336:	ea40 0003 	orr.w	r0, r0, r3
 800033a:	4629      	mov	r1, r5
 800033c:	bd30      	pop	{r4, r5, pc}
 800033e:	fa21 f004 	lsr.w	r0, r1, r4
 8000342:	4629      	mov	r1, r5
 8000344:	bd30      	pop	{r4, r5, pc}
 8000346:	f094 0f00 	teq	r4, #0
 800034a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800034e:	bf06      	itte	eq
 8000350:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000354:	3401      	addeq	r4, #1
 8000356:	3d01      	subne	r5, #1
 8000358:	e74e      	b.n	80001f8 <__adddf3+0x8c>
 800035a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800035e:	bf18      	it	ne
 8000360:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000364:	d029      	beq.n	80003ba <__adddf3+0x24e>
 8000366:	ea94 0f05 	teq	r4, r5
 800036a:	bf08      	it	eq
 800036c:	ea90 0f02 	teqeq	r0, r2
 8000370:	d005      	beq.n	800037e <__adddf3+0x212>
 8000372:	ea54 0c00 	orrs.w	ip, r4, r0
 8000376:	bf04      	itt	eq
 8000378:	4619      	moveq	r1, r3
 800037a:	4610      	moveq	r0, r2
 800037c:	bd30      	pop	{r4, r5, pc}
 800037e:	ea91 0f03 	teq	r1, r3
 8000382:	bf1e      	ittt	ne
 8000384:	2100      	movne	r1, #0
 8000386:	2000      	movne	r0, #0
 8000388:	bd30      	popne	{r4, r5, pc}
 800038a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800038e:	d105      	bne.n	800039c <__adddf3+0x230>
 8000390:	0040      	lsls	r0, r0, #1
 8000392:	4149      	adcs	r1, r1
 8000394:	bf28      	it	cs
 8000396:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800039a:	bd30      	pop	{r4, r5, pc}
 800039c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80003a0:	bf3c      	itt	cc
 80003a2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80003a6:	bd30      	popcc	{r4, r5, pc}
 80003a8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003ac:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003b0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003b4:	f04f 0000 	mov.w	r0, #0
 80003b8:	bd30      	pop	{r4, r5, pc}
 80003ba:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003be:	bf1a      	itte	ne
 80003c0:	4619      	movne	r1, r3
 80003c2:	4610      	movne	r0, r2
 80003c4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003c8:	bf1c      	itt	ne
 80003ca:	460b      	movne	r3, r1
 80003cc:	4602      	movne	r2, r0
 80003ce:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003d2:	bf06      	itte	eq
 80003d4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003d8:	ea91 0f03 	teqeq	r1, r3
 80003dc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003e0:	bd30      	pop	{r4, r5, pc}
 80003e2:	bf00      	nop

080003e4 <__aeabi_ui2d>:
 80003e4:	f090 0f00 	teq	r0, #0
 80003e8:	bf04      	itt	eq
 80003ea:	2100      	moveq	r1, #0
 80003ec:	4770      	bxeq	lr
 80003ee:	b530      	push	{r4, r5, lr}
 80003f0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003f4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003f8:	f04f 0500 	mov.w	r5, #0
 80003fc:	f04f 0100 	mov.w	r1, #0
 8000400:	e750      	b.n	80002a4 <__adddf3+0x138>
 8000402:	bf00      	nop

08000404 <__aeabi_i2d>:
 8000404:	f090 0f00 	teq	r0, #0
 8000408:	bf04      	itt	eq
 800040a:	2100      	moveq	r1, #0
 800040c:	4770      	bxeq	lr
 800040e:	b530      	push	{r4, r5, lr}
 8000410:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000414:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000418:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800041c:	bf48      	it	mi
 800041e:	4240      	negmi	r0, r0
 8000420:	f04f 0100 	mov.w	r1, #0
 8000424:	e73e      	b.n	80002a4 <__adddf3+0x138>
 8000426:	bf00      	nop

08000428 <__aeabi_f2d>:
 8000428:	0042      	lsls	r2, r0, #1
 800042a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800042e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000432:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000436:	bf1f      	itttt	ne
 8000438:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800043c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000440:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000444:	4770      	bxne	lr
 8000446:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800044a:	bf08      	it	eq
 800044c:	4770      	bxeq	lr
 800044e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000452:	bf04      	itt	eq
 8000454:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000458:	4770      	bxeq	lr
 800045a:	b530      	push	{r4, r5, lr}
 800045c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000460:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000464:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000468:	e71c      	b.n	80002a4 <__adddf3+0x138>
 800046a:	bf00      	nop

0800046c <__aeabi_ul2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f04f 0500 	mov.w	r5, #0
 800047a:	e00a      	b.n	8000492 <__aeabi_l2d+0x16>

0800047c <__aeabi_l2d>:
 800047c:	ea50 0201 	orrs.w	r2, r0, r1
 8000480:	bf08      	it	eq
 8000482:	4770      	bxeq	lr
 8000484:	b530      	push	{r4, r5, lr}
 8000486:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800048a:	d502      	bpl.n	8000492 <__aeabi_l2d+0x16>
 800048c:	4240      	negs	r0, r0
 800048e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000492:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000496:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800049a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800049e:	f43f aed8 	beq.w	8000252 <__adddf3+0xe6>
 80004a2:	f04f 0203 	mov.w	r2, #3
 80004a6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004aa:	bf18      	it	ne
 80004ac:	3203      	addne	r2, #3
 80004ae:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004b2:	bf18      	it	ne
 80004b4:	3203      	addne	r2, #3
 80004b6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004ba:	f1c2 0320 	rsb	r3, r2, #32
 80004be:	fa00 fc03 	lsl.w	ip, r0, r3
 80004c2:	fa20 f002 	lsr.w	r0, r0, r2
 80004c6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ca:	ea40 000e 	orr.w	r0, r0, lr
 80004ce:	fa21 f102 	lsr.w	r1, r1, r2
 80004d2:	4414      	add	r4, r2
 80004d4:	e6bd      	b.n	8000252 <__adddf3+0xe6>
 80004d6:	bf00      	nop

080004d8 <__aeabi_dmul>:
 80004d8:	b570      	push	{r4, r5, r6, lr}
 80004da:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004de:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004e2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004e6:	bf1d      	ittte	ne
 80004e8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004ec:	ea94 0f0c 	teqne	r4, ip
 80004f0:	ea95 0f0c 	teqne	r5, ip
 80004f4:	f000 f8de 	bleq	80006b4 <__aeabi_dmul+0x1dc>
 80004f8:	442c      	add	r4, r5
 80004fa:	ea81 0603 	eor.w	r6, r1, r3
 80004fe:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000502:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000506:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800050a:	bf18      	it	ne
 800050c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000510:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000514:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000518:	d038      	beq.n	800058c <__aeabi_dmul+0xb4>
 800051a:	fba0 ce02 	umull	ip, lr, r0, r2
 800051e:	f04f 0500 	mov.w	r5, #0
 8000522:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000526:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800052a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800052e:	f04f 0600 	mov.w	r6, #0
 8000532:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000536:	f09c 0f00 	teq	ip, #0
 800053a:	bf18      	it	ne
 800053c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000540:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000544:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000548:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800054c:	d204      	bcs.n	8000558 <__aeabi_dmul+0x80>
 800054e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000552:	416d      	adcs	r5, r5
 8000554:	eb46 0606 	adc.w	r6, r6, r6
 8000558:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800055c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000560:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000564:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000568:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800056c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000570:	bf88      	it	hi
 8000572:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000576:	d81e      	bhi.n	80005b6 <__aeabi_dmul+0xde>
 8000578:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800057c:	bf08      	it	eq
 800057e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000582:	f150 0000 	adcs.w	r0, r0, #0
 8000586:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800058a:	bd70      	pop	{r4, r5, r6, pc}
 800058c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000590:	ea46 0101 	orr.w	r1, r6, r1
 8000594:	ea40 0002 	orr.w	r0, r0, r2
 8000598:	ea81 0103 	eor.w	r1, r1, r3
 800059c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80005a0:	bfc2      	ittt	gt
 80005a2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80005a6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80005aa:	bd70      	popgt	{r4, r5, r6, pc}
 80005ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005b0:	f04f 0e00 	mov.w	lr, #0
 80005b4:	3c01      	subs	r4, #1
 80005b6:	f300 80ab 	bgt.w	8000710 <__aeabi_dmul+0x238>
 80005ba:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005be:	bfde      	ittt	le
 80005c0:	2000      	movle	r0, #0
 80005c2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005c6:	bd70      	pople	{r4, r5, r6, pc}
 80005c8:	f1c4 0400 	rsb	r4, r4, #0
 80005cc:	3c20      	subs	r4, #32
 80005ce:	da35      	bge.n	800063c <__aeabi_dmul+0x164>
 80005d0:	340c      	adds	r4, #12
 80005d2:	dc1b      	bgt.n	800060c <__aeabi_dmul+0x134>
 80005d4:	f104 0414 	add.w	r4, r4, #20
 80005d8:	f1c4 0520 	rsb	r5, r4, #32
 80005dc:	fa00 f305 	lsl.w	r3, r0, r5
 80005e0:	fa20 f004 	lsr.w	r0, r0, r4
 80005e4:	fa01 f205 	lsl.w	r2, r1, r5
 80005e8:	ea40 0002 	orr.w	r0, r0, r2
 80005ec:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005f0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005f4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005f8:	fa21 f604 	lsr.w	r6, r1, r4
 80005fc:	eb42 0106 	adc.w	r1, r2, r6
 8000600:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000604:	bf08      	it	eq
 8000606:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800060a:	bd70      	pop	{r4, r5, r6, pc}
 800060c:	f1c4 040c 	rsb	r4, r4, #12
 8000610:	f1c4 0520 	rsb	r5, r4, #32
 8000614:	fa00 f304 	lsl.w	r3, r0, r4
 8000618:	fa20 f005 	lsr.w	r0, r0, r5
 800061c:	fa01 f204 	lsl.w	r2, r1, r4
 8000620:	ea40 0002 	orr.w	r0, r0, r2
 8000624:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000628:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800062c:	f141 0100 	adc.w	r1, r1, #0
 8000630:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000634:	bf08      	it	eq
 8000636:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800063a:	bd70      	pop	{r4, r5, r6, pc}
 800063c:	f1c4 0520 	rsb	r5, r4, #32
 8000640:	fa00 f205 	lsl.w	r2, r0, r5
 8000644:	ea4e 0e02 	orr.w	lr, lr, r2
 8000648:	fa20 f304 	lsr.w	r3, r0, r4
 800064c:	fa01 f205 	lsl.w	r2, r1, r5
 8000650:	ea43 0302 	orr.w	r3, r3, r2
 8000654:	fa21 f004 	lsr.w	r0, r1, r4
 8000658:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800065c:	fa21 f204 	lsr.w	r2, r1, r4
 8000660:	ea20 0002 	bic.w	r0, r0, r2
 8000664:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000668:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800066c:	bf08      	it	eq
 800066e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000672:	bd70      	pop	{r4, r5, r6, pc}
 8000674:	f094 0f00 	teq	r4, #0
 8000678:	d10f      	bne.n	800069a <__aeabi_dmul+0x1c2>
 800067a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800067e:	0040      	lsls	r0, r0, #1
 8000680:	eb41 0101 	adc.w	r1, r1, r1
 8000684:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000688:	bf08      	it	eq
 800068a:	3c01      	subeq	r4, #1
 800068c:	d0f7      	beq.n	800067e <__aeabi_dmul+0x1a6>
 800068e:	ea41 0106 	orr.w	r1, r1, r6
 8000692:	f095 0f00 	teq	r5, #0
 8000696:	bf18      	it	ne
 8000698:	4770      	bxne	lr
 800069a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800069e:	0052      	lsls	r2, r2, #1
 80006a0:	eb43 0303 	adc.w	r3, r3, r3
 80006a4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80006a8:	bf08      	it	eq
 80006aa:	3d01      	subeq	r5, #1
 80006ac:	d0f7      	beq.n	800069e <__aeabi_dmul+0x1c6>
 80006ae:	ea43 0306 	orr.w	r3, r3, r6
 80006b2:	4770      	bx	lr
 80006b4:	ea94 0f0c 	teq	r4, ip
 80006b8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006bc:	bf18      	it	ne
 80006be:	ea95 0f0c 	teqne	r5, ip
 80006c2:	d00c      	beq.n	80006de <__aeabi_dmul+0x206>
 80006c4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006c8:	bf18      	it	ne
 80006ca:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ce:	d1d1      	bne.n	8000674 <__aeabi_dmul+0x19c>
 80006d0:	ea81 0103 	eor.w	r1, r1, r3
 80006d4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d8:	f04f 0000 	mov.w	r0, #0
 80006dc:	bd70      	pop	{r4, r5, r6, pc}
 80006de:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006e2:	bf06      	itte	eq
 80006e4:	4610      	moveq	r0, r2
 80006e6:	4619      	moveq	r1, r3
 80006e8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ec:	d019      	beq.n	8000722 <__aeabi_dmul+0x24a>
 80006ee:	ea94 0f0c 	teq	r4, ip
 80006f2:	d102      	bne.n	80006fa <__aeabi_dmul+0x222>
 80006f4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006f8:	d113      	bne.n	8000722 <__aeabi_dmul+0x24a>
 80006fa:	ea95 0f0c 	teq	r5, ip
 80006fe:	d105      	bne.n	800070c <__aeabi_dmul+0x234>
 8000700:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000704:	bf1c      	itt	ne
 8000706:	4610      	movne	r0, r2
 8000708:	4619      	movne	r1, r3
 800070a:	d10a      	bne.n	8000722 <__aeabi_dmul+0x24a>
 800070c:	ea81 0103 	eor.w	r1, r1, r3
 8000710:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000714:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000718:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800071c:	f04f 0000 	mov.w	r0, #0
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000726:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800072a:	bd70      	pop	{r4, r5, r6, pc}

0800072c <__aeabi_ddiv>:
 800072c:	b570      	push	{r4, r5, r6, lr}
 800072e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000732:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000736:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800073a:	bf1d      	ittte	ne
 800073c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000740:	ea94 0f0c 	teqne	r4, ip
 8000744:	ea95 0f0c 	teqne	r5, ip
 8000748:	f000 f8a7 	bleq	800089a <__aeabi_ddiv+0x16e>
 800074c:	eba4 0405 	sub.w	r4, r4, r5
 8000750:	ea81 0e03 	eor.w	lr, r1, r3
 8000754:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000758:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800075c:	f000 8088 	beq.w	8000870 <__aeabi_ddiv+0x144>
 8000760:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000764:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000768:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800076c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000770:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000774:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000778:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800077c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000780:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000784:	429d      	cmp	r5, r3
 8000786:	bf08      	it	eq
 8000788:	4296      	cmpeq	r6, r2
 800078a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800078e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000792:	d202      	bcs.n	800079a <__aeabi_ddiv+0x6e>
 8000794:	085b      	lsrs	r3, r3, #1
 8000796:	ea4f 0232 	mov.w	r2, r2, rrx
 800079a:	1ab6      	subs	r6, r6, r2
 800079c:	eb65 0503 	sbc.w	r5, r5, r3
 80007a0:	085b      	lsrs	r3, r3, #1
 80007a2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007a6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80007aa:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80007ae:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007b6:	bf22      	ittt	cs
 80007b8:	1ab6      	subcs	r6, r6, r2
 80007ba:	4675      	movcs	r5, lr
 80007bc:	ea40 000c 	orrcs.w	r0, r0, ip
 80007c0:	085b      	lsrs	r3, r3, #1
 80007c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007c6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ca:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ce:	bf22      	ittt	cs
 80007d0:	1ab6      	subcs	r6, r6, r2
 80007d2:	4675      	movcs	r5, lr
 80007d4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007d8:	085b      	lsrs	r3, r3, #1
 80007da:	ea4f 0232 	mov.w	r2, r2, rrx
 80007de:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007e6:	bf22      	ittt	cs
 80007e8:	1ab6      	subcs	r6, r6, r2
 80007ea:	4675      	movcs	r5, lr
 80007ec:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007f0:	085b      	lsrs	r3, r3, #1
 80007f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007fe:	bf22      	ittt	cs
 8000800:	1ab6      	subcs	r6, r6, r2
 8000802:	4675      	movcs	r5, lr
 8000804:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000808:	ea55 0e06 	orrs.w	lr, r5, r6
 800080c:	d018      	beq.n	8000840 <__aeabi_ddiv+0x114>
 800080e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000812:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000816:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800081a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800081e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000822:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000826:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800082a:	d1c0      	bne.n	80007ae <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000830:	d10b      	bne.n	800084a <__aeabi_ddiv+0x11e>
 8000832:	ea41 0100 	orr.w	r1, r1, r0
 8000836:	f04f 0000 	mov.w	r0, #0
 800083a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800083e:	e7b6      	b.n	80007ae <__aeabi_ddiv+0x82>
 8000840:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000844:	bf04      	itt	eq
 8000846:	4301      	orreq	r1, r0
 8000848:	2000      	moveq	r0, #0
 800084a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800084e:	bf88      	it	hi
 8000850:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000854:	f63f aeaf 	bhi.w	80005b6 <__aeabi_dmul+0xde>
 8000858:	ebb5 0c03 	subs.w	ip, r5, r3
 800085c:	bf04      	itt	eq
 800085e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000862:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000866:	f150 0000 	adcs.w	r0, r0, #0
 800086a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800086e:	bd70      	pop	{r4, r5, r6, pc}
 8000870:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000874:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000878:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800087c:	bfc2      	ittt	gt
 800087e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000882:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000886:	bd70      	popgt	{r4, r5, r6, pc}
 8000888:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800088c:	f04f 0e00 	mov.w	lr, #0
 8000890:	3c01      	subs	r4, #1
 8000892:	e690      	b.n	80005b6 <__aeabi_dmul+0xde>
 8000894:	ea45 0e06 	orr.w	lr, r5, r6
 8000898:	e68d      	b.n	80005b6 <__aeabi_dmul+0xde>
 800089a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800089e:	ea94 0f0c 	teq	r4, ip
 80008a2:	bf08      	it	eq
 80008a4:	ea95 0f0c 	teqeq	r5, ip
 80008a8:	f43f af3b 	beq.w	8000722 <__aeabi_dmul+0x24a>
 80008ac:	ea94 0f0c 	teq	r4, ip
 80008b0:	d10a      	bne.n	80008c8 <__aeabi_ddiv+0x19c>
 80008b2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008b6:	f47f af34 	bne.w	8000722 <__aeabi_dmul+0x24a>
 80008ba:	ea95 0f0c 	teq	r5, ip
 80008be:	f47f af25 	bne.w	800070c <__aeabi_dmul+0x234>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e72c      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008c8:	ea95 0f0c 	teq	r5, ip
 80008cc:	d106      	bne.n	80008dc <__aeabi_ddiv+0x1b0>
 80008ce:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008d2:	f43f aefd 	beq.w	80006d0 <__aeabi_dmul+0x1f8>
 80008d6:	4610      	mov	r0, r2
 80008d8:	4619      	mov	r1, r3
 80008da:	e722      	b.n	8000722 <__aeabi_dmul+0x24a>
 80008dc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008e0:	bf18      	it	ne
 80008e2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008e6:	f47f aec5 	bne.w	8000674 <__aeabi_dmul+0x19c>
 80008ea:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008ee:	f47f af0d 	bne.w	800070c <__aeabi_dmul+0x234>
 80008f2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008f6:	f47f aeeb 	bne.w	80006d0 <__aeabi_dmul+0x1f8>
 80008fa:	e712      	b.n	8000722 <__aeabi_dmul+0x24a>

080008fc <__gedf2>:
 80008fc:	f04f 3cff 	mov.w	ip, #4294967295
 8000900:	e006      	b.n	8000910 <__cmpdf2+0x4>
 8000902:	bf00      	nop

08000904 <__ledf2>:
 8000904:	f04f 0c01 	mov.w	ip, #1
 8000908:	e002      	b.n	8000910 <__cmpdf2+0x4>
 800090a:	bf00      	nop

0800090c <__cmpdf2>:
 800090c:	f04f 0c01 	mov.w	ip, #1
 8000910:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000914:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000918:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800091c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000920:	bf18      	it	ne
 8000922:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000926:	d01b      	beq.n	8000960 <__cmpdf2+0x54>
 8000928:	b001      	add	sp, #4
 800092a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800092e:	bf0c      	ite	eq
 8000930:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000934:	ea91 0f03 	teqne	r1, r3
 8000938:	bf02      	ittt	eq
 800093a:	ea90 0f02 	teqeq	r0, r2
 800093e:	2000      	moveq	r0, #0
 8000940:	4770      	bxeq	lr
 8000942:	f110 0f00 	cmn.w	r0, #0
 8000946:	ea91 0f03 	teq	r1, r3
 800094a:	bf58      	it	pl
 800094c:	4299      	cmppl	r1, r3
 800094e:	bf08      	it	eq
 8000950:	4290      	cmpeq	r0, r2
 8000952:	bf2c      	ite	cs
 8000954:	17d8      	asrcs	r0, r3, #31
 8000956:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800095a:	f040 0001 	orr.w	r0, r0, #1
 800095e:	4770      	bx	lr
 8000960:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d102      	bne.n	8000970 <__cmpdf2+0x64>
 800096a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800096e:	d107      	bne.n	8000980 <__cmpdf2+0x74>
 8000970:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000974:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000978:	d1d6      	bne.n	8000928 <__cmpdf2+0x1c>
 800097a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800097e:	d0d3      	beq.n	8000928 <__cmpdf2+0x1c>
 8000980:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000984:	4770      	bx	lr
 8000986:	bf00      	nop

08000988 <__aeabi_cdrcmple>:
 8000988:	4684      	mov	ip, r0
 800098a:	4610      	mov	r0, r2
 800098c:	4662      	mov	r2, ip
 800098e:	468c      	mov	ip, r1
 8000990:	4619      	mov	r1, r3
 8000992:	4663      	mov	r3, ip
 8000994:	e000      	b.n	8000998 <__aeabi_cdcmpeq>
 8000996:	bf00      	nop

08000998 <__aeabi_cdcmpeq>:
 8000998:	b501      	push	{r0, lr}
 800099a:	f7ff ffb7 	bl	800090c <__cmpdf2>
 800099e:	2800      	cmp	r0, #0
 80009a0:	bf48      	it	mi
 80009a2:	f110 0f00 	cmnmi.w	r0, #0
 80009a6:	bd01      	pop	{r0, pc}

080009a8 <__aeabi_dcmpeq>:
 80009a8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ac:	f7ff fff4 	bl	8000998 <__aeabi_cdcmpeq>
 80009b0:	bf0c      	ite	eq
 80009b2:	2001      	moveq	r0, #1
 80009b4:	2000      	movne	r0, #0
 80009b6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ba:	bf00      	nop

080009bc <__aeabi_dcmplt>:
 80009bc:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c0:	f7ff ffea 	bl	8000998 <__aeabi_cdcmpeq>
 80009c4:	bf34      	ite	cc
 80009c6:	2001      	movcc	r0, #1
 80009c8:	2000      	movcs	r0, #0
 80009ca:	f85d fb08 	ldr.w	pc, [sp], #8
 80009ce:	bf00      	nop

080009d0 <__aeabi_dcmple>:
 80009d0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d4:	f7ff ffe0 	bl	8000998 <__aeabi_cdcmpeq>
 80009d8:	bf94      	ite	ls
 80009da:	2001      	movls	r0, #1
 80009dc:	2000      	movhi	r0, #0
 80009de:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e2:	bf00      	nop

080009e4 <__aeabi_dcmpge>:
 80009e4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009e8:	f7ff ffce 	bl	8000988 <__aeabi_cdrcmple>
 80009ec:	bf94      	ite	ls
 80009ee:	2001      	movls	r0, #1
 80009f0:	2000      	movhi	r0, #0
 80009f2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009f6:	bf00      	nop

080009f8 <__aeabi_dcmpgt>:
 80009f8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009fc:	f7ff ffc4 	bl	8000988 <__aeabi_cdrcmple>
 8000a00:	bf34      	ite	cc
 8000a02:	2001      	movcc	r0, #1
 8000a04:	2000      	movcs	r0, #0
 8000a06:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a0a:	bf00      	nop

08000a0c <__aeabi_dcmpun>:
 8000a0c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a10:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a14:	d102      	bne.n	8000a1c <__aeabi_dcmpun+0x10>
 8000a16:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a1a:	d10a      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a1c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a20:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a24:	d102      	bne.n	8000a2c <__aeabi_dcmpun+0x20>
 8000a26:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a2a:	d102      	bne.n	8000a32 <__aeabi_dcmpun+0x26>
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	f04f 0001 	mov.w	r0, #1
 8000a36:	4770      	bx	lr

08000a38 <__aeabi_d2iz>:
 8000a38:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a3c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000a40:	d215      	bcs.n	8000a6e <__aeabi_d2iz+0x36>
 8000a42:	d511      	bpl.n	8000a68 <__aeabi_d2iz+0x30>
 8000a44:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000a48:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a4c:	d912      	bls.n	8000a74 <__aeabi_d2iz+0x3c>
 8000a4e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a52:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000a56:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a5a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000a5e:	fa23 f002 	lsr.w	r0, r3, r2
 8000a62:	bf18      	it	ne
 8000a64:	4240      	negne	r0, r0
 8000a66:	4770      	bx	lr
 8000a68:	f04f 0000 	mov.w	r0, #0
 8000a6c:	4770      	bx	lr
 8000a6e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a72:	d105      	bne.n	8000a80 <__aeabi_d2iz+0x48>
 8000a74:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000a78:	bf08      	it	eq
 8000a7a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000a7e:	4770      	bx	lr
 8000a80:	f04f 0000 	mov.w	r0, #0
 8000a84:	4770      	bx	lr
 8000a86:	bf00      	nop

08000a88 <HX711_SCK_GET>:
HX711_GainLevel gainLevel = GAIN_128;
double shift = 0;;
double coeff = 1;

// Private function
GPIO_PinState HX711_SCK_GET() {
 8000a88:	b580      	push	{r7, lr}
 8000a8a:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(HX711_SCK_PORT, HX711_SCK_PIN);
 8000a8c:	4b05      	ldr	r3, [pc, #20]	; (8000aa4 <HX711_SCK_GET+0x1c>)
 8000a8e:	681b      	ldr	r3, [r3, #0]
 8000a90:	4a05      	ldr	r2, [pc, #20]	; (8000aa8 <HX711_SCK_GET+0x20>)
 8000a92:	8812      	ldrh	r2, [r2, #0]
 8000a94:	4611      	mov	r1, r2
 8000a96:	4618      	mov	r0, r3
 8000a98:	f001 fdf8 	bl	800268c <HAL_GPIO_ReadPin>
 8000a9c:	4603      	mov	r3, r0
}
 8000a9e:	4618      	mov	r0, r3
 8000aa0:	bd80      	pop	{r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	20000290 	.word	0x20000290
 8000aa8:	20000294 	.word	0x20000294

08000aac <HX711_SCK_SET>:

void HX711_SCK_SET(GPIO_PinState state) {
 8000aac:	b580      	push	{r7, lr}
 8000aae:	b082      	sub	sp, #8
 8000ab0:	af00      	add	r7, sp, #0
 8000ab2:	4603      	mov	r3, r0
 8000ab4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, state);
 8000ab6:	4b06      	ldr	r3, [pc, #24]	; (8000ad0 <HX711_SCK_SET+0x24>)
 8000ab8:	681b      	ldr	r3, [r3, #0]
 8000aba:	4a06      	ldr	r2, [pc, #24]	; (8000ad4 <HX711_SCK_SET+0x28>)
 8000abc:	8811      	ldrh	r1, [r2, #0]
 8000abe:	79fa      	ldrb	r2, [r7, #7]
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	f001 fdfa 	bl	80026ba <HAL_GPIO_WritePin>
}
 8000ac6:	bf00      	nop
 8000ac8:	3708      	adds	r7, #8
 8000aca:	46bd      	mov	sp, r7
 8000acc:	bd80      	pop	{r7, pc}
 8000ace:	bf00      	nop
 8000ad0:	20000290 	.word	0x20000290
 8000ad4:	20000294 	.word	0x20000294

08000ad8 <HX711_SCK_HIGH>:

void HX711_SCK_HIGH() {
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	af00      	add	r7, sp, #0
	HX711_SCK_SET(GPIO_PIN_SET);
 8000adc:	2001      	movs	r0, #1
 8000ade:	f7ff ffe5 	bl	8000aac <HX711_SCK_SET>
}
 8000ae2:	bf00      	nop
 8000ae4:	bd80      	pop	{r7, pc}

08000ae6 <HX711_SCK_LOW>:

void HX711_SCK_LOW() {
 8000ae6:	b580      	push	{r7, lr}
 8000ae8:	af00      	add	r7, sp, #0
	HX711_SCK_SET(GPIO_PIN_RESET);
 8000aea:	2000      	movs	r0, #0
 8000aec:	f7ff ffde 	bl	8000aac <HX711_SCK_SET>
}
 8000af0:	bf00      	nop
 8000af2:	bd80      	pop	{r7, pc}

08000af4 <HX711_DT_GET>:

GPIO_PinState HX711_DT_GET() {
 8000af4:	b580      	push	{r7, lr}
 8000af6:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN);
 8000af8:	4b05      	ldr	r3, [pc, #20]	; (8000b10 <HX711_DT_GET+0x1c>)
 8000afa:	681b      	ldr	r3, [r3, #0]
 8000afc:	4a05      	ldr	r2, [pc, #20]	; (8000b14 <HX711_DT_GET+0x20>)
 8000afe:	8812      	ldrh	r2, [r2, #0]
 8000b00:	4611      	mov	r1, r2
 8000b02:	4618      	mov	r0, r3
 8000b04:	f001 fdc2 	bl	800268c <HAL_GPIO_ReadPin>
 8000b08:	4603      	mov	r3, r0
}
 8000b0a:	4618      	mov	r0, r3
 8000b0c:	bd80      	pop	{r7, pc}
 8000b0e:	bf00      	nop
 8000b10:	2000028c 	.word	0x2000028c
 8000b14:	20000288 	.word	0x20000288

08000b18 <HX711_WaitUntilDataReady>:

void HX711_WaitUntilDataReady() {
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	af00      	add	r7, sp, #0
	while(HX711_DT_GET() != GPIO_PIN_RESET);
 8000b1c:	bf00      	nop
 8000b1e:	f7ff ffe9 	bl	8000af4 <HX711_DT_GET>
 8000b22:	4603      	mov	r3, r0
 8000b24:	2b00      	cmp	r3, #0
 8000b26:	d1fa      	bne.n	8000b1e <HX711_WaitUntilDataReady+0x6>
}
 8000b28:	bf00      	nop
 8000b2a:	bf00      	nop
 8000b2c:	bd80      	pop	{r7, pc}
	...

08000b30 <HX711_PerformGainPulse>:

void HX711_PerformGainPulse() {
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
	uint8_t times;
	switch(gainLevel) {
 8000b36:	4b11      	ldr	r3, [pc, #68]	; (8000b7c <HX711_PerformGainPulse+0x4c>)
 8000b38:	781b      	ldrb	r3, [r3, #0]
 8000b3a:	2b02      	cmp	r3, #2
 8000b3c:	d00c      	beq.n	8000b58 <HX711_PerformGainPulse+0x28>
 8000b3e:	2b02      	cmp	r3, #2
 8000b40:	dc12      	bgt.n	8000b68 <HX711_PerformGainPulse+0x38>
 8000b42:	2b00      	cmp	r3, #0
 8000b44:	d002      	beq.n	8000b4c <HX711_PerformGainPulse+0x1c>
 8000b46:	2b01      	cmp	r3, #1
 8000b48:	d003      	beq.n	8000b52 <HX711_PerformGainPulse+0x22>
 8000b4a:	e008      	b.n	8000b5e <HX711_PerformGainPulse+0x2e>
		case GAIN_128:
			times = 1;
 8000b4c:	2301      	movs	r3, #1
 8000b4e:	71fb      	strb	r3, [r7, #7]
			break;
 8000b50:	e005      	b.n	8000b5e <HX711_PerformGainPulse+0x2e>
		case GAIN_64:
			times = 3;
 8000b52:	2303      	movs	r3, #3
 8000b54:	71fb      	strb	r3, [r7, #7]
			break;
 8000b56:	e002      	b.n	8000b5e <HX711_PerformGainPulse+0x2e>
		case GAIN_32:
			times = 2;
 8000b58:	2302      	movs	r3, #2
 8000b5a:	71fb      	strb	r3, [r7, #7]
			break;
 8000b5c:	bf00      	nop
	}

	while(times-- > 0) {
 8000b5e:	e003      	b.n	8000b68 <HX711_PerformGainPulse+0x38>
		HX711_SCK_HIGH();
 8000b60:	f7ff ffba 	bl	8000ad8 <HX711_SCK_HIGH>
		HX711_SCK_LOW();
 8000b64:	f7ff ffbf 	bl	8000ae6 <HX711_SCK_LOW>
	while(times-- > 0) {
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	1e5a      	subs	r2, r3, #1
 8000b6c:	71fa      	strb	r2, [r7, #7]
 8000b6e:	2b00      	cmp	r3, #0
 8000b70:	d1f6      	bne.n	8000b60 <HX711_PerformGainPulse+0x30>
	}
}
 8000b72:	bf00      	nop
 8000b74:	bf00      	nop
 8000b76:	3708      	adds	r7, #8
 8000b78:	46bd      	mov	sp, r7
 8000b7a:	bd80      	pop	{r7, pc}
 8000b7c:	20000204 	.word	0x20000204

08000b80 <HX711_ReadRawValue>:

long HX711_ReadRawValue() {
 8000b80:	b580      	push	{r7, lr}
 8000b82:	b082      	sub	sp, #8
 8000b84:	af00      	add	r7, sp, #0
	HX711_WaitUntilDataReady();
 8000b86:	f7ff ffc7 	bl	8000b18 <HX711_WaitUntilDataReady>

	long value = 0;
 8000b8a:	2300      	movs	r3, #0
 8000b8c:	607b      	str	r3, [r7, #4]
	for (unsigned short i = 0; i < 24; i++) {
 8000b8e:	2300      	movs	r3, #0
 8000b90:	807b      	strh	r3, [r7, #2]
 8000b92:	e011      	b.n	8000bb8 <HX711_ReadRawValue+0x38>
		HX711_SCK_HIGH();
 8000b94:	f7ff ffa0 	bl	8000ad8 <HX711_SCK_HIGH>
		value = value << 1;
 8000b98:	687b      	ldr	r3, [r7, #4]
 8000b9a:	005b      	lsls	r3, r3, #1
 8000b9c:	607b      	str	r3, [r7, #4]
		HX711_SCK_LOW();
 8000b9e:	f7ff ffa2 	bl	8000ae6 <HX711_SCK_LOW>
		if(HX711_DT_GET() == GPIO_PIN_SET) ++value;
 8000ba2:	f7ff ffa7 	bl	8000af4 <HX711_DT_GET>
 8000ba6:	4603      	mov	r3, r0
 8000ba8:	2b01      	cmp	r3, #1
 8000baa:	d102      	bne.n	8000bb2 <HX711_ReadRawValue+0x32>
 8000bac:	687b      	ldr	r3, [r7, #4]
 8000bae:	3301      	adds	r3, #1
 8000bb0:	607b      	str	r3, [r7, #4]
	for (unsigned short i = 0; i < 24; i++) {
 8000bb2:	887b      	ldrh	r3, [r7, #2]
 8000bb4:	3301      	adds	r3, #1
 8000bb6:	807b      	strh	r3, [r7, #2]
 8000bb8:	887b      	ldrh	r3, [r7, #2]
 8000bba:	2b17      	cmp	r3, #23
 8000bbc:	d9ea      	bls.n	8000b94 <HX711_ReadRawValue+0x14>
	}

	HX711_PerformGainPulse();
 8000bbe:	f7ff ffb7 	bl	8000b30 <HX711_PerformGainPulse>

	//HX711 range: lower half is from 0x800000 to 0xFFFFFF, upper half is from 0x000000 to 7FFFFF
	//so it rolls over at 0xFFFFFF, so we need to flip the 24th bit
	return value ^ 0x800000;
 8000bc2:	687b      	ldr	r3, [r7, #4]
 8000bc4:	f483 0300 	eor.w	r3, r3, #8388608	; 0x800000
}
 8000bc8:	4618      	mov	r0, r3
 8000bca:	3708      	adds	r7, #8
 8000bcc:	46bd      	mov	sp, r7
 8000bce:	bd80      	pop	{r7, pc}

08000bd0 <HX711_Init>:
void HX711_Init(
	GPIO_TypeDef* SCK_PORT,
	uint16_t SCK_PIN,
	GPIO_TypeDef* DT_PORT,
	uint16_t DT_PIN
) {
 8000bd0:	b580      	push	{r7, lr}
 8000bd2:	b084      	sub	sp, #16
 8000bd4:	af00      	add	r7, sp, #0
 8000bd6:	60f8      	str	r0, [r7, #12]
 8000bd8:	607a      	str	r2, [r7, #4]
 8000bda:	461a      	mov	r2, r3
 8000bdc:	460b      	mov	r3, r1
 8000bde:	817b      	strh	r3, [r7, #10]
 8000be0:	4613      	mov	r3, r2
 8000be2:	813b      	strh	r3, [r7, #8]
	HX711_SCK_PORT= SCK_PORT;
 8000be4:	4a08      	ldr	r2, [pc, #32]	; (8000c08 <HX711_Init+0x38>)
 8000be6:	68fb      	ldr	r3, [r7, #12]
 8000be8:	6013      	str	r3, [r2, #0]
	HX711_SCK_PIN = SCK_PIN;
 8000bea:	4a08      	ldr	r2, [pc, #32]	; (8000c0c <HX711_Init+0x3c>)
 8000bec:	897b      	ldrh	r3, [r7, #10]
 8000bee:	8013      	strh	r3, [r2, #0]
	HX711_DT_PORT = DT_PORT;
 8000bf0:	4a07      	ldr	r2, [pc, #28]	; (8000c10 <HX711_Init+0x40>)
 8000bf2:	687b      	ldr	r3, [r7, #4]
 8000bf4:	6013      	str	r3, [r2, #0]
	HX711_DT_PIN = DT_PIN;
 8000bf6:	4a07      	ldr	r2, [pc, #28]	; (8000c14 <HX711_Init+0x44>)
 8000bf8:	893b      	ldrh	r3, [r7, #8]
 8000bfa:	8013      	strh	r3, [r2, #0]

	HX711_PowerDown();
 8000bfc:	f000 f80c 	bl	8000c18 <HX711_PowerDown>
}
 8000c00:	bf00      	nop
 8000c02:	3710      	adds	r7, #16
 8000c04:	46bd      	mov	sp, r7
 8000c06:	bd80      	pop	{r7, pc}
 8000c08:	20000290 	.word	0x20000290
 8000c0c:	20000294 	.word	0x20000294
 8000c10:	2000028c 	.word	0x2000028c
 8000c14:	20000288 	.word	0x20000288

08000c18 <HX711_PowerDown>:

void HX711_PowerDown() {
 8000c18:	b580      	push	{r7, lr}
 8000c1a:	af00      	add	r7, sp, #0
	HX711_SCK_HIGH();
 8000c1c:	f7ff ff5c 	bl	8000ad8 <HX711_SCK_HIGH>
	HAL_Delay(1);
 8000c20:	2001      	movs	r0, #1
 8000c22:	f001 fa7d 	bl	8002120 <HAL_Delay>
}
 8000c26:	bf00      	nop
 8000c28:	bd80      	pop	{r7, pc}

08000c2a <HX711_PowerUp>:

void HX711_PowerUp() {
 8000c2a:	b580      	push	{r7, lr}
 8000c2c:	af00      	add	r7, sp, #0
	HX711_SCK_LOW();
 8000c2e:	f7ff ff5a 	bl	8000ae6 <HX711_SCK_LOW>
	HAL_Delay(1);
 8000c32:	2001      	movs	r0, #1
 8000c34:	f001 fa74 	bl	8002120 <HAL_Delay>

	HX711_ReadRawValue(); // to set the gain level;
 8000c38:	f7ff ffa2 	bl	8000b80 <HX711_ReadRawValue>
}
 8000c3c:	bf00      	nop
 8000c3e:	bd80      	pop	{r7, pc}

08000c40 <HX711_IsPoweredUp>:

boolean HX711_IsPoweredUp() {
 8000c40:	b580      	push	{r7, lr}
 8000c42:	af00      	add	r7, sp, #0
	return HX711_SCK_GET() == GPIO_PIN_RESET;
 8000c44:	f7ff ff20 	bl	8000a88 <HX711_SCK_GET>
 8000c48:	4603      	mov	r3, r0
 8000c4a:	2b00      	cmp	r3, #0
 8000c4c:	bf0c      	ite	eq
 8000c4e:	2301      	moveq	r3, #1
 8000c50:	2300      	movne	r3, #0
 8000c52:	b2db      	uxtb	r3, r3
}
 8000c54:	4618      	mov	r0, r3
 8000c56:	bd80      	pop	{r7, pc}

08000c58 <HX711_SetGainLevel>:

void HX711_SetGainLevel(HX711_GainLevel _gainLevel) {
 8000c58:	b580      	push	{r7, lr}
 8000c5a:	b082      	sub	sp, #8
 8000c5c:	af00      	add	r7, sp, #0
 8000c5e:	4603      	mov	r3, r0
 8000c60:	71fb      	strb	r3, [r7, #7]
	gainLevel = _gainLevel;
 8000c62:	4a07      	ldr	r2, [pc, #28]	; (8000c80 <HX711_SetGainLevel+0x28>)
 8000c64:	79fb      	ldrb	r3, [r7, #7]
 8000c66:	7013      	strb	r3, [r2, #0]

	if(HX711_IsPoweredUp()) HX711_ReadRawValue();
 8000c68:	f7ff ffea 	bl	8000c40 <HX711_IsPoweredUp>
 8000c6c:	4603      	mov	r3, r0
 8000c6e:	2b00      	cmp	r3, #0
 8000c70:	d001      	beq.n	8000c76 <HX711_SetGainLevel+0x1e>
 8000c72:	f7ff ff85 	bl	8000b80 <HX711_ReadRawValue>
}
 8000c76:	bf00      	nop
 8000c78:	3708      	adds	r7, #8
 8000c7a:	46bd      	mov	sp, r7
 8000c7c:	bd80      	pop	{r7, pc}
 8000c7e:	bf00      	nop
 8000c80:	20000204 	.word	0x20000204

08000c84 <HX711_Calibrate>:

void HX711_Calibrate(double _shift, double _coeff) {
 8000c84:	b480      	push	{r7}
 8000c86:	b085      	sub	sp, #20
 8000c88:	af00      	add	r7, sp, #0
 8000c8a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000c8e:	e9c7 2300 	strd	r2, r3, [r7]
	shift = _shift;
 8000c92:	4907      	ldr	r1, [pc, #28]	; (8000cb0 <HX711_Calibrate+0x2c>)
 8000c94:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000c98:	e9c1 2300 	strd	r2, r3, [r1]
	coeff = _coeff;
 8000c9c:	4905      	ldr	r1, [pc, #20]	; (8000cb4 <HX711_Calibrate+0x30>)
 8000c9e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000ca2:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000ca6:	bf00      	nop
 8000ca8:	3714      	adds	r7, #20
 8000caa:	46bd      	mov	sp, r7
 8000cac:	bc80      	pop	{r7}
 8000cae:	4770      	bx	lr
 8000cb0:	20000208 	.word	0x20000208
 8000cb4:	20000000 	.word	0x20000000

08000cb8 <HX711_ReadValue>:

double HX711_ReadValue() {
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
	return ((double)HX711_ReadRawValue() - shift) * coeff;
 8000cbc:	f7ff ff60 	bl	8000b80 <HX711_ReadRawValue>
 8000cc0:	4603      	mov	r3, r0
 8000cc2:	4618      	mov	r0, r3
 8000cc4:	f7ff fb9e 	bl	8000404 <__aeabi_i2d>
 8000cc8:	4b09      	ldr	r3, [pc, #36]	; (8000cf0 <HX711_ReadValue+0x38>)
 8000cca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000cce:	f7ff fa4b 	bl	8000168 <__aeabi_dsub>
 8000cd2:	4602      	mov	r2, r0
 8000cd4:	460b      	mov	r3, r1
 8000cd6:	4610      	mov	r0, r2
 8000cd8:	4619      	mov	r1, r3
 8000cda:	4b06      	ldr	r3, [pc, #24]	; (8000cf4 <HX711_ReadValue+0x3c>)
 8000cdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000ce0:	f7ff fbfa 	bl	80004d8 <__aeabi_dmul>
 8000ce4:	4602      	mov	r2, r0
 8000ce6:	460b      	mov	r3, r1
}
 8000ce8:	4610      	mov	r0, r2
 8000cea:	4619      	mov	r1, r3
 8000cec:	bd80      	pop	{r7, pc}
 8000cee:	bf00      	nop
 8000cf0:	20000208 	.word	0x20000208
 8000cf4:	20000000 	.word	0x20000000

08000cf8 <HX711_ReadAverageValue>:

double HX711_ReadAverageValue(int times) {
 8000cf8:	b5b0      	push	{r4, r5, r7, lr}
 8000cfa:	b086      	sub	sp, #24
 8000cfc:	af00      	add	r7, sp, #0
 8000cfe:	6078      	str	r0, [r7, #4]
	double value = 0;
 8000d00:	f04f 0200 	mov.w	r2, #0
 8000d04:	f04f 0300 	mov.w	r3, #0
 8000d08:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(int i = 0; i < times; ++i) {
 8000d0c:	2300      	movs	r3, #0
 8000d0e:	60fb      	str	r3, [r7, #12]
 8000d10:	e019      	b.n	8000d46 <HX711_ReadAverageValue+0x4e>
		value += HX711_ReadValue() / (double)times;
 8000d12:	f7ff ffd1 	bl	8000cb8 <HX711_ReadValue>
 8000d16:	4604      	mov	r4, r0
 8000d18:	460d      	mov	r5, r1
 8000d1a:	6878      	ldr	r0, [r7, #4]
 8000d1c:	f7ff fb72 	bl	8000404 <__aeabi_i2d>
 8000d20:	4602      	mov	r2, r0
 8000d22:	460b      	mov	r3, r1
 8000d24:	4620      	mov	r0, r4
 8000d26:	4629      	mov	r1, r5
 8000d28:	f7ff fd00 	bl	800072c <__aeabi_ddiv>
 8000d2c:	4602      	mov	r2, r0
 8000d2e:	460b      	mov	r3, r1
 8000d30:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000d34:	f7ff fa1a 	bl	800016c <__adddf3>
 8000d38:	4602      	mov	r2, r0
 8000d3a:	460b      	mov	r3, r1
 8000d3c:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < times; ++i) {
 8000d40:	68fb      	ldr	r3, [r7, #12]
 8000d42:	3301      	adds	r3, #1
 8000d44:	60fb      	str	r3, [r7, #12]
 8000d46:	68fa      	ldr	r2, [r7, #12]
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	429a      	cmp	r2, r3
 8000d4c:	dbe1      	blt.n	8000d12 <HX711_ReadAverageValue+0x1a>
	}

	return value;
 8000d4e:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000d52:	4610      	mov	r0, r2
 8000d54:	4619      	mov	r1, r3
 8000d56:	3718      	adds	r7, #24
 8000d58:	46bd      	mov	sp, r7
 8000d5a:	bdb0      	pop	{r4, r5, r7, pc}

08000d5c <updateDateTime>:
RTC_DateTypeDef currentDate = {0};

uint8_t nextDay;

// Private functions
void updateDateTime() {
 8000d5c:	b580      	push	{r7, lr}
 8000d5e:	af00      	add	r7, sp, #0
	HAL_RTC_GetTime(&HRTC, &currentTime, RTC_FORMAT_BIN);
 8000d60:	2200      	movs	r2, #0
 8000d62:	4905      	ldr	r1, [pc, #20]	; (8000d78 <updateDateTime+0x1c>)
 8000d64:	4805      	ldr	r0, [pc, #20]	; (8000d7c <updateDateTime+0x20>)
 8000d66:	f002 fbb1 	bl	80034cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&HRTC, &currentDate, RTC_FORMAT_BIN);
 8000d6a:	2200      	movs	r2, #0
 8000d6c:	4904      	ldr	r1, [pc, #16]	; (8000d80 <updateDateTime+0x24>)
 8000d6e:	4803      	ldr	r0, [pc, #12]	; (8000d7c <updateDateTime+0x20>)
 8000d70:	f002 fd3a 	bl	80037e8 <HAL_RTC_GetDate>
}
 8000d74:	bf00      	nop
 8000d76:	bd80      	pop	{r7, pc}
 8000d78:	20000210 	.word	0x20000210
 8000d7c:	2000029c 	.word	0x2000029c
 8000d80:	20000214 	.word	0x20000214

08000d84 <RTC_POLLING_InitEveryDay>:


// Public functions
void RTC_POLLING_InitEveryDay(RTC_HandleTypeDef hrtc) {
 8000d84:	b084      	sub	sp, #16
 8000d86:	b5b0      	push	{r4, r5, r7, lr}
 8000d88:	af00      	add	r7, sp, #0
 8000d8a:	f107 0410 	add.w	r4, r7, #16
 8000d8e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	HRTC = hrtc;
 8000d92:	4b0a      	ldr	r3, [pc, #40]	; (8000dbc <RTC_POLLING_InitEveryDay+0x38>)
 8000d94:	461d      	mov	r5, r3
 8000d96:	f107 0410 	add.w	r4, r7, #16
 8000d9a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8000d9c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8000d9e:	6823      	ldr	r3, [r4, #0]
 8000da0:	602b      	str	r3, [r5, #0]

	updateDateTime();
 8000da2:	f7ff ffdb 	bl	8000d5c <updateDateTime>
	nextDay = currentDate.WeekDay;
 8000da6:	4b06      	ldr	r3, [pc, #24]	; (8000dc0 <RTC_POLLING_InitEveryDay+0x3c>)
 8000da8:	781a      	ldrb	r2, [r3, #0]
 8000daa:	4b06      	ldr	r3, [pc, #24]	; (8000dc4 <RTC_POLLING_InitEveryDay+0x40>)
 8000dac:	701a      	strb	r2, [r3, #0]
}
 8000dae:	bf00      	nop
 8000db0:	46bd      	mov	sp, r7
 8000db2:	e8bd 40b0 	ldmia.w	sp!, {r4, r5, r7, lr}
 8000db6:	b004      	add	sp, #16
 8000db8:	4770      	bx	lr
 8000dba:	bf00      	nop
 8000dbc:	2000029c 	.word	0x2000029c
 8000dc0:	20000214 	.word	0x20000214
 8000dc4:	20000298 	.word	0x20000298

08000dc8 <RTC_POLLING_CheckEveryDay>:

bool RTC_POLLING_CheckEveryDay() {
 8000dc8:	b580      	push	{r7, lr}
 8000dca:	af00      	add	r7, sp, #0
	updateDateTime();
 8000dcc:	f7ff ffc6 	bl	8000d5c <updateDateTime>
	HAL_RTC_GetTime(&HRTC, &currentTime, RTC_FORMAT_BIN);
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	4910      	ldr	r1, [pc, #64]	; (8000e14 <RTC_POLLING_CheckEveryDay+0x4c>)
 8000dd4:	4810      	ldr	r0, [pc, #64]	; (8000e18 <RTC_POLLING_CheckEveryDay+0x50>)
 8000dd6:	f002 fb79 	bl	80034cc <HAL_RTC_GetTime>
	HAL_RTC_GetDate(&HRTC, &currentDate, RTC_FORMAT_BIN);
 8000dda:	2200      	movs	r2, #0
 8000ddc:	490f      	ldr	r1, [pc, #60]	; (8000e1c <RTC_POLLING_CheckEveryDay+0x54>)
 8000dde:	480e      	ldr	r0, [pc, #56]	; (8000e18 <RTC_POLLING_CheckEveryDay+0x50>)
 8000de0:	f002 fd02 	bl	80037e8 <HAL_RTC_GetDate>
	if(currentDate.WeekDay == nextDay) {
 8000de4:	4b0d      	ldr	r3, [pc, #52]	; (8000e1c <RTC_POLLING_CheckEveryDay+0x54>)
 8000de6:	781a      	ldrb	r2, [r3, #0]
 8000de8:	4b0d      	ldr	r3, [pc, #52]	; (8000e20 <RTC_POLLING_CheckEveryDay+0x58>)
 8000dea:	781b      	ldrb	r3, [r3, #0]
 8000dec:	429a      	cmp	r2, r3
 8000dee:	d10e      	bne.n	8000e0e <RTC_POLLING_CheckEveryDay+0x46>
		nextDay++;
 8000df0:	4b0b      	ldr	r3, [pc, #44]	; (8000e20 <RTC_POLLING_CheckEveryDay+0x58>)
 8000df2:	781b      	ldrb	r3, [r3, #0]
 8000df4:	3301      	adds	r3, #1
 8000df6:	b2da      	uxtb	r2, r3
 8000df8:	4b09      	ldr	r3, [pc, #36]	; (8000e20 <RTC_POLLING_CheckEveryDay+0x58>)
 8000dfa:	701a      	strb	r2, [r3, #0]
		if(nextDay >= 7) nextDay = 0;
 8000dfc:	4b08      	ldr	r3, [pc, #32]	; (8000e20 <RTC_POLLING_CheckEveryDay+0x58>)
 8000dfe:	781b      	ldrb	r3, [r3, #0]
 8000e00:	2b06      	cmp	r3, #6
 8000e02:	d902      	bls.n	8000e0a <RTC_POLLING_CheckEveryDay+0x42>
 8000e04:	4b06      	ldr	r3, [pc, #24]	; (8000e20 <RTC_POLLING_CheckEveryDay+0x58>)
 8000e06:	2200      	movs	r2, #0
 8000e08:	701a      	strb	r2, [r3, #0]

		return true;
 8000e0a:	2301      	movs	r3, #1
 8000e0c:	e000      	b.n	8000e10 <RTC_POLLING_CheckEveryDay+0x48>
	}

	return false;
 8000e0e:	2300      	movs	r3, #0
}
 8000e10:	4618      	mov	r0, r3
 8000e12:	bd80      	pop	{r7, pc}
 8000e14:	20000210 	.word	0x20000210
 8000e18:	2000029c 	.word	0x2000029c
 8000e1c:	20000214 	.word	0x20000214
 8000e20:	20000298 	.word	0x20000298

08000e24 <isStrStartsWith>:
UART_HandleTypeDef SIM900_HUART;
char buffer[BUFFER_SIZE] = "";


// Private functions
bool isStrStartsWith(const char *str, const char *pre) {
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
    return strncmp(pre, str, strlen(pre)) == 0;
 8000e2e:	6838      	ldr	r0, [r7, #0]
 8000e30:	f7ff f98e 	bl	8000150 <strlen>
 8000e34:	4603      	mov	r3, r0
 8000e36:	461a      	mov	r2, r3
 8000e38:	6879      	ldr	r1, [r7, #4]
 8000e3a:	6838      	ldr	r0, [r7, #0]
 8000e3c:	f003 fef3 	bl	8004c26 <strncmp>
 8000e40:	4603      	mov	r3, r0
 8000e42:	2b00      	cmp	r3, #0
 8000e44:	bf0c      	ite	eq
 8000e46:	2301      	moveq	r3, #1
 8000e48:	2300      	movne	r3, #0
 8000e4a:	b2db      	uxtb	r3, r3
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3708      	adds	r7, #8
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}

08000e54 <isStrContains>:

bool isStrContains(const char *str, const char * sub) {
 8000e54:	b580      	push	{r7, lr}
 8000e56:	b082      	sub	sp, #8
 8000e58:	af00      	add	r7, sp, #0
 8000e5a:	6078      	str	r0, [r7, #4]
 8000e5c:	6039      	str	r1, [r7, #0]
	return strstr(str, sub) != NULL;
 8000e5e:	6839      	ldr	r1, [r7, #0]
 8000e60:	6878      	ldr	r0, [r7, #4]
 8000e62:	f003 fef2 	bl	8004c4a <strstr>
 8000e66:	4603      	mov	r3, r0
 8000e68:	2b00      	cmp	r3, #0
 8000e6a:	bf14      	ite	ne
 8000e6c:	2301      	movne	r3, #1
 8000e6e:	2300      	moveq	r3, #0
 8000e70:	b2db      	uxtb	r3, r3
}
 8000e72:	4618      	mov	r0, r3
 8000e74:	3708      	adds	r7, #8
 8000e76:	46bd      	mov	sp, r7
 8000e78:	bd80      	pop	{r7, pc}
	...

08000e7c <resetBuffer>:

void resetBuffer() {
 8000e7c:	b580      	push	{r7, lr}
 8000e7e:	af00      	add	r7, sp, #0
	memset(buffer, 0, BUFFER_SIZE);
 8000e80:	2264      	movs	r2, #100	; 0x64
 8000e82:	2100      	movs	r1, #0
 8000e84:	4802      	ldr	r0, [pc, #8]	; (8000e90 <resetBuffer+0x14>)
 8000e86:	f003 fa37 	bl	80042f8 <memset>
}
 8000e8a:	bf00      	nop
 8000e8c:	bd80      	pop	{r7, pc}
 8000e8e:	bf00      	nop
 8000e90:	20000218 	.word	0x20000218

08000e94 <uartSend>:

void uartSend(const char *cmd) {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	b082      	sub	sp, #8
 8000e98:	af00      	add	r7, sp, #0
 8000e9a:	6078      	str	r0, [r7, #4]
	HAL_UART_Transmit(&SIM900_HUART, (uint8_t *)cmd, strlen(cmd), TIMEOUT_MS);
 8000e9c:	6878      	ldr	r0, [r7, #4]
 8000e9e:	f7ff f957 	bl	8000150 <strlen>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	b29a      	uxth	r2, r3
 8000ea6:	f241 3388 	movw	r3, #5000	; 0x1388
 8000eaa:	6879      	ldr	r1, [r7, #4]
 8000eac:	4803      	ldr	r0, [pc, #12]	; (8000ebc <uartSend+0x28>)
 8000eae:	f002 ffde 	bl	8003e6e <HAL_UART_Transmit>
}
 8000eb2:	bf00      	nop
 8000eb4:	3708      	adds	r7, #8
 8000eb6:	46bd      	mov	sp, r7
 8000eb8:	bd80      	pop	{r7, pc}
 8000eba:	bf00      	nop
 8000ebc:	200002b0 	.word	0x200002b0

08000ec0 <uartReceive>:

void uartReceive() {
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	af00      	add	r7, sp, #0
	HAL_UART_Receive(&SIM900_HUART, (uint8_t *)buffer, BUFFER_SIZE, TIMEOUT_MS);
 8000ec4:	f241 3388 	movw	r3, #5000	; 0x1388
 8000ec8:	2264      	movs	r2, #100	; 0x64
 8000eca:	4903      	ldr	r1, [pc, #12]	; (8000ed8 <uartReceive+0x18>)
 8000ecc:	4803      	ldr	r0, [pc, #12]	; (8000edc <uartReceive+0x1c>)
 8000ece:	f003 f860 	bl	8003f92 <HAL_UART_Receive>
}
 8000ed2:	bf00      	nop
 8000ed4:	bd80      	pop	{r7, pc}
 8000ed6:	bf00      	nop
 8000ed8:	20000218 	.word	0x20000218
 8000edc:	200002b0 	.word	0x200002b0

08000ee0 <uartSendAndReceive>:

void uartSendAndReceive(const char *cmd) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b082      	sub	sp, #8
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	resetBuffer();
 8000ee8:	f7ff ffc8 	bl	8000e7c <resetBuffer>

	uartSend(cmd);
 8000eec:	6878      	ldr	r0, [r7, #4]
 8000eee:	f7ff ffd1 	bl	8000e94 <uartSend>
	uartReceive();
 8000ef2:	f7ff ffe5 	bl	8000ec0 <uartReceive>
}
 8000ef6:	bf00      	nop
 8000ef8:	3708      	adds	r7, #8
 8000efa:	46bd      	mov	sp, r7
 8000efc:	bd80      	pop	{r7, pc}
	...

08000f00 <isSerialConnectionWorking>:

bool isSerialConnectionWorking() {
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
	uartSendAndReceive(CMD_TEST);
 8000f04:	4804      	ldr	r0, [pc, #16]	; (8000f18 <isSerialConnectionWorking+0x18>)
 8000f06:	f7ff ffeb 	bl	8000ee0 <uartSendAndReceive>

	return isStrStartsWith(buffer, RESP_TEST_OK);
 8000f0a:	4904      	ldr	r1, [pc, #16]	; (8000f1c <isSerialConnectionWorking+0x1c>)
 8000f0c:	4804      	ldr	r0, [pc, #16]	; (8000f20 <isSerialConnectionWorking+0x20>)
 8000f0e:	f7ff ff89 	bl	8000e24 <isStrStartsWith>
 8000f12:	4603      	mov	r3, r0
}
 8000f14:	4618      	mov	r0, r3
 8000f16:	bd80      	pop	{r7, pc}
 8000f18:	080070a8 	.word	0x080070a8
 8000f1c:	080070b0 	.word	0x080070b0
 8000f20:	20000218 	.word	0x20000218

08000f24 <isSimInserted>:

bool isSimInserted() {
 8000f24:	b580      	push	{r7, lr}
 8000f26:	af00      	add	r7, sp, #0
	uartSendAndReceive(CMD_CHECK_SIM_INSERTED);
 8000f28:	4804      	ldr	r0, [pc, #16]	; (8000f3c <isSimInserted+0x18>)
 8000f2a:	f7ff ffd9 	bl	8000ee0 <uartSendAndReceive>

	return isStrStartsWith(buffer, RESP_CHECK_SIM_INSERTED_OK);
 8000f2e:	4904      	ldr	r1, [pc, #16]	; (8000f40 <isSimInserted+0x1c>)
 8000f30:	4804      	ldr	r0, [pc, #16]	; (8000f44 <isSimInserted+0x20>)
 8000f32:	f7ff ff77 	bl	8000e24 <isStrStartsWith>
 8000f36:	4603      	mov	r3, r0
}
 8000f38:	4618      	mov	r0, r3
 8000f3a:	bd80      	pop	{r7, pc}
 8000f3c:	080070bc 	.word	0x080070bc
 8000f40:	080070cc 	.word	0x080070cc
 8000f44:	20000218 	.word	0x20000218

08000f48 <isSimLocked>:

bool isSimLocked() {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
	uartSendAndReceive(CMD_CHECK_NEED_PIN);
 8000f4c:	480a      	ldr	r0, [pc, #40]	; (8000f78 <isSimLocked+0x30>)
 8000f4e:	f7ff ffc7 	bl	8000ee0 <uartSendAndReceive>

	return !isStrStartsWith(buffer, RESP_CHECK_NEED_PIN_OK);
 8000f52:	490a      	ldr	r1, [pc, #40]	; (8000f7c <isSimLocked+0x34>)
 8000f54:	480a      	ldr	r0, [pc, #40]	; (8000f80 <isSimLocked+0x38>)
 8000f56:	f7ff ff65 	bl	8000e24 <isStrStartsWith>
 8000f5a:	4603      	mov	r3, r0
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	bf14      	ite	ne
 8000f60:	2301      	movne	r3, #1
 8000f62:	2300      	moveq	r3, #0
 8000f64:	b2db      	uxtb	r3, r3
 8000f66:	f083 0301 	eor.w	r3, r3, #1
 8000f6a:	b2db      	uxtb	r3, r3
 8000f6c:	f003 0301 	and.w	r3, r3, #1
 8000f70:	b2db      	uxtb	r3, r3
}
 8000f72:	4618      	mov	r0, r3
 8000f74:	bd80      	pop	{r7, pc}
 8000f76:	bf00      	nop
 8000f78:	080070f0 	.word	0x080070f0
 8000f7c:	080070fc 	.word	0x080070fc
 8000f80:	20000218 	.word	0x20000218

08000f84 <tryUnlockSim>:

void tryUnlockSim() {
 8000f84:	b480      	push	{r7}
 8000f86:	af00      	add	r7, sp, #0
//	uartSendAndReceive(CMD_UNLOCK_PIN(PIN_CODE)); //TODO uncomment
}
 8000f88:	bf00      	nop
 8000f8a:	46bd      	mov	sp, r7
 8000f8c:	bc80      	pop	{r7}
 8000f8e:	4770      	bx	lr

08000f90 <isAttachedToNetwork>:

bool isAttachedToNetwork() {
 8000f90:	b580      	push	{r7, lr}
 8000f92:	af00      	add	r7, sp, #0
	uartSendAndReceive(CMD_CHECK_ATTACHED);
 8000f94:	4804      	ldr	r0, [pc, #16]	; (8000fa8 <isAttachedToNetwork+0x18>)
 8000f96:	f7ff ffa3 	bl	8000ee0 <uartSendAndReceive>

	return isStrStartsWith(buffer, RESP_CHECK_ATTACHED_OK);
 8000f9a:	4904      	ldr	r1, [pc, #16]	; (8000fac <isAttachedToNetwork+0x1c>)
 8000f9c:	4804      	ldr	r0, [pc, #16]	; (8000fb0 <isAttachedToNetwork+0x20>)
 8000f9e:	f7ff ff41 	bl	8000e24 <isStrStartsWith>
 8000fa2:	4603      	mov	r3, r0
}
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	bd80      	pop	{r7, pc}
 8000fa8:	08007120 	.word	0x08007120
 8000fac:	0800712c 	.word	0x0800712c
 8000fb0:	20000218 	.word	0x20000218

08000fb4 <isRegisteredToNetwork>:

bool isRegisteredToNetwork() {
 8000fb4:	b580      	push	{r7, lr}
 8000fb6:	af00      	add	r7, sp, #0
	uartSendAndReceive(CMD_CHECK_REGISTERED);
 8000fb8:	4813      	ldr	r0, [pc, #76]	; (8001008 <isRegisteredToNetwork+0x54>)
 8000fba:	f7ff ff91 	bl	8000ee0 <uartSendAndReceive>

	return isStrStartsWith(buffer, RESP_CHECK_REGISTERED_OK_1)
 8000fbe:	4913      	ldr	r1, [pc, #76]	; (800100c <isRegisteredToNetwork+0x58>)
 8000fc0:	4813      	ldr	r0, [pc, #76]	; (8001010 <isRegisteredToNetwork+0x5c>)
 8000fc2:	f7ff ff2f 	bl	8000e24 <isStrStartsWith>
 8000fc6:	4603      	mov	r3, r0
		|| isStrStartsWith(buffer, RESP_CHECK_REGISTERED_OK_2)
		|| isStrStartsWith(buffer, RESP_CHECK_REGISTERED_OK_3)
		|| isStrStartsWith(buffer, RESP_CHECK_REGISTERED_OK_4);
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d114      	bne.n	8000ff6 <isRegisteredToNetwork+0x42>
		|| isStrStartsWith(buffer, RESP_CHECK_REGISTERED_OK_2)
 8000fcc:	4911      	ldr	r1, [pc, #68]	; (8001014 <isRegisteredToNetwork+0x60>)
 8000fce:	4810      	ldr	r0, [pc, #64]	; (8001010 <isRegisteredToNetwork+0x5c>)
 8000fd0:	f7ff ff28 	bl	8000e24 <isStrStartsWith>
 8000fd4:	4603      	mov	r3, r0
 8000fd6:	2b00      	cmp	r3, #0
 8000fd8:	d10d      	bne.n	8000ff6 <isRegisteredToNetwork+0x42>
		|| isStrStartsWith(buffer, RESP_CHECK_REGISTERED_OK_3)
 8000fda:	490f      	ldr	r1, [pc, #60]	; (8001018 <isRegisteredToNetwork+0x64>)
 8000fdc:	480c      	ldr	r0, [pc, #48]	; (8001010 <isRegisteredToNetwork+0x5c>)
 8000fde:	f7ff ff21 	bl	8000e24 <isStrStartsWith>
 8000fe2:	4603      	mov	r3, r0
 8000fe4:	2b00      	cmp	r3, #0
 8000fe6:	d106      	bne.n	8000ff6 <isRegisteredToNetwork+0x42>
		|| isStrStartsWith(buffer, RESP_CHECK_REGISTERED_OK_4);
 8000fe8:	490c      	ldr	r1, [pc, #48]	; (800101c <isRegisteredToNetwork+0x68>)
 8000fea:	4809      	ldr	r0, [pc, #36]	; (8001010 <isRegisteredToNetwork+0x5c>)
 8000fec:	f7ff ff1a 	bl	8000e24 <isStrStartsWith>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <isRegisteredToNetwork+0x46>
 8000ff6:	2301      	movs	r3, #1
 8000ff8:	e000      	b.n	8000ffc <isRegisteredToNetwork+0x48>
 8000ffa:	2300      	movs	r3, #0
 8000ffc:	f003 0301 	and.w	r3, r3, #1
 8001000:	b2db      	uxtb	r3, r3
}
 8001002:	4618      	mov	r0, r3
 8001004:	bd80      	pop	{r7, pc}
 8001006:	bf00      	nop
 8001008:	0800714c 	.word	0x0800714c
 800100c:	08007158 	.word	0x08007158
 8001010:	20000218 	.word	0x20000218
 8001014:	08007170 	.word	0x08007170
 8001018:	08007188 	.word	0x08007188
 800101c:	080071a0 	.word	0x080071a0

08001020 <setTextMode>:

bool setTextMode() {
 8001020:	b580      	push	{r7, lr}
 8001022:	af00      	add	r7, sp, #0
	uartSendAndReceive(CMD_SET_TEXT_MODE);
 8001024:	4804      	ldr	r0, [pc, #16]	; (8001038 <setTextMode+0x18>)
 8001026:	f7ff ff5b 	bl	8000ee0 <uartSendAndReceive>

	return isStrStartsWith(buffer, RESP_SET_TEXT_MODE_OK);
 800102a:	4904      	ldr	r1, [pc, #16]	; (800103c <setTextMode+0x1c>)
 800102c:	4804      	ldr	r0, [pc, #16]	; (8001040 <setTextMode+0x20>)
 800102e:	f7ff fef9 	bl	8000e24 <isStrStartsWith>
 8001032:	4603      	mov	r3, r0
}
 8001034:	4618      	mov	r0, r3
 8001036:	bd80      	pop	{r7, pc}
 8001038:	080071b8 	.word	0x080071b8
 800103c:	080071c4 	.word	0x080071c4
 8001040:	20000218 	.word	0x20000218

08001044 <sendSMS>:


bool sendSMS(char *phoneNumber, char *msg) {
 8001044:	b5b0      	push	{r4, r5, r7, lr}
 8001046:	b08c      	sub	sp, #48	; 0x30
 8001048:	af00      	add	r7, sp, #0
 800104a:	6078      	str	r0, [r7, #4]
 800104c:	6039      	str	r1, [r7, #0]
 800104e:	466b      	mov	r3, sp
 8001050:	461d      	mov	r5, r3
	uint32_t msg1_size = strlen(CMD_MSG1_P1) + strlen(phoneNumber) + strlen(CMD_MSG1_P3) + 1;
 8001052:	6878      	ldr	r0, [r7, #4]
 8001054:	f7ff f87c 	bl	8000150 <strlen>
 8001058:	4603      	mov	r3, r0
 800105a:	330d      	adds	r3, #13
 800105c:	62bb      	str	r3, [r7, #40]	; 0x28
	char msg1[msg1_size];
 800105e:	6abc      	ldr	r4, [r7, #40]	; 0x28
 8001060:	4623      	mov	r3, r4
 8001062:	3b01      	subs	r3, #1
 8001064:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001066:	4620      	mov	r0, r4
 8001068:	f04f 0100 	mov.w	r1, #0
 800106c:	f04f 0200 	mov.w	r2, #0
 8001070:	f04f 0300 	mov.w	r3, #0
 8001074:	00cb      	lsls	r3, r1, #3
 8001076:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800107a:	00c2      	lsls	r2, r0, #3
 800107c:	4620      	mov	r0, r4
 800107e:	f04f 0100 	mov.w	r1, #0
 8001082:	f04f 0200 	mov.w	r2, #0
 8001086:	f04f 0300 	mov.w	r3, #0
 800108a:	00cb      	lsls	r3, r1, #3
 800108c:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001090:	00c2      	lsls	r2, r0, #3
 8001092:	1de3      	adds	r3, r4, #7
 8001094:	08db      	lsrs	r3, r3, #3
 8001096:	00db      	lsls	r3, r3, #3
 8001098:	ebad 0d03 	sub.w	sp, sp, r3
 800109c:	466b      	mov	r3, sp
 800109e:	3300      	adds	r3, #0
 80010a0:	627b      	str	r3, [r7, #36]	; 0x24
	memset(msg1, 0, msg1_size*sizeof(char));
 80010a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010a4:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80010a6:	2100      	movs	r1, #0
 80010a8:	4618      	mov	r0, r3
 80010aa:	f003 f925 	bl	80042f8 <memset>
	strcat(msg1, CMD_MSG1_P1);
 80010ae:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80010b0:	4620      	mov	r0, r4
 80010b2:	f7ff f84d 	bl	8000150 <strlen>
 80010b6:	4603      	mov	r3, r0
 80010b8:	4423      	add	r3, r4
 80010ba:	4957      	ldr	r1, [pc, #348]	; (8001218 <sendSMS+0x1d4>)
 80010bc:	461a      	mov	r2, r3
 80010be:	460b      	mov	r3, r1
 80010c0:	cb03      	ldmia	r3!, {r0, r1}
 80010c2:	6010      	str	r0, [r2, #0]
 80010c4:	6051      	str	r1, [r2, #4]
 80010c6:	881b      	ldrh	r3, [r3, #0]
 80010c8:	8113      	strh	r3, [r2, #8]
	strcat(msg1, phoneNumber);
 80010ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010cc:	6879      	ldr	r1, [r7, #4]
 80010ce:	4618      	mov	r0, r3
 80010d0:	f003 fd9a 	bl	8004c08 <strcat>
	strcat(msg1, CMD_MSG1_P3);
 80010d4:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 80010d6:	4620      	mov	r0, r4
 80010d8:	f7ff f83a 	bl	8000150 <strlen>
 80010dc:	4603      	mov	r3, r0
 80010de:	4423      	add	r3, r4
 80010e0:	4a4e      	ldr	r2, [pc, #312]	; (800121c <sendSMS+0x1d8>)
 80010e2:	6810      	ldr	r0, [r2, #0]
 80010e4:	6018      	str	r0, [r3, #0]

	uartSendAndReceive(msg1);
 80010e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010e8:	4618      	mov	r0, r3
 80010ea:	f7ff fef9 	bl	8000ee0 <uartSendAndReceive>

	uint32_t msg1_resp_size = strlen(msg1) + strlen(RESP_MSG1_OK_P2) + 1;
 80010ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80010f0:	4618      	mov	r0, r3
 80010f2:	f7ff f82d 	bl	8000150 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	3304      	adds	r3, #4
 80010fa:	623b      	str	r3, [r7, #32]
	char msg1_resp[msg1_resp_size];
 80010fc:	6a3c      	ldr	r4, [r7, #32]
 80010fe:	4623      	mov	r3, r4
 8001100:	3b01      	subs	r3, #1
 8001102:	61fb      	str	r3, [r7, #28]
 8001104:	4620      	mov	r0, r4
 8001106:	f04f 0100 	mov.w	r1, #0
 800110a:	f04f 0200 	mov.w	r2, #0
 800110e:	f04f 0300 	mov.w	r3, #0
 8001112:	00cb      	lsls	r3, r1, #3
 8001114:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 8001118:	00c2      	lsls	r2, r0, #3
 800111a:	4620      	mov	r0, r4
 800111c:	f04f 0100 	mov.w	r1, #0
 8001120:	f04f 0200 	mov.w	r2, #0
 8001124:	f04f 0300 	mov.w	r3, #0
 8001128:	00cb      	lsls	r3, r1, #3
 800112a:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 800112e:	00c2      	lsls	r2, r0, #3
 8001130:	1de3      	adds	r3, r4, #7
 8001132:	08db      	lsrs	r3, r3, #3
 8001134:	00db      	lsls	r3, r3, #3
 8001136:	ebad 0d03 	sub.w	sp, sp, r3
 800113a:	466b      	mov	r3, sp
 800113c:	3300      	adds	r3, #0
 800113e:	61bb      	str	r3, [r7, #24]
	memset(msg1_resp, 0, msg1_resp_size*sizeof(char));
 8001140:	69bb      	ldr	r3, [r7, #24]
 8001142:	6a3a      	ldr	r2, [r7, #32]
 8001144:	2100      	movs	r1, #0
 8001146:	4618      	mov	r0, r3
 8001148:	f003 f8d6 	bl	80042f8 <memset>
	strcat(msg1_resp, msg1);
 800114c:	69bb      	ldr	r3, [r7, #24]
 800114e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001150:	4611      	mov	r1, r2
 8001152:	4618      	mov	r0, r3
 8001154:	f003 fd58 	bl	8004c08 <strcat>
	strcat(msg1_resp, RESP_MSG1_OK_P2);
 8001158:	69bc      	ldr	r4, [r7, #24]
 800115a:	4620      	mov	r0, r4
 800115c:	f7fe fff8 	bl	8000150 <strlen>
 8001160:	4603      	mov	r3, r0
 8001162:	4423      	add	r3, r4
 8001164:	4a2e      	ldr	r2, [pc, #184]	; (8001220 <sendSMS+0x1dc>)
 8001166:	6810      	ldr	r0, [r2, #0]
 8001168:	6018      	str	r0, [r3, #0]

	if(!isStrStartsWith(buffer, msg1_resp)) return false;
 800116a:	69bb      	ldr	r3, [r7, #24]
 800116c:	4619      	mov	r1, r3
 800116e:	482d      	ldr	r0, [pc, #180]	; (8001224 <sendSMS+0x1e0>)
 8001170:	f7ff fe58 	bl	8000e24 <isStrStartsWith>
 8001174:	4603      	mov	r3, r0
 8001176:	f083 0301 	eor.w	r3, r3, #1
 800117a:	b2db      	uxtb	r3, r3
 800117c:	2b00      	cmp	r3, #0
 800117e:	d001      	beq.n	8001184 <sendSMS+0x140>
 8001180:	2300      	movs	r3, #0
 8001182:	e044      	b.n	800120e <sendSMS+0x1ca>

	uint32_t msg2_size = strlen(msg) + strlen(CMD_MSG2_P2) + 1;
 8001184:	6838      	ldr	r0, [r7, #0]
 8001186:	f7fe ffe3 	bl	8000150 <strlen>
 800118a:	4603      	mov	r3, r0
 800118c:	3304      	adds	r3, #4
 800118e:	617b      	str	r3, [r7, #20]
	char msg2[msg2_size];
 8001190:	697c      	ldr	r4, [r7, #20]
 8001192:	4623      	mov	r3, r4
 8001194:	3b01      	subs	r3, #1
 8001196:	613b      	str	r3, [r7, #16]
 8001198:	4620      	mov	r0, r4
 800119a:	f04f 0100 	mov.w	r1, #0
 800119e:	f04f 0200 	mov.w	r2, #0
 80011a2:	f04f 0300 	mov.w	r3, #0
 80011a6:	00cb      	lsls	r3, r1, #3
 80011a8:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011ac:	00c2      	lsls	r2, r0, #3
 80011ae:	4620      	mov	r0, r4
 80011b0:	f04f 0100 	mov.w	r1, #0
 80011b4:	f04f 0200 	mov.w	r2, #0
 80011b8:	f04f 0300 	mov.w	r3, #0
 80011bc:	00cb      	lsls	r3, r1, #3
 80011be:	ea43 7350 	orr.w	r3, r3, r0, lsr #29
 80011c2:	00c2      	lsls	r2, r0, #3
 80011c4:	1de3      	adds	r3, r4, #7
 80011c6:	08db      	lsrs	r3, r3, #3
 80011c8:	00db      	lsls	r3, r3, #3
 80011ca:	ebad 0d03 	sub.w	sp, sp, r3
 80011ce:	466b      	mov	r3, sp
 80011d0:	3300      	adds	r3, #0
 80011d2:	60fb      	str	r3, [r7, #12]
	memset(msg2, 0, msg2_size*sizeof(char));
 80011d4:	68fb      	ldr	r3, [r7, #12]
 80011d6:	697a      	ldr	r2, [r7, #20]
 80011d8:	2100      	movs	r1, #0
 80011da:	4618      	mov	r0, r3
 80011dc:	f003 f88c 	bl	80042f8 <memset>
	strcat(msg2, msg);
 80011e0:	68fb      	ldr	r3, [r7, #12]
 80011e2:	6839      	ldr	r1, [r7, #0]
 80011e4:	4618      	mov	r0, r3
 80011e6:	f003 fd0f 	bl	8004c08 <strcat>
	strcat(msg2, CMD_MSG2_P2);
 80011ea:	68fc      	ldr	r4, [r7, #12]
 80011ec:	4620      	mov	r0, r4
 80011ee:	f7fe ffaf 	bl	8000150 <strlen>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4423      	add	r3, r4
 80011f6:	4a0c      	ldr	r2, [pc, #48]	; (8001228 <sendSMS+0x1e4>)
 80011f8:	6810      	ldr	r0, [r2, #0]
 80011fa:	6018      	str	r0, [r3, #0]

	uartSendAndReceive(msg2);
 80011fc:	68fb      	ldr	r3, [r7, #12]
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff fe6e 	bl	8000ee0 <uartSendAndReceive>

	return isStrContains(buffer, RESP_MSG2_OK_CONTAINS);
 8001204:	4909      	ldr	r1, [pc, #36]	; (800122c <sendSMS+0x1e8>)
 8001206:	4807      	ldr	r0, [pc, #28]	; (8001224 <sendSMS+0x1e0>)
 8001208:	f7ff fe24 	bl	8000e54 <isStrContains>
 800120c:	4603      	mov	r3, r0
 800120e:	46ad      	mov	sp, r5
}
 8001210:	4618      	mov	r0, r3
 8001212:	3730      	adds	r7, #48	; 0x30
 8001214:	46bd      	mov	sp, r7
 8001216:	bdb0      	pop	{r4, r5, r7, pc}
 8001218:	080071d8 	.word	0x080071d8
 800121c:	080071e4 	.word	0x080071e4
 8001220:	080071e8 	.word	0x080071e8
 8001224:	20000218 	.word	0x20000218
 8001228:	080071ec 	.word	0x080071ec
 800122c:	080071f0 	.word	0x080071f0

08001230 <SIM900_Init>:


// Public functions
uint8_t SIM900_Init(UART_HandleTypeDef HUART, uint32_t timeout) {
 8001230:	b084      	sub	sp, #16
 8001232:	b580      	push	{r7, lr}
 8001234:	b082      	sub	sp, #8
 8001236:	af00      	add	r7, sp, #0
 8001238:	f107 0c10 	add.w	ip, r7, #16
 800123c:	e88c 000f 	stmia.w	ip, {r0, r1, r2, r3}
	SIM900_HUART = HUART;
 8001240:	4b2f      	ldr	r3, [pc, #188]	; (8001300 <SIM900_Init+0xd0>)
 8001242:	4618      	mov	r0, r3
 8001244:	f107 0310 	add.w	r3, r7, #16
 8001248:	2244      	movs	r2, #68	; 0x44
 800124a:	4619      	mov	r1, r3
 800124c:	f003 f846 	bl	80042dc <memcpy>

	uint32_t timeoutTickTime = HAL_GetTick() + timeout;
 8001250:	f000 ff5c 	bl	800210c <HAL_GetTick>
 8001254:	4602      	mov	r2, r0
 8001256:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001258:	4413      	add	r3, r2
 800125a:	607b      	str	r3, [r7, #4]

	while(!isSerialConnectionWorking()) {
 800125c:	e007      	b.n	800126e <SIM900_Init+0x3e>
		if(HAL_GetTick() > timeoutTickTime) return 1;
 800125e:	f000 ff55 	bl	800210c <HAL_GetTick>
 8001262:	4602      	mov	r2, r0
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	4293      	cmp	r3, r2
 8001268:	d201      	bcs.n	800126e <SIM900_Init+0x3e>
 800126a:	2301      	movs	r3, #1
 800126c:	e041      	b.n	80012f2 <SIM900_Init+0xc2>
	while(!isSerialConnectionWorking()) {
 800126e:	f7ff fe47 	bl	8000f00 <isSerialConnectionWorking>
 8001272:	4603      	mov	r3, r0
 8001274:	f083 0301 	eor.w	r3, r3, #1
 8001278:	b2db      	uxtb	r3, r3
 800127a:	2b00      	cmp	r3, #0
 800127c:	d1ef      	bne.n	800125e <SIM900_Init+0x2e>
	}

	if(!isSimInserted()) return 2;
 800127e:	f7ff fe51 	bl	8000f24 <isSimInserted>
 8001282:	4603      	mov	r3, r0
 8001284:	f083 0301 	eor.w	r3, r3, #1
 8001288:	b2db      	uxtb	r3, r3
 800128a:	2b00      	cmp	r3, #0
 800128c:	d001      	beq.n	8001292 <SIM900_Init+0x62>
 800128e:	2302      	movs	r3, #2
 8001290:	e02f      	b.n	80012f2 <SIM900_Init+0xc2>

	if(isSimLocked()) tryUnlockSim();
 8001292:	f7ff fe59 	bl	8000f48 <isSimLocked>
 8001296:	4603      	mov	r3, r0
 8001298:	2b00      	cmp	r3, #0
 800129a:	d001      	beq.n	80012a0 <SIM900_Init+0x70>
 800129c:	f7ff fe72 	bl	8000f84 <tryUnlockSim>
	if(isSimLocked()) return 3;
 80012a0:	f7ff fe52 	bl	8000f48 <isSimLocked>
 80012a4:	4603      	mov	r3, r0
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d009      	beq.n	80012be <SIM900_Init+0x8e>
 80012aa:	2303      	movs	r3, #3
 80012ac:	e021      	b.n	80012f2 <SIM900_Init+0xc2>

	while(!isAttachedToNetwork()) {
		if(HAL_GetTick() > timeoutTickTime) return 4;
 80012ae:	f000 ff2d 	bl	800210c <HAL_GetTick>
 80012b2:	4602      	mov	r2, r0
 80012b4:	687b      	ldr	r3, [r7, #4]
 80012b6:	4293      	cmp	r3, r2
 80012b8:	d201      	bcs.n	80012be <SIM900_Init+0x8e>
 80012ba:	2304      	movs	r3, #4
 80012bc:	e019      	b.n	80012f2 <SIM900_Init+0xc2>
	while(!isAttachedToNetwork()) {
 80012be:	f7ff fe67 	bl	8000f90 <isAttachedToNetwork>
 80012c2:	4603      	mov	r3, r0
 80012c4:	f083 0301 	eor.w	r3, r3, #1
 80012c8:	b2db      	uxtb	r3, r3
 80012ca:	2b00      	cmp	r3, #0
 80012cc:	d1ef      	bne.n	80012ae <SIM900_Init+0x7e>
	}

	while(!isRegisteredToNetwork()) {
 80012ce:	e007      	b.n	80012e0 <SIM900_Init+0xb0>
		if(HAL_GetTick() > timeoutTickTime) return 5;
 80012d0:	f000 ff1c 	bl	800210c <HAL_GetTick>
 80012d4:	4602      	mov	r2, r0
 80012d6:	687b      	ldr	r3, [r7, #4]
 80012d8:	4293      	cmp	r3, r2
 80012da:	d201      	bcs.n	80012e0 <SIM900_Init+0xb0>
 80012dc:	2305      	movs	r3, #5
 80012de:	e008      	b.n	80012f2 <SIM900_Init+0xc2>
	while(!isRegisteredToNetwork()) {
 80012e0:	f7ff fe68 	bl	8000fb4 <isRegisteredToNetwork>
 80012e4:	4603      	mov	r3, r0
 80012e6:	f083 0301 	eor.w	r3, r3, #1
 80012ea:	b2db      	uxtb	r3, r3
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d1ef      	bne.n	80012d0 <SIM900_Init+0xa0>
	}

	return 0;
 80012f0:	2300      	movs	r3, #0
}
 80012f2:	4618      	mov	r0, r3
 80012f4:	3708      	adds	r7, #8
 80012f6:	46bd      	mov	sp, r7
 80012f8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80012fc:	b004      	add	sp, #16
 80012fe:	4770      	bx	lr
 8001300:	200002b0 	.word	0x200002b0

08001304 <SIM900_TrySendSMS>:

uint8_t SIM900_TrySendSMS(char *msg) {
 8001304:	b580      	push	{r7, lr}
 8001306:	b082      	sub	sp, #8
 8001308:	af00      	add	r7, sp, #0
 800130a:	6078      	str	r0, [r7, #4]
	if(!setTextMode()) return 1;
 800130c:	f7ff fe88 	bl	8001020 <setTextMode>
 8001310:	4603      	mov	r3, r0
 8001312:	f083 0301 	eor.w	r3, r3, #1
 8001316:	b2db      	uxtb	r3, r3
 8001318:	2b00      	cmp	r3, #0
 800131a:	d001      	beq.n	8001320 <SIM900_TrySendSMS+0x1c>
 800131c:	2301      	movs	r3, #1
 800131e:	e00c      	b.n	800133a <SIM900_TrySendSMS+0x36>
	if(!sendSMS(PHONE_NUMBER, msg)) return 2;
 8001320:	6879      	ldr	r1, [r7, #4]
 8001322:	4808      	ldr	r0, [pc, #32]	; (8001344 <SIM900_TrySendSMS+0x40>)
 8001324:	f7ff fe8e 	bl	8001044 <sendSMS>
 8001328:	4603      	mov	r3, r0
 800132a:	f083 0301 	eor.w	r3, r3, #1
 800132e:	b2db      	uxtb	r3, r3
 8001330:	2b00      	cmp	r3, #0
 8001332:	d001      	beq.n	8001338 <SIM900_TrySendSMS+0x34>
 8001334:	2302      	movs	r3, #2
 8001336:	e000      	b.n	800133a <SIM900_TrySendSMS+0x36>

	return 0;
 8001338:	2300      	movs	r3, #0
}
 800133a:	4618      	mov	r0, r3
 800133c:	3708      	adds	r7, #8
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
 8001342:	bf00      	nop
 8001344:	080071f4 	.word	0x080071f4

08001348 <TM1638_STB_SET>:

TM1638_LedStatus ledStatuses[8];
int numberToDisplay;

// Private function
void TM1638_STB_SET(GPIO_PinState state) {
 8001348:	b580      	push	{r7, lr}
 800134a:	b082      	sub	sp, #8
 800134c:	af00      	add	r7, sp, #0
 800134e:	4603      	mov	r3, r0
 8001350:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TM1638_STB_PORT, TM1638_STB_PIN, state);
 8001352:	4b06      	ldr	r3, [pc, #24]	; (800136c <TM1638_STB_SET+0x24>)
 8001354:	681b      	ldr	r3, [r3, #0]
 8001356:	4a06      	ldr	r2, [pc, #24]	; (8001370 <TM1638_STB_SET+0x28>)
 8001358:	8811      	ldrh	r1, [r2, #0]
 800135a:	79fa      	ldrb	r2, [r7, #7]
 800135c:	4618      	mov	r0, r3
 800135e:	f001 f9ac 	bl	80026ba <HAL_GPIO_WritePin>
}
 8001362:	bf00      	nop
 8001364:	3708      	adds	r7, #8
 8001366:	46bd      	mov	sp, r7
 8001368:	bd80      	pop	{r7, pc}
 800136a:	bf00      	nop
 800136c:	20000310 	.word	0x20000310
 8001370:	200002f4 	.word	0x200002f4

08001374 <TM1638_STB_HIGH>:

void TM1638_STB_HIGH() {
 8001374:	b580      	push	{r7, lr}
 8001376:	af00      	add	r7, sp, #0
	TM1638_STB_SET(GPIO_PIN_SET);
 8001378:	2001      	movs	r0, #1
 800137a:	f7ff ffe5 	bl	8001348 <TM1638_STB_SET>
}
 800137e:	bf00      	nop
 8001380:	bd80      	pop	{r7, pc}

08001382 <TM1638_STB_LOW>:

void TM1638_STB_LOW() {
 8001382:	b580      	push	{r7, lr}
 8001384:	af00      	add	r7, sp, #0
	TM1638_STB_SET(GPIO_PIN_RESET);
 8001386:	2000      	movs	r0, #0
 8001388:	f7ff ffde 	bl	8001348 <TM1638_STB_SET>
}
 800138c:	bf00      	nop
 800138e:	bd80      	pop	{r7, pc}

08001390 <TM1638_CLK_SET>:

void TM1638_CLK_SET(GPIO_PinState state) {
 8001390:	b580      	push	{r7, lr}
 8001392:	b082      	sub	sp, #8
 8001394:	af00      	add	r7, sp, #0
 8001396:	4603      	mov	r3, r0
 8001398:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TM1638_CLK_PORT, TM1638_CLK_PIN, state);
 800139a:	4b06      	ldr	r3, [pc, #24]	; (80013b4 <TM1638_CLK_SET+0x24>)
 800139c:	681b      	ldr	r3, [r3, #0]
 800139e:	4a06      	ldr	r2, [pc, #24]	; (80013b8 <TM1638_CLK_SET+0x28>)
 80013a0:	8811      	ldrh	r1, [r2, #0]
 80013a2:	79fa      	ldrb	r2, [r7, #7]
 80013a4:	4618      	mov	r0, r3
 80013a6:	f001 f988 	bl	80026ba <HAL_GPIO_WritePin>
}
 80013aa:	bf00      	nop
 80013ac:	3708      	adds	r7, #8
 80013ae:	46bd      	mov	sp, r7
 80013b0:	bd80      	pop	{r7, pc}
 80013b2:	bf00      	nop
 80013b4:	20000314 	.word	0x20000314
 80013b8:	200002f8 	.word	0x200002f8

080013bc <TM1638_CLK_HIGH>:

void TM1638_CLK_HIGH() {
 80013bc:	b580      	push	{r7, lr}
 80013be:	af00      	add	r7, sp, #0
	TM1638_CLK_SET(GPIO_PIN_SET);
 80013c0:	2001      	movs	r0, #1
 80013c2:	f7ff ffe5 	bl	8001390 <TM1638_CLK_SET>
}
 80013c6:	bf00      	nop
 80013c8:	bd80      	pop	{r7, pc}

080013ca <TM1638_CLK_LOW>:

void TM1638_CLK_LOW() {
 80013ca:	b580      	push	{r7, lr}
 80013cc:	af00      	add	r7, sp, #0
	TM1638_CLK_SET(GPIO_PIN_RESET);
 80013ce:	2000      	movs	r0, #0
 80013d0:	f7ff ffde 	bl	8001390 <TM1638_CLK_SET>
}
 80013d4:	bf00      	nop
 80013d6:	bd80      	pop	{r7, pc}

080013d8 <TM1638_DIO_SET>:

void TM1638_DIO_SET(GPIO_PinState state) {
 80013d8:	b580      	push	{r7, lr}
 80013da:	b082      	sub	sp, #8
 80013dc:	af00      	add	r7, sp, #0
 80013de:	4603      	mov	r3, r0
 80013e0:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TM1638_DIO_PORT, TM1638_DIO_PIN, state);
 80013e2:	4b06      	ldr	r3, [pc, #24]	; (80013fc <TM1638_DIO_SET+0x24>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a06      	ldr	r2, [pc, #24]	; (8001400 <TM1638_DIO_SET+0x28>)
 80013e8:	8811      	ldrh	r1, [r2, #0]
 80013ea:	79fa      	ldrb	r2, [r7, #7]
 80013ec:	4618      	mov	r0, r3
 80013ee:	f001 f964 	bl	80026ba <HAL_GPIO_WritePin>
}
 80013f2:	bf00      	nop
 80013f4:	3708      	adds	r7, #8
 80013f6:	46bd      	mov	sp, r7
 80013f8:	bd80      	pop	{r7, pc}
 80013fa:	bf00      	nop
 80013fc:	200002fc 	.word	0x200002fc
 8001400:	2000030c 	.word	0x2000030c

08001404 <TM1638_DIO_HIGH>:

void TM1638_DIO_HIGH() {
 8001404:	b580      	push	{r7, lr}
 8001406:	af00      	add	r7, sp, #0
	TM1638_DIO_SET(GPIO_PIN_SET);
 8001408:	2001      	movs	r0, #1
 800140a:	f7ff ffe5 	bl	80013d8 <TM1638_DIO_SET>
}
 800140e:	bf00      	nop
 8001410:	bd80      	pop	{r7, pc}

08001412 <TM1638_SEND_BYTE>:

void TM1638_DIO_LOW() {
	TM1638_DIO_SET(GPIO_PIN_RESET);
}

void TM1638_SEND_BYTE(uint8_t byte) {
 8001412:	b580      	push	{r7, lr}
 8001414:	b084      	sub	sp, #16
 8001416:	af00      	add	r7, sp, #0
 8001418:	4603      	mov	r3, r0
 800141a:	71fb      	strb	r3, [r7, #7]
	// LSB_FIRST
	for (uint8_t i = 0; i < 8; i++)  {
 800141c:	2300      	movs	r3, #0
 800141e:	73fb      	strb	r3, [r7, #15]
 8001420:	e014      	b.n	800144c <TM1638_SEND_BYTE+0x3a>
		// send bit at index i
		TM1638_DIO_SET(!!(byte & (1 << i)));
 8001422:	79fa      	ldrb	r2, [r7, #7]
 8001424:	7bfb      	ldrb	r3, [r7, #15]
 8001426:	fa42 f303 	asr.w	r3, r2, r3
 800142a:	f003 0301 	and.w	r3, r3, #1
 800142e:	2b00      	cmp	r3, #0
 8001430:	bf14      	ite	ne
 8001432:	2301      	movne	r3, #1
 8001434:	2300      	moveq	r3, #0
 8001436:	b2db      	uxtb	r3, r3
 8001438:	4618      	mov	r0, r3
 800143a:	f7ff ffcd 	bl	80013d8 <TM1638_DIO_SET>

		// send pulse
		TM1638_CLK_HIGH();
 800143e:	f7ff ffbd 	bl	80013bc <TM1638_CLK_HIGH>
		TM1638_CLK_LOW();
 8001442:	f7ff ffc2 	bl	80013ca <TM1638_CLK_LOW>
	for (uint8_t i = 0; i < 8; i++)  {
 8001446:	7bfb      	ldrb	r3, [r7, #15]
 8001448:	3301      	adds	r3, #1
 800144a:	73fb      	strb	r3, [r7, #15]
 800144c:	7bfb      	ldrb	r3, [r7, #15]
 800144e:	2b07      	cmp	r3, #7
 8001450:	d9e7      	bls.n	8001422 <TM1638_SEND_BYTE+0x10>
	}
}
 8001452:	bf00      	nop
 8001454:	bf00      	nop
 8001456:	3710      	adds	r7, #16
 8001458:	46bd      	mov	sp, r7
 800145a:	bd80      	pop	{r7, pc}

0800145c <TM1638_GetDisplayConfigCommand>:

uint8_t TM1638_GetDisplayConfigCommand() {
 800145c:	b480      	push	{r7}
 800145e:	b083      	sub	sp, #12
 8001460:	af00      	add	r7, sp, #0
	uint8_t byteToSend = TM1638_HEX_CMD_DISP;
 8001462:	2380      	movs	r3, #128	; 0x80
 8001464:	71fb      	strb	r3, [r7, #7]
	switch(displayState) {
 8001466:	4b26      	ldr	r3, [pc, #152]	; (8001500 <TM1638_GetDisplayConfigCommand+0xa4>)
 8001468:	781b      	ldrb	r3, [r3, #0]
 800146a:	2b00      	cmp	r3, #0
 800146c:	d006      	beq.n	800147c <TM1638_GetDisplayConfigCommand+0x20>
 800146e:	2b01      	cmp	r3, #1
 8001470:	d105      	bne.n	800147e <TM1638_GetDisplayConfigCommand+0x22>
		case DISPLAY_STATE_ON:
			byteToSend |= TM1638_HEX_CMD_DISP_ON;
 8001472:	79fb      	ldrb	r3, [r7, #7]
 8001474:	f043 0308 	orr.w	r3, r3, #8
 8001478:	71fb      	strb	r3, [r7, #7]
			break;
 800147a:	e000      	b.n	800147e <TM1638_GetDisplayConfigCommand+0x22>
		case DISPLAY_STATE_OFF:
			byteToSend |= TM1638_HEX_CMD_DISP_OFF;
			break;
 800147c:	bf00      	nop
	}

	switch(displayBrightness) {
 800147e:	4b21      	ldr	r3, [pc, #132]	; (8001504 <TM1638_GetDisplayConfigCommand+0xa8>)
 8001480:	781b      	ldrb	r3, [r3, #0]
 8001482:	2b07      	cmp	r3, #7
 8001484:	d835      	bhi.n	80014f2 <TM1638_GetDisplayConfigCommand+0x96>
 8001486:	a201      	add	r2, pc, #4	; (adr r2, 800148c <TM1638_GetDisplayConfigCommand+0x30>)
 8001488:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800148c:	080014f3 	.word	0x080014f3
 8001490:	080014ad 	.word	0x080014ad
 8001494:	080014b7 	.word	0x080014b7
 8001498:	080014c1 	.word	0x080014c1
 800149c:	080014cb 	.word	0x080014cb
 80014a0:	080014d5 	.word	0x080014d5
 80014a4:	080014df 	.word	0x080014df
 80014a8:	080014e9 	.word	0x080014e9
		case DISPLAY_BRIGHTNESS_LEVEL_0:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_0;
			break;
		case DISPLAY_BRIGHTNESS_LEVEL_1:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_1;
 80014ac:	79fb      	ldrb	r3, [r7, #7]
 80014ae:	f043 0301 	orr.w	r3, r3, #1
 80014b2:	71fb      	strb	r3, [r7, #7]
			break;
 80014b4:	e01d      	b.n	80014f2 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_2:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_2;
 80014b6:	79fb      	ldrb	r3, [r7, #7]
 80014b8:	f043 0302 	orr.w	r3, r3, #2
 80014bc:	71fb      	strb	r3, [r7, #7]
			break;
 80014be:	e018      	b.n	80014f2 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_3:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_3;
 80014c0:	79fb      	ldrb	r3, [r7, #7]
 80014c2:	f043 0303 	orr.w	r3, r3, #3
 80014c6:	71fb      	strb	r3, [r7, #7]
			break;
 80014c8:	e013      	b.n	80014f2 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_4:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_4;
 80014ca:	79fb      	ldrb	r3, [r7, #7]
 80014cc:	f043 0304 	orr.w	r3, r3, #4
 80014d0:	71fb      	strb	r3, [r7, #7]
			break;
 80014d2:	e00e      	b.n	80014f2 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_5:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_5;
 80014d4:	79fb      	ldrb	r3, [r7, #7]
 80014d6:	f043 0305 	orr.w	r3, r3, #5
 80014da:	71fb      	strb	r3, [r7, #7]
			break;
 80014dc:	e009      	b.n	80014f2 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_6:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_6;
 80014de:	79fb      	ldrb	r3, [r7, #7]
 80014e0:	f043 0306 	orr.w	r3, r3, #6
 80014e4:	71fb      	strb	r3, [r7, #7]
			break;
 80014e6:	e004      	b.n	80014f2 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_7:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_7;
 80014e8:	79fb      	ldrb	r3, [r7, #7]
 80014ea:	f043 0307 	orr.w	r3, r3, #7
 80014ee:	71fb      	strb	r3, [r7, #7]
			break;
 80014f0:	bf00      	nop
	}

	return byteToSend;
 80014f2:	79fb      	ldrb	r3, [r7, #7]
}
 80014f4:	4618      	mov	r0, r3
 80014f6:	370c      	adds	r7, #12
 80014f8:	46bd      	mov	sp, r7
 80014fa:	bc80      	pop	{r7}
 80014fc:	4770      	bx	lr
 80014fe:	bf00      	nop
 8001500:	200002fa 	.word	0x200002fa
 8001504:	2000031c 	.word	0x2000031c

08001508 <TM1638_GetDigitHexAt>:

uint8_t TM1638_GetDigitHexAt(uint8_t positionFromLeft) {
 8001508:	b480      	push	{r7}
 800150a:	b085      	sub	sp, #20
 800150c:	af00      	add	r7, sp, #0
 800150e:	4603      	mov	r3, r0
 8001510:	71fb      	strb	r3, [r7, #7]
	if(positionFromLeft == 0 && numberToDisplay < 0) return TM1638_HEX_SIGN_MINUS;
 8001512:	79fb      	ldrb	r3, [r7, #7]
 8001514:	2b00      	cmp	r3, #0
 8001516:	d105      	bne.n	8001524 <TM1638_GetDigitHexAt+0x1c>
 8001518:	4b32      	ldr	r3, [pc, #200]	; (80015e4 <TM1638_GetDigitHexAt+0xdc>)
 800151a:	681b      	ldr	r3, [r3, #0]
 800151c:	2b00      	cmp	r3, #0
 800151e:	da01      	bge.n	8001524 <TM1638_GetDigitHexAt+0x1c>
 8001520:	2340      	movs	r3, #64	; 0x40
 8001522:	e05a      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>

	int absNumberToDisplay = ABS(numberToDisplay);
 8001524:	4b2f      	ldr	r3, [pc, #188]	; (80015e4 <TM1638_GetDigitHexAt+0xdc>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	2b00      	cmp	r3, #0
 800152a:	bfb8      	it	lt
 800152c:	425b      	neglt	r3, r3
 800152e:	60fb      	str	r3, [r7, #12]
	for(int i = 7 - positionFromLeft; i > 0; --i) {
 8001530:	79fb      	ldrb	r3, [r7, #7]
 8001532:	f1c3 0307 	rsb	r3, r3, #7
 8001536:	60bb      	str	r3, [r7, #8]
 8001538:	e00a      	b.n	8001550 <TM1638_GetDigitHexAt+0x48>
		absNumberToDisplay /= 10;
 800153a:	68fb      	ldr	r3, [r7, #12]
 800153c:	4a2a      	ldr	r2, [pc, #168]	; (80015e8 <TM1638_GetDigitHexAt+0xe0>)
 800153e:	fb82 1203 	smull	r1, r2, r2, r3
 8001542:	1092      	asrs	r2, r2, #2
 8001544:	17db      	asrs	r3, r3, #31
 8001546:	1ad3      	subs	r3, r2, r3
 8001548:	60fb      	str	r3, [r7, #12]
	for(int i = 7 - positionFromLeft; i > 0; --i) {
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	3b01      	subs	r3, #1
 800154e:	60bb      	str	r3, [r7, #8]
 8001550:	68bb      	ldr	r3, [r7, #8]
 8001552:	2b00      	cmp	r3, #0
 8001554:	dcf1      	bgt.n	800153a <TM1638_GetDigitHexAt+0x32>
	}

	if(absNumberToDisplay > 0 || positionFromLeft == 7) {
 8001556:	68fb      	ldr	r3, [r7, #12]
 8001558:	2b00      	cmp	r3, #0
 800155a:	dc02      	bgt.n	8001562 <TM1638_GetDigitHexAt+0x5a>
 800155c:	79fb      	ldrb	r3, [r7, #7]
 800155e:	2b07      	cmp	r3, #7
 8001560:	d13a      	bne.n	80015d8 <TM1638_GetDigitHexAt+0xd0>
		switch(absNumberToDisplay %= 10) {
 8001562:	68fa      	ldr	r2, [r7, #12]
 8001564:	4b20      	ldr	r3, [pc, #128]	; (80015e8 <TM1638_GetDigitHexAt+0xe0>)
 8001566:	fb83 1302 	smull	r1, r3, r3, r2
 800156a:	1099      	asrs	r1, r3, #2
 800156c:	17d3      	asrs	r3, r2, #31
 800156e:	1ac9      	subs	r1, r1, r3
 8001570:	460b      	mov	r3, r1
 8001572:	009b      	lsls	r3, r3, #2
 8001574:	440b      	add	r3, r1
 8001576:	005b      	lsls	r3, r3, #1
 8001578:	1ad3      	subs	r3, r2, r3
 800157a:	60fb      	str	r3, [r7, #12]
 800157c:	68fb      	ldr	r3, [r7, #12]
 800157e:	2b09      	cmp	r3, #9
 8001580:	d82a      	bhi.n	80015d8 <TM1638_GetDigitHexAt+0xd0>
 8001582:	a201      	add	r2, pc, #4	; (adr r2, 8001588 <TM1638_GetDigitHexAt+0x80>)
 8001584:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001588:	080015b1 	.word	0x080015b1
 800158c:	080015b5 	.word	0x080015b5
 8001590:	080015b9 	.word	0x080015b9
 8001594:	080015bd 	.word	0x080015bd
 8001598:	080015c1 	.word	0x080015c1
 800159c:	080015c5 	.word	0x080015c5
 80015a0:	080015c9 	.word	0x080015c9
 80015a4:	080015cd 	.word	0x080015cd
 80015a8:	080015d1 	.word	0x080015d1
 80015ac:	080015d5 	.word	0x080015d5
			case 0: return TM1638_HEX_DIGIT_0;
 80015b0:	233f      	movs	r3, #63	; 0x3f
 80015b2:	e012      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 1: return TM1638_HEX_DIGIT_1;
 80015b4:	2306      	movs	r3, #6
 80015b6:	e010      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 2: return TM1638_HEX_DIGIT_2;
 80015b8:	235b      	movs	r3, #91	; 0x5b
 80015ba:	e00e      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 3: return TM1638_HEX_DIGIT_3;
 80015bc:	234f      	movs	r3, #79	; 0x4f
 80015be:	e00c      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 4: return TM1638_HEX_DIGIT_4;
 80015c0:	2366      	movs	r3, #102	; 0x66
 80015c2:	e00a      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 5: return TM1638_HEX_DIGIT_5;
 80015c4:	236d      	movs	r3, #109	; 0x6d
 80015c6:	e008      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 6: return TM1638_HEX_DIGIT_6;
 80015c8:	237d      	movs	r3, #125	; 0x7d
 80015ca:	e006      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 7: return TM1638_HEX_DIGIT_7;
 80015cc:	2307      	movs	r3, #7
 80015ce:	e004      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 8: return TM1638_HEX_DIGIT_8;
 80015d0:	237f      	movs	r3, #127	; 0x7f
 80015d2:	e002      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
			case 9: return TM1638_HEX_DIGIT_9;
 80015d4:	236f      	movs	r3, #111	; 0x6f
 80015d6:	e000      	b.n	80015da <TM1638_GetDigitHexAt+0xd2>
		}
	}

	return TM1638_HEX_SIGN_EMPTY;
 80015d8:	2300      	movs	r3, #0
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3714      	adds	r7, #20
 80015de:	46bd      	mov	sp, r7
 80015e0:	bc80      	pop	{r7}
 80015e2:	4770      	bx	lr
 80015e4:	20000318 	.word	0x20000318
 80015e8:	66666667 	.word	0x66666667

080015ec <TM1638_GetLedHexAt>:

uint8_t TM1638_GetLedHexAt(uint8_t positionFromLeft) {
 80015ec:	b480      	push	{r7}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
 80015f2:	4603      	mov	r3, r0
 80015f4:	71fb      	strb	r3, [r7, #7]
	if(positionFromLeft > 7 )
 80015f6:	79fb      	ldrb	r3, [r7, #7]
 80015f8:	2b07      	cmp	r3, #7
 80015fa:	d901      	bls.n	8001600 <TM1638_GetLedHexAt+0x14>
		return TM1638_HEX_LED_OFF;
 80015fc:	2300      	movs	r3, #0
 80015fe:	e007      	b.n	8001610 <TM1638_GetLedHexAt+0x24>
	else
		return ledStatuses[positionFromLeft] == LED_ON ? TM1638_HEX_LED_ON : TM1638_HEX_LED_OFF;
 8001600:	79fb      	ldrb	r3, [r7, #7]
 8001602:	4a06      	ldr	r2, [pc, #24]	; (800161c <TM1638_GetLedHexAt+0x30>)
 8001604:	5cd3      	ldrb	r3, [r2, r3]
 8001606:	2b01      	cmp	r3, #1
 8001608:	d101      	bne.n	800160e <TM1638_GetLedHexAt+0x22>
 800160a:	23ff      	movs	r3, #255	; 0xff
 800160c:	e000      	b.n	8001610 <TM1638_GetLedHexAt+0x24>
 800160e:	2300      	movs	r3, #0
}
 8001610:	4618      	mov	r0, r3
 8001612:	370c      	adds	r7, #12
 8001614:	46bd      	mov	sp, r7
 8001616:	bc80      	pop	{r7}
 8001618:	4770      	bx	lr
 800161a:	bf00      	nop
 800161c:	20000304 	.word	0x20000304

08001620 <TM1638_SendDisplayCommand>:

void TM1638_SendDisplayCommand() {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	TM1638_SEND_BYTE(TM1638_GetDisplayConfigCommand());
 8001626:	f7ff ff19 	bl	800145c <TM1638_GetDisplayConfigCommand>
 800162a:	4603      	mov	r3, r0
 800162c:	4618      	mov	r0, r3
 800162e:	f7ff fef0 	bl	8001412 <TM1638_SEND_BYTE>

	for (uint8_t i = 0; i < 8; ++i) {
 8001632:	2300      	movs	r3, #0
 8001634:	71fb      	strb	r3, [r7, #7]
 8001636:	e012      	b.n	800165e <TM1638_SendDisplayCommand+0x3e>
		TM1638_SEND_BYTE(TM1638_GetDigitHexAt(i));
 8001638:	79fb      	ldrb	r3, [r7, #7]
 800163a:	4618      	mov	r0, r3
 800163c:	f7ff ff64 	bl	8001508 <TM1638_GetDigitHexAt>
 8001640:	4603      	mov	r3, r0
 8001642:	4618      	mov	r0, r3
 8001644:	f7ff fee5 	bl	8001412 <TM1638_SEND_BYTE>
		TM1638_SEND_BYTE(TM1638_GetLedHexAt(i));
 8001648:	79fb      	ldrb	r3, [r7, #7]
 800164a:	4618      	mov	r0, r3
 800164c:	f7ff ffce 	bl	80015ec <TM1638_GetLedHexAt>
 8001650:	4603      	mov	r3, r0
 8001652:	4618      	mov	r0, r3
 8001654:	f7ff fedd 	bl	8001412 <TM1638_SEND_BYTE>
	for (uint8_t i = 0; i < 8; ++i) {
 8001658:	79fb      	ldrb	r3, [r7, #7]
 800165a:	3301      	adds	r3, #1
 800165c:	71fb      	strb	r3, [r7, #7]
 800165e:	79fb      	ldrb	r3, [r7, #7]
 8001660:	2b07      	cmp	r3, #7
 8001662:	d9e9      	bls.n	8001638 <TM1638_SendDisplayCommand+0x18>
	}
}
 8001664:	bf00      	nop
 8001666:	bf00      	nop
 8001668:	3708      	adds	r7, #8
 800166a:	46bd      	mov	sp, r7
 800166c:	bd80      	pop	{r7, pc}
	...

08001670 <TM1638_SendDataCommand>:

void TM1638_SendDataCommand() {
 8001670:	b580      	push	{r7, lr}
 8001672:	b082      	sub	sp, #8
 8001674:	af00      	add	r7, sp, #0
	uint8_t byteToSend = TM1638_HEX_CMD_DATA;
 8001676:	2340      	movs	r3, #64	; 0x40
 8001678:	71fb      	strb	r3, [r7, #7]
	switch(dataAccessMode) {
 800167a:	4b16      	ldr	r3, [pc, #88]	; (80016d4 <TM1638_SendDataCommand+0x64>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d006      	beq.n	8001690 <TM1638_SendDataCommand+0x20>
 8001682:	2b01      	cmp	r3, #1
 8001684:	d105      	bne.n	8001692 <TM1638_SendDataCommand+0x22>
		case DATA_ACCESS_WRITE:
			byteToSend |= TM1638_HEX_CMD_DATA_WRITE_MODE;
			break;
		case DATA_ACCESS_READ:
			byteToSend |= TM1638_HEX_CMD_DATA_READ_MODE;
 8001686:	79fb      	ldrb	r3, [r7, #7]
 8001688:	f043 0302 	orr.w	r3, r3, #2
 800168c:	71fb      	strb	r3, [r7, #7]
			break;
 800168e:	e000      	b.n	8001692 <TM1638_SendDataCommand+0x22>
			break;
 8001690:	bf00      	nop
	}

	switch(dataAddressMode) {
 8001692:	4b11      	ldr	r3, [pc, #68]	; (80016d8 <TM1638_SendDataCommand+0x68>)
 8001694:	781b      	ldrb	r3, [r3, #0]
 8001696:	2b00      	cmp	r3, #0
 8001698:	d006      	beq.n	80016a8 <TM1638_SendDataCommand+0x38>
 800169a:	2b01      	cmp	r3, #1
 800169c:	d105      	bne.n	80016aa <TM1638_SendDataCommand+0x3a>
		case DATA_ADDRESS_AUTO:
			byteToSend |= TM1638_HEX_CMD_DATA_AUTO_ADDR_MODE;
			break;
		case DATA_ADDRESS_FIX:
			byteToSend |= TM1638_HEX_CMD_DATA_FIX_ADDR_MODE;
 800169e:	79fb      	ldrb	r3, [r7, #7]
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	71fb      	strb	r3, [r7, #7]
			break;
 80016a6:	e000      	b.n	80016aa <TM1638_SendDataCommand+0x3a>
			break;
 80016a8:	bf00      	nop
	}

	switch(dataOperationMode) {
 80016aa:	4b0c      	ldr	r3, [pc, #48]	; (80016dc <TM1638_SendDataCommand+0x6c>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d006      	beq.n	80016c0 <TM1638_SendDataCommand+0x50>
 80016b2:	2b01      	cmp	r3, #1
 80016b4:	d105      	bne.n	80016c2 <TM1638_SendDataCommand+0x52>
		case DATA_OPERATION_NORMAL:
			byteToSend |= TM1638_HEX_CMD_DATA_NORMAL_MODE;
			break;
		case DATA_OPERATION_TEST:
			byteToSend |= TM1638_HEX_CMD_DATA_TEST_MODE;
 80016b6:	79fb      	ldrb	r3, [r7, #7]
 80016b8:	f043 0308 	orr.w	r3, r3, #8
 80016bc:	71fb      	strb	r3, [r7, #7]
			break;
 80016be:	e000      	b.n	80016c2 <TM1638_SendDataCommand+0x52>
			break;
 80016c0:	bf00      	nop
	}

	TM1638_SEND_BYTE(byteToSend);
 80016c2:	79fb      	ldrb	r3, [r7, #7]
 80016c4:	4618      	mov	r0, r3
 80016c6:	f7ff fea4 	bl	8001412 <TM1638_SEND_BYTE>
}
 80016ca:	bf00      	nop
 80016cc:	3708      	adds	r7, #8
 80016ce:	46bd      	mov	sp, r7
 80016d0:	bd80      	pop	{r7, pc}
 80016d2:	bf00      	nop
 80016d4:	20000300 	.word	0x20000300
 80016d8:	200002f6 	.word	0x200002f6
 80016dc:	2000031d 	.word	0x2000031d

080016e0 <TM1638_UpdateDisplay>:

void TM1638_UpdateDisplay() {
 80016e0:	b580      	push	{r7, lr}
 80016e2:	b082      	sub	sp, #8
 80016e4:	af00      	add	r7, sp, #0

	TM1638_DataAccessMode _dataAccessMode = dataAccessMode;
 80016e6:	4b15      	ldr	r3, [pc, #84]	; (800173c <TM1638_UpdateDisplay+0x5c>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	71fb      	strb	r3, [r7, #7]
	TM1638_DataAddressMode _dataAddressMode = dataAddressMode;
 80016ec:	4b14      	ldr	r3, [pc, #80]	; (8001740 <TM1638_UpdateDisplay+0x60>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	71bb      	strb	r3, [r7, #6]
	TM1638_DataOperationMode _dataOperationMode = dataOperationMode;
 80016f2:	4b14      	ldr	r3, [pc, #80]	; (8001744 <TM1638_UpdateDisplay+0x64>)
 80016f4:	781b      	ldrb	r3, [r3, #0]
 80016f6:	717b      	strb	r3, [r7, #5]

	dataAccessMode = DATA_ACCESS_WRITE;
 80016f8:	4b10      	ldr	r3, [pc, #64]	; (800173c <TM1638_UpdateDisplay+0x5c>)
 80016fa:	2200      	movs	r2, #0
 80016fc:	701a      	strb	r2, [r3, #0]
	dataAddressMode = DATA_ADDRESS_AUTO;
 80016fe:	4b10      	ldr	r3, [pc, #64]	; (8001740 <TM1638_UpdateDisplay+0x60>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
	dataOperationMode = DATA_OPERATION_NORMAL;
 8001704:	4b0f      	ldr	r3, [pc, #60]	; (8001744 <TM1638_UpdateDisplay+0x64>)
 8001706:	2200      	movs	r2, #0
 8001708:	701a      	strb	r2, [r3, #0]

	TM1638_STB_LOW();
 800170a:	f7ff fe3a 	bl	8001382 <TM1638_STB_LOW>
	TM1638_SendDataCommand();
 800170e:	f7ff ffaf 	bl	8001670 <TM1638_SendDataCommand>
	TM1638_STB_HIGH();
 8001712:	f7ff fe2f 	bl	8001374 <TM1638_STB_HIGH>

	TM1638_STB_LOW();
 8001716:	f7ff fe34 	bl	8001382 <TM1638_STB_LOW>
	TM1638_SendDisplayCommand();
 800171a:	f7ff ff81 	bl	8001620 <TM1638_SendDisplayCommand>
	TM1638_STB_HIGH();
 800171e:	f7ff fe29 	bl	8001374 <TM1638_STB_HIGH>

	dataAccessMode = _dataAccessMode;
 8001722:	4a06      	ldr	r2, [pc, #24]	; (800173c <TM1638_UpdateDisplay+0x5c>)
 8001724:	79fb      	ldrb	r3, [r7, #7]
 8001726:	7013      	strb	r3, [r2, #0]
	dataAddressMode = _dataAddressMode;
 8001728:	4a05      	ldr	r2, [pc, #20]	; (8001740 <TM1638_UpdateDisplay+0x60>)
 800172a:	79bb      	ldrb	r3, [r7, #6]
 800172c:	7013      	strb	r3, [r2, #0]
	dataOperationMode = _dataOperationMode;
 800172e:	4a05      	ldr	r2, [pc, #20]	; (8001744 <TM1638_UpdateDisplay+0x64>)
 8001730:	797b      	ldrb	r3, [r7, #5]
 8001732:	7013      	strb	r3, [r2, #0]
}
 8001734:	bf00      	nop
 8001736:	3708      	adds	r7, #8
 8001738:	46bd      	mov	sp, r7
 800173a:	bd80      	pop	{r7, pc}
 800173c:	20000300 	.word	0x20000300
 8001740:	200002f6 	.word	0x200002f6
 8001744:	2000031d 	.word	0x2000031d

08001748 <TM1638_Init>:
	uint16_t STB_PIN,
	GPIO_TypeDef* CLK_PORT,
	uint16_t CLK_PIN,
	GPIO_TypeDef* DIO_PORT,
	uint16_t DIO_PIN
) {
 8001748:	b580      	push	{r7, lr}
 800174a:	b086      	sub	sp, #24
 800174c:	af00      	add	r7, sp, #0
 800174e:	60f8      	str	r0, [r7, #12]
 8001750:	607a      	str	r2, [r7, #4]
 8001752:	461a      	mov	r2, r3
 8001754:	460b      	mov	r3, r1
 8001756:	817b      	strh	r3, [r7, #10]
 8001758:	4613      	mov	r3, r2
 800175a:	813b      	strh	r3, [r7, #8]
	TM1638_STB_PORT = STB_PORT;
 800175c:	4a1f      	ldr	r2, [pc, #124]	; (80017dc <TM1638_Init+0x94>)
 800175e:	68fb      	ldr	r3, [r7, #12]
 8001760:	6013      	str	r3, [r2, #0]
	TM1638_STB_PIN = STB_PIN;
 8001762:	4a1f      	ldr	r2, [pc, #124]	; (80017e0 <TM1638_Init+0x98>)
 8001764:	897b      	ldrh	r3, [r7, #10]
 8001766:	8013      	strh	r3, [r2, #0]
	TM1638_CLK_PORT = CLK_PORT;
 8001768:	4a1e      	ldr	r2, [pc, #120]	; (80017e4 <TM1638_Init+0x9c>)
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6013      	str	r3, [r2, #0]
	TM1638_CLK_PIN = CLK_PIN;
 800176e:	4a1e      	ldr	r2, [pc, #120]	; (80017e8 <TM1638_Init+0xa0>)
 8001770:	893b      	ldrh	r3, [r7, #8]
 8001772:	8013      	strh	r3, [r2, #0]
	TM1638_DIO_PORT = DIO_PORT;
 8001774:	4a1d      	ldr	r2, [pc, #116]	; (80017ec <TM1638_Init+0xa4>)
 8001776:	6a3b      	ldr	r3, [r7, #32]
 8001778:	6013      	str	r3, [r2, #0]
	TM1638_DIO_PIN = DIO_PIN;
 800177a:	4a1d      	ldr	r2, [pc, #116]	; (80017f0 <TM1638_Init+0xa8>)
 800177c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800177e:	8013      	strh	r3, [r2, #0]

	displayBrightness = DISPLAY_BRIGHTNESS_LEVEL_0;
 8001780:	4b1c      	ldr	r3, [pc, #112]	; (80017f4 <TM1638_Init+0xac>)
 8001782:	2200      	movs	r2, #0
 8001784:	701a      	strb	r2, [r3, #0]
	displayState = DISPLAY_STATE_OFF;
 8001786:	4b1c      	ldr	r3, [pc, #112]	; (80017f8 <TM1638_Init+0xb0>)
 8001788:	2200      	movs	r2, #0
 800178a:	701a      	strb	r2, [r3, #0]
	dataAccessMode = DATA_ACCESS_WRITE;
 800178c:	4b1b      	ldr	r3, [pc, #108]	; (80017fc <TM1638_Init+0xb4>)
 800178e:	2200      	movs	r2, #0
 8001790:	701a      	strb	r2, [r3, #0]
	dataAddressMode = DATA_ADDRESS_AUTO;
 8001792:	4b1b      	ldr	r3, [pc, #108]	; (8001800 <TM1638_Init+0xb8>)
 8001794:	2200      	movs	r2, #0
 8001796:	701a      	strb	r2, [r3, #0]
	dataOperationMode = DATA_OPERATION_NORMAL;
 8001798:	4b1a      	ldr	r3, [pc, #104]	; (8001804 <TM1638_Init+0xbc>)
 800179a:	2200      	movs	r2, #0
 800179c:	701a      	strb	r2, [r3, #0]

	numberToDisplay = 0;
 800179e:	4b1a      	ldr	r3, [pc, #104]	; (8001808 <TM1638_Init+0xc0>)
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; ++i) {
 80017a4:	2300      	movs	r3, #0
 80017a6:	75fb      	strb	r3, [r7, #23]
 80017a8:	e006      	b.n	80017b8 <TM1638_Init+0x70>
		ledStatuses[i] = LED_OFF;
 80017aa:	7dfb      	ldrb	r3, [r7, #23]
 80017ac:	4a17      	ldr	r2, [pc, #92]	; (800180c <TM1638_Init+0xc4>)
 80017ae:	2100      	movs	r1, #0
 80017b0:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; ++i) {
 80017b2:	7dfb      	ldrb	r3, [r7, #23]
 80017b4:	3301      	adds	r3, #1
 80017b6:	75fb      	strb	r3, [r7, #23]
 80017b8:	7dfb      	ldrb	r3, [r7, #23]
 80017ba:	2b07      	cmp	r3, #7
 80017bc:	d9f5      	bls.n	80017aa <TM1638_Init+0x62>
// TODO
//	TM1638_CLK_OUTPUT();
//	TM1638_STB_OUTPUT();
//	TM1638_DIO_OUTPUT();

	TM1638_CLK_HIGH();
 80017be:	f7ff fdfd 	bl	80013bc <TM1638_CLK_HIGH>
	TM1638_STB_HIGH();
 80017c2:	f7ff fdd7 	bl	8001374 <TM1638_STB_HIGH>
	TM1638_DIO_HIGH();
 80017c6:	f7ff fe1d 	bl	8001404 <TM1638_DIO_HIGH>

	TM1638_SendDataCommand();
 80017ca:	f7ff ff51 	bl	8001670 <TM1638_SendDataCommand>
	TM1638_UpdateDisplay();
 80017ce:	f7ff ff87 	bl	80016e0 <TM1638_UpdateDisplay>
}
 80017d2:	bf00      	nop
 80017d4:	3718      	adds	r7, #24
 80017d6:	46bd      	mov	sp, r7
 80017d8:	bd80      	pop	{r7, pc}
 80017da:	bf00      	nop
 80017dc:	20000310 	.word	0x20000310
 80017e0:	200002f4 	.word	0x200002f4
 80017e4:	20000314 	.word	0x20000314
 80017e8:	200002f8 	.word	0x200002f8
 80017ec:	200002fc 	.word	0x200002fc
 80017f0:	2000030c 	.word	0x2000030c
 80017f4:	2000031c 	.word	0x2000031c
 80017f8:	200002fa 	.word	0x200002fa
 80017fc:	20000300 	.word	0x20000300
 8001800:	200002f6 	.word	0x200002f6
 8001804:	2000031d 	.word	0x2000031d
 8001808:	20000318 	.word	0x20000318
 800180c:	20000304 	.word	0x20000304

08001810 <TM1638_SetDisplayBrightness>:

void TM1638_SetDisplayBrightness(TM1638_DisplayBrightness brightness) {
 8001810:	b580      	push	{r7, lr}
 8001812:	b082      	sub	sp, #8
 8001814:	af00      	add	r7, sp, #0
 8001816:	4603      	mov	r3, r0
 8001818:	71fb      	strb	r3, [r7, #7]
	displayBrightness = brightness;
 800181a:	4a04      	ldr	r2, [pc, #16]	; (800182c <TM1638_SetDisplayBrightness+0x1c>)
 800181c:	79fb      	ldrb	r3, [r7, #7]
 800181e:	7013      	strb	r3, [r2, #0]
	TM1638_UpdateDisplay();
 8001820:	f7ff ff5e 	bl	80016e0 <TM1638_UpdateDisplay>
}
 8001824:	bf00      	nop
 8001826:	3708      	adds	r7, #8
 8001828:	46bd      	mov	sp, r7
 800182a:	bd80      	pop	{r7, pc}
 800182c:	2000031c 	.word	0x2000031c

08001830 <TM1638_SetDisplayState>:

void TM1638_SetDisplayState(TM1638_DisplayState state) {
 8001830:	b580      	push	{r7, lr}
 8001832:	b082      	sub	sp, #8
 8001834:	af00      	add	r7, sp, #0
 8001836:	4603      	mov	r3, r0
 8001838:	71fb      	strb	r3, [r7, #7]
	displayState = state;
 800183a:	4a04      	ldr	r2, [pc, #16]	; (800184c <TM1638_SetDisplayState+0x1c>)
 800183c:	79fb      	ldrb	r3, [r7, #7]
 800183e:	7013      	strb	r3, [r2, #0]
	TM1638_UpdateDisplay();
 8001840:	f7ff ff4e 	bl	80016e0 <TM1638_UpdateDisplay>
}
 8001844:	bf00      	nop
 8001846:	3708      	adds	r7, #8
 8001848:	46bd      	mov	sp, r7
 800184a:	bd80      	pop	{r7, pc}
 800184c:	200002fa 	.word	0x200002fa

08001850 <TM1638_SetNumberToDisplay>:

void TM1638_SetNumberToDisplay(int number) {
 8001850:	b580      	push	{r7, lr}
 8001852:	b082      	sub	sp, #8
 8001854:	af00      	add	r7, sp, #0
 8001856:	6078      	str	r0, [r7, #4]
	numberToDisplay = number;
 8001858:	4a04      	ldr	r2, [pc, #16]	; (800186c <TM1638_SetNumberToDisplay+0x1c>)
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	6013      	str	r3, [r2, #0]
	TM1638_UpdateDisplay();
 800185e:	f7ff ff3f 	bl	80016e0 <TM1638_UpdateDisplay>
}
 8001862:	bf00      	nop
 8001864:	3708      	adds	r7, #8
 8001866:	46bd      	mov	sp, r7
 8001868:	bd80      	pop	{r7, pc}
 800186a:	bf00      	nop
 800186c:	20000318 	.word	0x20000318

08001870 <TM1638_SetLedStatus>:

void TM1638_SetLedStatus(uint8_t position, TM1638_LedStatus status) {
 8001870:	b580      	push	{r7, lr}
 8001872:	b082      	sub	sp, #8
 8001874:	af00      	add	r7, sp, #0
 8001876:	4603      	mov	r3, r0
 8001878:	460a      	mov	r2, r1
 800187a:	71fb      	strb	r3, [r7, #7]
 800187c:	4613      	mov	r3, r2
 800187e:	71bb      	strb	r3, [r7, #6]
	if(position < 8) {
 8001880:	79fb      	ldrb	r3, [r7, #7]
 8001882:	2b07      	cmp	r3, #7
 8001884:	d805      	bhi.n	8001892 <TM1638_SetLedStatus+0x22>
		ledStatuses[position] = status;
 8001886:	79fb      	ldrb	r3, [r7, #7]
 8001888:	4904      	ldr	r1, [pc, #16]	; (800189c <TM1638_SetLedStatus+0x2c>)
 800188a:	79ba      	ldrb	r2, [r7, #6]
 800188c:	54ca      	strb	r2, [r1, r3]
		TM1638_UpdateDisplay();
 800188e:	f7ff ff27 	bl	80016e0 <TM1638_UpdateDisplay>
	}
}
 8001892:	bf00      	nop
 8001894:	3708      	adds	r7, #8
 8001896:	46bd      	mov	sp, r7
 8001898:	bd80      	pop	{r7, pc}
 800189a:	bf00      	nop
 800189c:	20000304 	.word	0x20000304

080018a0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80018a0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80018a2:	b0a1      	sub	sp, #132	; 0x84
 80018a4:	af0e      	add	r7, sp, #56	; 0x38
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80018a6:	f000 fbd9 	bl	800205c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80018aa:	f000 f8a7 	bl	80019fc <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80018ae:	f000 f973 	bl	8001b98 <MX_GPIO_Init>
  MX_USART3_UART_Init();
 80018b2:	f000 f947 	bl	8001b44 <MX_USART3_UART_Init>
  MX_RTC_Init();
 80018b6:	f000 f8fb 	bl	8001ab0 <MX_RTC_Init>
  /* USER CODE BEGIN 2 */
  TM1638_Init(
 80018ba:	2308      	movs	r3, #8
 80018bc:	9301      	str	r3, [sp, #4]
 80018be:	4b4a      	ldr	r3, [pc, #296]	; (80019e8 <main+0x148>)
 80018c0:	9300      	str	r3, [sp, #0]
 80018c2:	2301      	movs	r3, #1
 80018c4:	4a48      	ldr	r2, [pc, #288]	; (80019e8 <main+0x148>)
 80018c6:	2102      	movs	r1, #2
 80018c8:	4847      	ldr	r0, [pc, #284]	; (80019e8 <main+0x148>)
 80018ca:	f7ff ff3d 	bl	8001748 <TM1638_Init>
	  DISP_CLK_Pin,
	  DISP_DIO_GPIO_Port,
	  DISP_DIO_Pin
  );

  TM1638_SetLedStatus(0, LED_OFF);
 80018ce:	2100      	movs	r1, #0
 80018d0:	2000      	movs	r0, #0
 80018d2:	f7ff ffcd 	bl	8001870 <TM1638_SetLedStatus>
  TM1638_SetLedStatus(1, LED_OFF);
 80018d6:	2100      	movs	r1, #0
 80018d8:	2001      	movs	r0, #1
 80018da:	f7ff ffc9 	bl	8001870 <TM1638_SetLedStatus>
  TM1638_SetLedStatus(7, LED_OFF);
 80018de:	2100      	movs	r1, #0
 80018e0:	2007      	movs	r0, #7
 80018e2:	f7ff ffc5 	bl	8001870 <TM1638_SetLedStatus>

  TM1638_SetDisplayBrightness(DISPLAY_BRIGHTNESS_LEVEL_1);
 80018e6:	2001      	movs	r0, #1
 80018e8:	f7ff ff92 	bl	8001810 <TM1638_SetDisplayBrightness>
  TM1638_SetDisplayState(DISPLAY_STATE_ON);
 80018ec:	2001      	movs	r0, #1
 80018ee:	f7ff ff9f 	bl	8001830 <TM1638_SetDisplayState>

  HX711_Init(
 80018f2:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80018f6:	4a3c      	ldr	r2, [pc, #240]	; (80019e8 <main+0x148>)
 80018f8:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80018fc:	483a      	ldr	r0, [pc, #232]	; (80019e8 <main+0x148>)
 80018fe:	f7ff f967 	bl	8000bd0 <HX711_Init>
      HX711_SCK_Pin,
	  HX711_DT_GPIO_Port,
	  HX711_DT_Pin
  );

  HX711_SetGainLevel(GAIN_128);
 8001902:	2000      	movs	r0, #0
 8001904:	f7ff f9a8 	bl	8000c58 <HX711_SetGainLevel>
  HX711_Calibrate(8015261, 1515.0 / 33774.0);
 8001908:	a333      	add	r3, pc, #204	; (adr r3, 80019d8 <main+0x138>)
 800190a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800190e:	a134      	add	r1, pc, #208	; (adr r1, 80019e0 <main+0x140>)
 8001910:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001914:	f7ff f9b6 	bl	8000c84 <HX711_Calibrate>
  HX711_PowerUp();
 8001918:	f7ff f987 	bl	8000c2a <HX711_PowerUp>
//  calibrateHX711(); //TODO comment it

  TM1638_SetLedStatus(7, LED_ON);
 800191c:	2101      	movs	r1, #1
 800191e:	2007      	movs	r0, #7
 8001920:	f7ff ffa6 	bl	8001870 <TM1638_SetLedStatus>
  if(SIM900_Init(huart3, 60000) > 0) {
 8001924:	4e31      	ldr	r6, [pc, #196]	; (80019ec <main+0x14c>)
 8001926:	f64e 2360 	movw	r3, #60000	; 0xea60
 800192a:	930d      	str	r3, [sp, #52]	; 0x34
 800192c:	466d      	mov	r5, sp
 800192e:	f106 0410 	add.w	r4, r6, #16
 8001932:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001934:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001936:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001938:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800193c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800193e:	6823      	ldr	r3, [r4, #0]
 8001940:	602b      	str	r3, [r5, #0]
 8001942:	e896 000f 	ldmia.w	r6, {r0, r1, r2, r3}
 8001946:	f7ff fc73 	bl	8001230 <SIM900_Init>
 800194a:	4603      	mov	r3, r0
 800194c:	2b00      	cmp	r3, #0
 800194e:	d001      	beq.n	8001954 <main+0xb4>
    return 1;
 8001950:	2301      	movs	r3, #1
 8001952:	e03b      	b.n	80019cc <main+0x12c>
  }
  TM1638_SetLedStatus(7, LED_OFF);
 8001954:	2100      	movs	r1, #0
 8001956:	2007      	movs	r0, #7
 8001958:	f7ff ff8a 	bl	8001870 <TM1638_SetLedStatus>

  RTC_POLLING_InitEveryDay(hrtc);
 800195c:	4b24      	ldr	r3, [pc, #144]	; (80019f0 <main+0x150>)
 800195e:	691a      	ldr	r2, [r3, #16]
 8001960:	9200      	str	r2, [sp, #0]
 8001962:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001964:	f7ff fa0e 	bl	8000d84 <RTC_POLLING_InitEveryDay>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  double value = HX711_ReadAverageValue(1);
 8001968:	2001      	movs	r0, #1
 800196a:	f7ff f9c5 	bl	8000cf8 <HX711_ReadAverageValue>
 800196e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
	  TM1638_SetNumberToDisplay(value);
 8001972:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8001976:	f7ff f85f 	bl	8000a38 <__aeabi_d2iz>
 800197a:	4603      	mov	r3, r0
 800197c:	4618      	mov	r0, r3
 800197e:	f7ff ff67 	bl	8001850 <TM1638_SetNumberToDisplay>

	  if(RTC_POLLING_CheckEveryDay()) {
 8001982:	f7ff fa21 	bl	8000dc8 <RTC_POLLING_CheckEveryDay>
 8001986:	4603      	mov	r3, r0
 8001988:	2b00      	cmp	r3, #0
 800198a:	d0ed      	beq.n	8001968 <main+0xc8>
		  double kgValue = HX711_ReadAverageValue(10) / 1000;
 800198c:	200a      	movs	r0, #10
 800198e:	f7ff f9b3 	bl	8000cf8 <HX711_ReadAverageValue>
 8001992:	f04f 0200 	mov.w	r2, #0
 8001996:	4b17      	ldr	r3, [pc, #92]	; (80019f4 <main+0x154>)
 8001998:	f7fe fec8 	bl	800072c <__aeabi_ddiv>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	e9c7 230e 	strd	r2, r3, [r7, #56]	; 0x38

		  char str[50] = "";
 80019a4:	2300      	movs	r3, #0
 80019a6:	607b      	str	r3, [r7, #4]
 80019a8:	f107 0308 	add.w	r3, r7, #8
 80019ac:	222e      	movs	r2, #46	; 0x2e
 80019ae:	2100      	movs	r1, #0
 80019b0:	4618      	mov	r0, r3
 80019b2:	f002 fca1 	bl	80042f8 <memset>
		  sprintf(str, "Today weight in kg: %.2f", kgValue);
 80019b6:	1d38      	adds	r0, r7, #4
 80019b8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80019bc:	490e      	ldr	r1, [pc, #56]	; (80019f8 <main+0x158>)
 80019be:	f003 f903 	bl	8004bc8 <siprintf>

		   SIM900_TrySendSMS(str);
 80019c2:	1d3b      	adds	r3, r7, #4
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7ff fc9d 	bl	8001304 <SIM900_TrySendSMS>
  while (1) {
 80019ca:	e7cd      	b.n	8001968 <main+0xc8>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
  }
  /* USER CODE END 3 */
}
 80019cc:	4618      	mov	r0, r3
 80019ce:	374c      	adds	r7, #76	; 0x4c
 80019d0:	46bd      	mov	sp, r7
 80019d2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80019d4:	f3af 8000 	nop.w
 80019d8:	d71d5574 	.word	0xd71d5574
 80019dc:	3fa6f77e 	.word	0x3fa6f77e
 80019e0:	40000000 	.word	0x40000000
 80019e4:	415e9367 	.word	0x415e9367
 80019e8:	40011000 	.word	0x40011000
 80019ec:	20000320 	.word	0x20000320
 80019f0:	20000364 	.word	0x20000364
 80019f4:	408f4000 	.word	0x408f4000
 80019f8:	08007204 	.word	0x08007204

080019fc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80019fc:	b580      	push	{r7, lr}
 80019fe:	b094      	sub	sp, #80	; 0x50
 8001a00:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001a02:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a06:	2228      	movs	r2, #40	; 0x28
 8001a08:	2100      	movs	r1, #0
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	f002 fc74 	bl	80042f8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001a10:	f107 0314 	add.w	r3, r7, #20
 8001a14:	2200      	movs	r2, #0
 8001a16:	601a      	str	r2, [r3, #0]
 8001a18:	605a      	str	r2, [r3, #4]
 8001a1a:	609a      	str	r2, [r3, #8]
 8001a1c:	60da      	str	r2, [r3, #12]
 8001a1e:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 8001a20:	1d3b      	adds	r3, r7, #4
 8001a22:	2200      	movs	r2, #0
 8001a24:	601a      	str	r2, [r3, #0]
 8001a26:	605a      	str	r2, [r3, #4]
 8001a28:	609a      	str	r2, [r3, #8]
 8001a2a:	60da      	str	r2, [r3, #12]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE;
 8001a2c:	2306      	movs	r3, #6
 8001a2e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 8001a30:	2301      	movs	r3, #1
 8001a32:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001a34:	2301      	movs	r3, #1
 8001a36:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001a38:	2310      	movs	r3, #16
 8001a3a:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001a3c:	2302      	movs	r3, #2
 8001a3e:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001a40:	2300      	movs	r3, #0
 8001a42:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001a44:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 8001a48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001a4a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001a4e:	4618      	mov	r0, r3
 8001a50:	f000 fe7a 	bl	8002748 <HAL_RCC_OscConfig>
 8001a54:	4603      	mov	r3, r0
 8001a56:	2b00      	cmp	r3, #0
 8001a58:	d001      	beq.n	8001a5e <SystemClock_Config+0x62>
  {
    Error_Handler();
 8001a5a:	f000 f93b 	bl	8001cd4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001a5e:	230f      	movs	r3, #15
 8001a60:	617b      	str	r3, [r7, #20]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001a66:	2300      	movs	r3, #0
 8001a68:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001a6a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001a6e:	623b      	str	r3, [r7, #32]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001a70:	2300      	movs	r3, #0
 8001a72:	627b      	str	r3, [r7, #36]	; 0x24

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001a74:	f107 0314 	add.w	r3, r7, #20
 8001a78:	2102      	movs	r1, #2
 8001a7a:	4618      	mov	r0, r3
 8001a7c:	f001 f8e4 	bl	8002c48 <HAL_RCC_ClockConfig>
 8001a80:	4603      	mov	r3, r0
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d001      	beq.n	8001a8a <SystemClock_Config+0x8e>
  {
    Error_Handler();
 8001a86:	f000 f925 	bl	8001cd4 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_RTC;
 8001a8a:	2301      	movs	r3, #1
 8001a8c:	607b      	str	r3, [r7, #4]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 8001a8e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001a92:	60bb      	str	r3, [r7, #8]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 8001a94:	1d3b      	adds	r3, r7, #4
 8001a96:	4618      	mov	r0, r3
 8001a98:	f001 fa70 	bl	8002f7c <HAL_RCCEx_PeriphCLKConfig>
 8001a9c:	4603      	mov	r3, r0
 8001a9e:	2b00      	cmp	r3, #0
 8001aa0:	d001      	beq.n	8001aa6 <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8001aa2:	f000 f917 	bl	8001cd4 <Error_Handler>
  }
}
 8001aa6:	bf00      	nop
 8001aa8:	3750      	adds	r7, #80	; 0x50
 8001aaa:	46bd      	mov	sp, r7
 8001aac:	bd80      	pop	{r7, pc}
	...

08001ab0 <MX_RTC_Init>:
  * @brief RTC Initialization Function
  * @param None
  * @retval None
  */
static void MX_RTC_Init(void)
{
 8001ab0:	b580      	push	{r7, lr}
 8001ab2:	b082      	sub	sp, #8
 8001ab4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8001ab6:	1d3b      	adds	r3, r7, #4
 8001ab8:	2100      	movs	r1, #0
 8001aba:	460a      	mov	r2, r1
 8001abc:	801a      	strh	r2, [r3, #0]
 8001abe:	460a      	mov	r2, r1
 8001ac0:	709a      	strb	r2, [r3, #2]
  RTC_DateTypeDef DateToUpdate = {0};
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	603b      	str	r3, [r7, #0]
  /* USER CODE BEGIN RTC_Init 1 */

  /* USER CODE END RTC_Init 1 */
  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8001ac6:	4b1d      	ldr	r3, [pc, #116]	; (8001b3c <MX_RTC_Init+0x8c>)
 8001ac8:	4a1d      	ldr	r2, [pc, #116]	; (8001b40 <MX_RTC_Init+0x90>)
 8001aca:	601a      	str	r2, [r3, #0]
  hrtc.Init.AsynchPrediv = RTC_AUTO_1_SECOND;
 8001acc:	4b1b      	ldr	r3, [pc, #108]	; (8001b3c <MX_RTC_Init+0x8c>)
 8001ace:	f04f 32ff 	mov.w	r2, #4294967295
 8001ad2:	605a      	str	r2, [r3, #4]
  hrtc.Init.OutPut = RTC_OUTPUTSOURCE_ALARM;
 8001ad4:	4b19      	ldr	r3, [pc, #100]	; (8001b3c <MX_RTC_Init+0x8c>)
 8001ad6:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001ada:	609a      	str	r2, [r3, #8]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8001adc:	4817      	ldr	r0, [pc, #92]	; (8001b3c <MX_RTC_Init+0x8c>)
 8001ade:	f001 fbc7 	bl	8003270 <HAL_RTC_Init>
 8001ae2:	4603      	mov	r3, r0
 8001ae4:	2b00      	cmp	r3, #0
 8001ae6:	d001      	beq.n	8001aec <MX_RTC_Init+0x3c>
  {
    Error_Handler();
 8001ae8:	f000 f8f4 	bl	8001cd4 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 0;
 8001aec:	2300      	movs	r3, #0
 8001aee:	713b      	strb	r3, [r7, #4]
  sTime.Minutes = 0;
 8001af0:	2300      	movs	r3, #0
 8001af2:	717b      	strb	r3, [r7, #5]
  sTime.Seconds = 0;
 8001af4:	2300      	movs	r3, #0
 8001af6:	71bb      	strb	r3, [r7, #6]

  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 8001af8:	1d3b      	adds	r3, r7, #4
 8001afa:	2200      	movs	r2, #0
 8001afc:	4619      	mov	r1, r3
 8001afe:	480f      	ldr	r0, [pc, #60]	; (8001b3c <MX_RTC_Init+0x8c>)
 8001b00:	f001 fc4c 	bl	800339c <HAL_RTC_SetTime>
 8001b04:	4603      	mov	r3, r0
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d001      	beq.n	8001b0e <MX_RTC_Init+0x5e>
  {
    Error_Handler();
 8001b0a:	f000 f8e3 	bl	8001cd4 <Error_Handler>
  }
  DateToUpdate.WeekDay = RTC_WEEKDAY_MONDAY;
 8001b0e:	2301      	movs	r3, #1
 8001b10:	703b      	strb	r3, [r7, #0]
  DateToUpdate.Month = RTC_MONTH_JANUARY;
 8001b12:	2301      	movs	r3, #1
 8001b14:	707b      	strb	r3, [r7, #1]
  DateToUpdate.Date = 1;
 8001b16:	2301      	movs	r3, #1
 8001b18:	70bb      	strb	r3, [r7, #2]
  DateToUpdate.Year = 0;
 8001b1a:	2300      	movs	r3, #0
 8001b1c:	70fb      	strb	r3, [r7, #3]

  if (HAL_RTC_SetDate(&hrtc, &DateToUpdate, RTC_FORMAT_BIN) != HAL_OK)
 8001b1e:	463b      	mov	r3, r7
 8001b20:	2200      	movs	r2, #0
 8001b22:	4619      	mov	r1, r3
 8001b24:	4805      	ldr	r0, [pc, #20]	; (8001b3c <MX_RTC_Init+0x8c>)
 8001b26:	f001 fda9 	bl	800367c <HAL_RTC_SetDate>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_RTC_Init+0x84>
  {
    Error_Handler();
 8001b30:	f000 f8d0 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8001b34:	bf00      	nop
 8001b36:	3708      	adds	r7, #8
 8001b38:	46bd      	mov	sp, r7
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	20000364 	.word	0x20000364
 8001b40:	40002800 	.word	0x40002800

08001b44 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8001b48:	4b11      	ldr	r3, [pc, #68]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b4a:	4a12      	ldr	r2, [pc, #72]	; (8001b94 <MX_USART3_UART_Init+0x50>)
 8001b4c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8001b4e:	4b10      	ldr	r3, [pc, #64]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b50:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8001b54:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8001b56:	4b0e      	ldr	r3, [pc, #56]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b58:	2200      	movs	r2, #0
 8001b5a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8001b5c:	4b0c      	ldr	r3, [pc, #48]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b5e:	2200      	movs	r2, #0
 8001b60:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8001b62:	4b0b      	ldr	r3, [pc, #44]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8001b68:	4b09      	ldr	r3, [pc, #36]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b6a:	220c      	movs	r2, #12
 8001b6c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b6e:	4b08      	ldr	r3, [pc, #32]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b70:	2200      	movs	r2, #0
 8001b72:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b74:	4b06      	ldr	r3, [pc, #24]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b76:	2200      	movs	r2, #0
 8001b78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8001b7a:	4805      	ldr	r0, [pc, #20]	; (8001b90 <MX_USART3_UART_Init+0x4c>)
 8001b7c:	f002 f92a 	bl	8003dd4 <HAL_UART_Init>
 8001b80:	4603      	mov	r3, r0
 8001b82:	2b00      	cmp	r3, #0
 8001b84:	d001      	beq.n	8001b8a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8001b86:	f000 f8a5 	bl	8001cd4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8001b8a:	bf00      	nop
 8001b8c:	bd80      	pop	{r7, pc}
 8001b8e:	bf00      	nop
 8001b90:	20000320 	.word	0x20000320
 8001b94:	40004800 	.word	0x40004800

08001b98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b98:	b580      	push	{r7, lr}
 8001b9a:	b088      	sub	sp, #32
 8001b9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b9e:	f107 0310 	add.w	r3, r7, #16
 8001ba2:	2200      	movs	r2, #0
 8001ba4:	601a      	str	r2, [r3, #0]
 8001ba6:	605a      	str	r2, [r3, #4]
 8001ba8:	609a      	str	r2, [r3, #8]
 8001baa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bac:	4b44      	ldr	r3, [pc, #272]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a43      	ldr	r2, [pc, #268]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bb2:	f043 0310 	orr.w	r3, r3, #16
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b41      	ldr	r3, [pc, #260]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0310 	and.w	r3, r3, #16
 8001bc0:	60fb      	str	r3, [r7, #12]
 8001bc2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc4:	4b3e      	ldr	r3, [pc, #248]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a3d      	ldr	r2, [pc, #244]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b3b      	ldr	r3, [pc, #236]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	60bb      	str	r3, [r7, #8]
 8001bda:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001bdc:	4b38      	ldr	r3, [pc, #224]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bde:	699b      	ldr	r3, [r3, #24]
 8001be0:	4a37      	ldr	r2, [pc, #220]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001be2:	f043 0304 	orr.w	r3, r3, #4
 8001be6:	6193      	str	r3, [r2, #24]
 8001be8:	4b35      	ldr	r3, [pc, #212]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bea:	699b      	ldr	r3, [r3, #24]
 8001bec:	f003 0304 	and.w	r3, r3, #4
 8001bf0:	607b      	str	r3, [r7, #4]
 8001bf2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bf4:	4b32      	ldr	r3, [pc, #200]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bf6:	699b      	ldr	r3, [r3, #24]
 8001bf8:	4a31      	ldr	r2, [pc, #196]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001bfa:	f043 0308 	orr.w	r3, r3, #8
 8001bfe:	6193      	str	r3, [r2, #24]
 8001c00:	4b2f      	ldr	r3, [pc, #188]	; (8001cc0 <MX_GPIO_Init+0x128>)
 8001c02:	699b      	ldr	r3, [r3, #24]
 8001c04:	f003 0308 	and.w	r3, r3, #8
 8001c08:	603b      	str	r3, [r7, #0]
 8001c0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_CLK_Pin|DISP_STB_Pin|DISP_DIO_Pin|HX711_SCK_Pin, GPIO_PIN_RESET);
 8001c0c:	2200      	movs	r2, #0
 8001c0e:	f240 410b 	movw	r1, #1035	; 0x40b
 8001c12:	482c      	ldr	r0, [pc, #176]	; (8001cc4 <MX_GPIO_Init+0x12c>)
 8001c14:	f000 fd51 	bl	80026ba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001c18:	2200      	movs	r2, #0
 8001c1a:	2120      	movs	r1, #32
 8001c1c:	482a      	ldr	r0, [pc, #168]	; (8001cc8 <MX_GPIO_Init+0x130>)
 8001c1e:	f000 fd4c 	bl	80026ba <HAL_GPIO_WritePin>

  /*Configure GPIO pins : DISP_CLK_Pin DISP_STB_Pin DISP_DIO_Pin HX711_SCK_Pin */
  GPIO_InitStruct.Pin = DISP_CLK_Pin|DISP_STB_Pin|DISP_DIO_Pin|HX711_SCK_Pin;
 8001c22:	f240 430b 	movw	r3, #1035	; 0x40b
 8001c26:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c28:	2301      	movs	r3, #1
 8001c2a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2c:	2300      	movs	r3, #0
 8001c2e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c30:	2302      	movs	r3, #2
 8001c32:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c34:	f107 0310 	add.w	r3, r7, #16
 8001c38:	4619      	mov	r1, r3
 8001c3a:	4822      	ldr	r0, [pc, #136]	; (8001cc4 <MX_GPIO_Init+0x12c>)
 8001c3c:	f000 fba2 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pins : USART_TX_Pin USART_RX_Pin */
  GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001c40:	230c      	movs	r3, #12
 8001c42:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c44:	2302      	movs	r3, #2
 8001c46:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c48:	2302      	movs	r3, #2
 8001c4a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c4c:	f107 0310 	add.w	r3, r7, #16
 8001c50:	4619      	mov	r1, r3
 8001c52:	481d      	ldr	r0, [pc, #116]	; (8001cc8 <MX_GPIO_Init+0x130>)
 8001c54:	f000 fb96 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001c58:	2320      	movs	r3, #32
 8001c5a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c5c:	2301      	movs	r3, #1
 8001c5e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c60:	2300      	movs	r3, #0
 8001c62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c64:	2302      	movs	r3, #2
 8001c66:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001c68:	f107 0310 	add.w	r3, r7, #16
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	4816      	ldr	r0, [pc, #88]	; (8001cc8 <MX_GPIO_Init+0x130>)
 8001c70:	f000 fb88 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001c74:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001c78:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c7a:	4b14      	ldr	r3, [pc, #80]	; (8001ccc <MX_GPIO_Init+0x134>)
 8001c7c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c7e:	2300      	movs	r3, #0
 8001c80:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001c82:	f107 0310 	add.w	r3, r7, #16
 8001c86:	4619      	mov	r1, r3
 8001c88:	4811      	ldr	r0, [pc, #68]	; (8001cd0 <MX_GPIO_Init+0x138>)
 8001c8a:	f000 fb7b 	bl	8002384 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DT_Pin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 8001c8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001c92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c94:	2300      	movs	r3, #0
 8001c96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c98:	2300      	movs	r3, #0
 8001c9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 8001c9c:	f107 0310 	add.w	r3, r7, #16
 8001ca0:	4619      	mov	r1, r3
 8001ca2:	4808      	ldr	r0, [pc, #32]	; (8001cc4 <MX_GPIO_Init+0x12c>)
 8001ca4:	f000 fb6e 	bl	8002384 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001ca8:	2200      	movs	r2, #0
 8001caa:	2100      	movs	r1, #0
 8001cac:	2028      	movs	r0, #40	; 0x28
 8001cae:	f000 fb32 	bl	8002316 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 8001cb2:	2028      	movs	r0, #40	; 0x28
 8001cb4:	f000 fb4b 	bl	800234e <HAL_NVIC_EnableIRQ>

}
 8001cb8:	bf00      	nop
 8001cba:	3720      	adds	r7, #32
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	40021000 	.word	0x40021000
 8001cc4:	40011000 	.word	0x40011000
 8001cc8:	40010800 	.word	0x40010800
 8001ccc:	10110000 	.word	0x10110000
 8001cd0:	40010c00 	.word	0x40010c00

08001cd4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cd4:	b480      	push	{r7}
 8001cd6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 8001cd8:	bf00      	nop
 8001cda:	46bd      	mov	sp, r7
 8001cdc:	bc80      	pop	{r7}
 8001cde:	4770      	bx	lr

08001ce0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ce0:	b480      	push	{r7}
 8001ce2:	b085      	sub	sp, #20
 8001ce4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001ce6:	4b15      	ldr	r3, [pc, #84]	; (8001d3c <HAL_MspInit+0x5c>)
 8001ce8:	699b      	ldr	r3, [r3, #24]
 8001cea:	4a14      	ldr	r2, [pc, #80]	; (8001d3c <HAL_MspInit+0x5c>)
 8001cec:	f043 0301 	orr.w	r3, r3, #1
 8001cf0:	6193      	str	r3, [r2, #24]
 8001cf2:	4b12      	ldr	r3, [pc, #72]	; (8001d3c <HAL_MspInit+0x5c>)
 8001cf4:	699b      	ldr	r3, [r3, #24]
 8001cf6:	f003 0301 	and.w	r3, r3, #1
 8001cfa:	60bb      	str	r3, [r7, #8]
 8001cfc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001cfe:	4b0f      	ldr	r3, [pc, #60]	; (8001d3c <HAL_MspInit+0x5c>)
 8001d00:	69db      	ldr	r3, [r3, #28]
 8001d02:	4a0e      	ldr	r2, [pc, #56]	; (8001d3c <HAL_MspInit+0x5c>)
 8001d04:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001d08:	61d3      	str	r3, [r2, #28]
 8001d0a:	4b0c      	ldr	r3, [pc, #48]	; (8001d3c <HAL_MspInit+0x5c>)
 8001d0c:	69db      	ldr	r3, [r3, #28]
 8001d0e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001d12:	607b      	str	r3, [r7, #4]
 8001d14:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001d16:	4b0a      	ldr	r3, [pc, #40]	; (8001d40 <HAL_MspInit+0x60>)
 8001d18:	685b      	ldr	r3, [r3, #4]
 8001d1a:	60fb      	str	r3, [r7, #12]
 8001d1c:	68fb      	ldr	r3, [r7, #12]
 8001d1e:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001d22:	60fb      	str	r3, [r7, #12]
 8001d24:	68fb      	ldr	r3, [r7, #12]
 8001d26:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8001d2a:	60fb      	str	r3, [r7, #12]
 8001d2c:	4a04      	ldr	r2, [pc, #16]	; (8001d40 <HAL_MspInit+0x60>)
 8001d2e:	68fb      	ldr	r3, [r7, #12]
 8001d30:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001d32:	bf00      	nop
 8001d34:	3714      	adds	r7, #20
 8001d36:	46bd      	mov	sp, r7
 8001d38:	bc80      	pop	{r7}
 8001d3a:	4770      	bx	lr
 8001d3c:	40021000 	.word	0x40021000
 8001d40:	40010000 	.word	0x40010000

08001d44 <HAL_RTC_MspInit>:
* This function configures the hardware resources used in this example
* @param hrtc: RTC handle pointer
* @retval None
*/
void HAL_RTC_MspInit(RTC_HandleTypeDef* hrtc)
{
 8001d44:	b580      	push	{r7, lr}
 8001d46:	b084      	sub	sp, #16
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	6078      	str	r0, [r7, #4]
  if(hrtc->Instance==RTC)
 8001d4c:	687b      	ldr	r3, [r7, #4]
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4a0b      	ldr	r2, [pc, #44]	; (8001d80 <HAL_RTC_MspInit+0x3c>)
 8001d52:	4293      	cmp	r3, r2
 8001d54:	d110      	bne.n	8001d78 <HAL_RTC_MspInit+0x34>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    HAL_PWR_EnableBkUpAccess();
 8001d56:	f000 fceb 	bl	8002730 <HAL_PWR_EnableBkUpAccess>
    /* Enable BKP CLK enable for backup registers */
    __HAL_RCC_BKP_CLK_ENABLE();
 8001d5a:	4b0a      	ldr	r3, [pc, #40]	; (8001d84 <HAL_RTC_MspInit+0x40>)
 8001d5c:	69db      	ldr	r3, [r3, #28]
 8001d5e:	4a09      	ldr	r2, [pc, #36]	; (8001d84 <HAL_RTC_MspInit+0x40>)
 8001d60:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8001d64:	61d3      	str	r3, [r2, #28]
 8001d66:	4b07      	ldr	r3, [pc, #28]	; (8001d84 <HAL_RTC_MspInit+0x40>)
 8001d68:	69db      	ldr	r3, [r3, #28]
 8001d6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8001d6e:	60fb      	str	r3, [r7, #12]
 8001d70:	68fb      	ldr	r3, [r7, #12]
    /* Peripheral clock enable */
    __HAL_RCC_RTC_ENABLE();
 8001d72:	4b05      	ldr	r3, [pc, #20]	; (8001d88 <HAL_RTC_MspInit+0x44>)
 8001d74:	2201      	movs	r2, #1
 8001d76:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }

}
 8001d78:	bf00      	nop
 8001d7a:	3710      	adds	r7, #16
 8001d7c:	46bd      	mov	sp, r7
 8001d7e:	bd80      	pop	{r7, pc}
 8001d80:	40002800 	.word	0x40002800
 8001d84:	40021000 	.word	0x40021000
 8001d88:	4242043c 	.word	0x4242043c

08001d8c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001d8c:	b580      	push	{r7, lr}
 8001d8e:	b088      	sub	sp, #32
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001d94:	f107 0310 	add.w	r3, r7, #16
 8001d98:	2200      	movs	r2, #0
 8001d9a:	601a      	str	r2, [r3, #0]
 8001d9c:	605a      	str	r2, [r3, #4]
 8001d9e:	609a      	str	r2, [r3, #8]
 8001da0:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART3)
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1c      	ldr	r2, [pc, #112]	; (8001e18 <HAL_UART_MspInit+0x8c>)
 8001da8:	4293      	cmp	r3, r2
 8001daa:	d131      	bne.n	8001e10 <HAL_UART_MspInit+0x84>
  {
  /* USER CODE BEGIN USART3_MspInit 0 */

  /* USER CODE END USART3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART3_CLK_ENABLE();
 8001dac:	4b1b      	ldr	r3, [pc, #108]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dae:	69db      	ldr	r3, [r3, #28]
 8001db0:	4a1a      	ldr	r2, [pc, #104]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001db2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001db6:	61d3      	str	r3, [r2, #28]
 8001db8:	4b18      	ldr	r3, [pc, #96]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dba:	69db      	ldr	r3, [r3, #28]
 8001dbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8001dc0:	60fb      	str	r3, [r7, #12]
 8001dc2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001dc4:	4b15      	ldr	r3, [pc, #84]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	4a14      	ldr	r2, [pc, #80]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dca:	f043 0308 	orr.w	r3, r3, #8
 8001dce:	6193      	str	r3, [r2, #24]
 8001dd0:	4b12      	ldr	r3, [pc, #72]	; (8001e1c <HAL_UART_MspInit+0x90>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	f003 0308 	and.w	r3, r3, #8
 8001dd8:	60bb      	str	r3, [r7, #8]
 8001dda:	68bb      	ldr	r3, [r7, #8]
    /**USART3 GPIO Configuration
    PB10     ------> USART3_TX
    PB11     ------> USART3_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001ddc:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001de0:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de2:	2302      	movs	r3, #2
 8001de4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001de6:	2303      	movs	r3, #3
 8001de8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001dea:	f107 0310 	add.w	r3, r7, #16
 8001dee:	4619      	mov	r1, r3
 8001df0:	480b      	ldr	r0, [pc, #44]	; (8001e20 <HAL_UART_MspInit+0x94>)
 8001df2:	f000 fac7 	bl	8002384 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8001df6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8001dfa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e00:	2300      	movs	r3, #0
 8001e02:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001e04:	f107 0310 	add.w	r3, r7, #16
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4805      	ldr	r0, [pc, #20]	; (8001e20 <HAL_UART_MspInit+0x94>)
 8001e0c:	f000 faba 	bl	8002384 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART3_MspInit 1 */

  /* USER CODE END USART3_MspInit 1 */
  }

}
 8001e10:	bf00      	nop
 8001e12:	3720      	adds	r7, #32
 8001e14:	46bd      	mov	sp, r7
 8001e16:	bd80      	pop	{r7, pc}
 8001e18:	40004800 	.word	0x40004800
 8001e1c:	40021000 	.word	0x40021000
 8001e20:	40010c00 	.word	0x40010c00

08001e24 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001e24:	b480      	push	{r7}
 8001e26:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001e28:	e7fe      	b.n	8001e28 <NMI_Handler+0x4>

08001e2a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001e2a:	b480      	push	{r7}
 8001e2c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001e2e:	e7fe      	b.n	8001e2e <HardFault_Handler+0x4>

08001e30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001e30:	b480      	push	{r7}
 8001e32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001e34:	e7fe      	b.n	8001e34 <MemManage_Handler+0x4>

08001e36 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001e36:	b480      	push	{r7}
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001e3a:	e7fe      	b.n	8001e3a <BusFault_Handler+0x4>

08001e3c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001e3c:	b480      	push	{r7}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001e40:	e7fe      	b.n	8001e40 <UsageFault_Handler+0x4>

08001e42 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001e42:	b480      	push	{r7}
 8001e44:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	46bd      	mov	sp, r7
 8001e4a:	bc80      	pop	{r7}
 8001e4c:	4770      	bx	lr

08001e4e <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001e4e:	b480      	push	{r7}
 8001e50:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001e52:	bf00      	nop
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bc80      	pop	{r7}
 8001e58:	4770      	bx	lr

08001e5a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001e5a:	b480      	push	{r7}
 8001e5c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001e5e:	bf00      	nop
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bc80      	pop	{r7}
 8001e64:	4770      	bx	lr

08001e66 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001e66:	b580      	push	{r7, lr}
 8001e68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001e6a:	f000 f93d 	bl	80020e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}

08001e72 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 8001e72:	b580      	push	{r7, lr}
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 8001e76:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 8001e7a:	f000 fc37 	bl	80026ec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 8001e7e:	bf00      	nop
 8001e80:	bd80      	pop	{r7, pc}

08001e82 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8001e82:	b480      	push	{r7}
 8001e84:	af00      	add	r7, sp, #0
	return 1;
 8001e86:	2301      	movs	r3, #1
}
 8001e88:	4618      	mov	r0, r3
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bc80      	pop	{r7}
 8001e8e:	4770      	bx	lr

08001e90 <_kill>:

int _kill(int pid, int sig)
{
 8001e90:	b580      	push	{r7, lr}
 8001e92:	b082      	sub	sp, #8
 8001e94:	af00      	add	r7, sp, #0
 8001e96:	6078      	str	r0, [r7, #4]
 8001e98:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8001e9a:	f002 f9f5 	bl	8004288 <__errno>
 8001e9e:	4603      	mov	r3, r0
 8001ea0:	2216      	movs	r2, #22
 8001ea2:	601a      	str	r2, [r3, #0]
	return -1;
 8001ea4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001ea8:	4618      	mov	r0, r3
 8001eaa:	3708      	adds	r7, #8
 8001eac:	46bd      	mov	sp, r7
 8001eae:	bd80      	pop	{r7, pc}

08001eb0 <_exit>:

void _exit (int status)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b082      	sub	sp, #8
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8001eb8:	f04f 31ff 	mov.w	r1, #4294967295
 8001ebc:	6878      	ldr	r0, [r7, #4]
 8001ebe:	f7ff ffe7 	bl	8001e90 <_kill>
	while (1) {}		/* Make sure we hang here */
 8001ec2:	e7fe      	b.n	8001ec2 <_exit+0x12>

08001ec4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8001ec4:	b580      	push	{r7, lr}
 8001ec6:	b086      	sub	sp, #24
 8001ec8:	af00      	add	r7, sp, #0
 8001eca:	60f8      	str	r0, [r7, #12]
 8001ecc:	60b9      	str	r1, [r7, #8]
 8001ece:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ed0:	2300      	movs	r3, #0
 8001ed2:	617b      	str	r3, [r7, #20]
 8001ed4:	e00a      	b.n	8001eec <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8001ed6:	f3af 8000 	nop.w
 8001eda:	4601      	mov	r1, r0
 8001edc:	68bb      	ldr	r3, [r7, #8]
 8001ede:	1c5a      	adds	r2, r3, #1
 8001ee0:	60ba      	str	r2, [r7, #8]
 8001ee2:	b2ca      	uxtb	r2, r1
 8001ee4:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001ee6:	697b      	ldr	r3, [r7, #20]
 8001ee8:	3301      	adds	r3, #1
 8001eea:	617b      	str	r3, [r7, #20]
 8001eec:	697a      	ldr	r2, [r7, #20]
 8001eee:	687b      	ldr	r3, [r7, #4]
 8001ef0:	429a      	cmp	r2, r3
 8001ef2:	dbf0      	blt.n	8001ed6 <_read+0x12>
	}

return len;
 8001ef4:	687b      	ldr	r3, [r7, #4]
}
 8001ef6:	4618      	mov	r0, r3
 8001ef8:	3718      	adds	r7, #24
 8001efa:	46bd      	mov	sp, r7
 8001efc:	bd80      	pop	{r7, pc}

08001efe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001efe:	b580      	push	{r7, lr}
 8001f00:	b086      	sub	sp, #24
 8001f02:	af00      	add	r7, sp, #0
 8001f04:	60f8      	str	r0, [r7, #12]
 8001f06:	60b9      	str	r1, [r7, #8]
 8001f08:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f0a:	2300      	movs	r3, #0
 8001f0c:	617b      	str	r3, [r7, #20]
 8001f0e:	e009      	b.n	8001f24 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8001f10:	68bb      	ldr	r3, [r7, #8]
 8001f12:	1c5a      	adds	r2, r3, #1
 8001f14:	60ba      	str	r2, [r7, #8]
 8001f16:	781b      	ldrb	r3, [r3, #0]
 8001f18:	4618      	mov	r0, r3
 8001f1a:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001f1e:	697b      	ldr	r3, [r7, #20]
 8001f20:	3301      	adds	r3, #1
 8001f22:	617b      	str	r3, [r7, #20]
 8001f24:	697a      	ldr	r2, [r7, #20]
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	429a      	cmp	r2, r3
 8001f2a:	dbf1      	blt.n	8001f10 <_write+0x12>
	}
	return len;
 8001f2c:	687b      	ldr	r3, [r7, #4]
}
 8001f2e:	4618      	mov	r0, r3
 8001f30:	3718      	adds	r7, #24
 8001f32:	46bd      	mov	sp, r7
 8001f34:	bd80      	pop	{r7, pc}

08001f36 <_close>:

int _close(int file)
{
 8001f36:	b480      	push	{r7}
 8001f38:	b083      	sub	sp, #12
 8001f3a:	af00      	add	r7, sp, #0
 8001f3c:	6078      	str	r0, [r7, #4]
	return -1;
 8001f3e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	370c      	adds	r7, #12
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bc80      	pop	{r7}
 8001f4a:	4770      	bx	lr

08001f4c <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b083      	sub	sp, #12
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8001f56:	683b      	ldr	r3, [r7, #0]
 8001f58:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8001f5c:	605a      	str	r2, [r3, #4]
	return 0;
 8001f5e:	2300      	movs	r3, #0
}
 8001f60:	4618      	mov	r0, r3
 8001f62:	370c      	adds	r7, #12
 8001f64:	46bd      	mov	sp, r7
 8001f66:	bc80      	pop	{r7}
 8001f68:	4770      	bx	lr

08001f6a <_isatty>:

int _isatty(int file)
{
 8001f6a:	b480      	push	{r7}
 8001f6c:	b083      	sub	sp, #12
 8001f6e:	af00      	add	r7, sp, #0
 8001f70:	6078      	str	r0, [r7, #4]
	return 1;
 8001f72:	2301      	movs	r3, #1
}
 8001f74:	4618      	mov	r0, r3
 8001f76:	370c      	adds	r7, #12
 8001f78:	46bd      	mov	sp, r7
 8001f7a:	bc80      	pop	{r7}
 8001f7c:	4770      	bx	lr

08001f7e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	b085      	sub	sp, #20
 8001f82:	af00      	add	r7, sp, #0
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	60b9      	str	r1, [r7, #8]
 8001f88:	607a      	str	r2, [r7, #4]
	return 0;
 8001f8a:	2300      	movs	r3, #0
}
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	3714      	adds	r7, #20
 8001f90:	46bd      	mov	sp, r7
 8001f92:	bc80      	pop	{r7}
 8001f94:	4770      	bx	lr
	...

08001f98 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001f98:	b580      	push	{r7, lr}
 8001f9a:	b086      	sub	sp, #24
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001fa0:	4a14      	ldr	r2, [pc, #80]	; (8001ff4 <_sbrk+0x5c>)
 8001fa2:	4b15      	ldr	r3, [pc, #84]	; (8001ff8 <_sbrk+0x60>)
 8001fa4:	1ad3      	subs	r3, r2, r3
 8001fa6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001fa8:	697b      	ldr	r3, [r7, #20]
 8001faa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001fac:	4b13      	ldr	r3, [pc, #76]	; (8001ffc <_sbrk+0x64>)
 8001fae:	681b      	ldr	r3, [r3, #0]
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d102      	bne.n	8001fba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001fb4:	4b11      	ldr	r3, [pc, #68]	; (8001ffc <_sbrk+0x64>)
 8001fb6:	4a12      	ldr	r2, [pc, #72]	; (8002000 <_sbrk+0x68>)
 8001fb8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001fba:	4b10      	ldr	r3, [pc, #64]	; (8001ffc <_sbrk+0x64>)
 8001fbc:	681a      	ldr	r2, [r3, #0]
 8001fbe:	687b      	ldr	r3, [r7, #4]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	693a      	ldr	r2, [r7, #16]
 8001fc4:	429a      	cmp	r2, r3
 8001fc6:	d207      	bcs.n	8001fd8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001fc8:	f002 f95e 	bl	8004288 <__errno>
 8001fcc:	4603      	mov	r3, r0
 8001fce:	220c      	movs	r2, #12
 8001fd0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001fd2:	f04f 33ff 	mov.w	r3, #4294967295
 8001fd6:	e009      	b.n	8001fec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001fd8:	4b08      	ldr	r3, [pc, #32]	; (8001ffc <_sbrk+0x64>)
 8001fda:	681b      	ldr	r3, [r3, #0]
 8001fdc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001fde:	4b07      	ldr	r3, [pc, #28]	; (8001ffc <_sbrk+0x64>)
 8001fe0:	681a      	ldr	r2, [r3, #0]
 8001fe2:	687b      	ldr	r3, [r7, #4]
 8001fe4:	4413      	add	r3, r2
 8001fe6:	4a05      	ldr	r2, [pc, #20]	; (8001ffc <_sbrk+0x64>)
 8001fe8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001fea:	68fb      	ldr	r3, [r7, #12]
}
 8001fec:	4618      	mov	r0, r3
 8001fee:	3718      	adds	r7, #24
 8001ff0:	46bd      	mov	sp, r7
 8001ff2:	bd80      	pop	{r7, pc}
 8001ff4:	20005000 	.word	0x20005000
 8001ff8:	00000400 	.word	0x00000400
 8001ffc:	2000027c 	.word	0x2000027c
 8002000:	20000390 	.word	0x20000390

08002004 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002004:	b480      	push	{r7}
 8002006:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002008:	bf00      	nop
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002010:	480c      	ldr	r0, [pc, #48]	; (8002044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002012:	490d      	ldr	r1, [pc, #52]	; (8002048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002014:	4a0d      	ldr	r2, [pc, #52]	; (800204c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002018:	e002      	b.n	8002020 <LoopCopyDataInit>

0800201a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800201a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800201c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800201e:	3304      	adds	r3, #4

08002020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002024:	d3f9      	bcc.n	800201a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002026:	4a0a      	ldr	r2, [pc, #40]	; (8002050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002028:	4c0a      	ldr	r4, [pc, #40]	; (8002054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800202a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800202c:	e001      	b.n	8002032 <LoopFillZerobss>

0800202e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800202e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002030:	3204      	adds	r2, #4

08002032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002034:	d3fb      	bcc.n	800202e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8002036:	f7ff ffe5 	bl	8002004 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800203a:	f002 f92b 	bl	8004294 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800203e:	f7ff fc2f 	bl	80018a0 <main>
  bx lr
 8002042:	4770      	bx	lr
  ldr r0, =_sdata
 8002044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002048:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 800204c:	08007644 	.word	0x08007644
  ldr r2, =_sbss
 8002050:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002054:	2000038c 	.word	0x2000038c

08002058 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002058:	e7fe      	b.n	8002058 <ADC1_2_IRQHandler>
	...

0800205c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800205c:	b580      	push	{r7, lr}
 800205e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002060:	4b08      	ldr	r3, [pc, #32]	; (8002084 <HAL_Init+0x28>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	4a07      	ldr	r2, [pc, #28]	; (8002084 <HAL_Init+0x28>)
 8002066:	f043 0310 	orr.w	r3, r3, #16
 800206a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800206c:	2003      	movs	r0, #3
 800206e:	f000 f947 	bl	8002300 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002072:	2000      	movs	r0, #0
 8002074:	f000 f808 	bl	8002088 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002078:	f7ff fe32 	bl	8001ce0 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800207c:	2300      	movs	r3, #0
}
 800207e:	4618      	mov	r0, r3
 8002080:	bd80      	pop	{r7, pc}
 8002082:	bf00      	nop
 8002084:	40022000 	.word	0x40022000

08002088 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002088:	b580      	push	{r7, lr}
 800208a:	b082      	sub	sp, #8
 800208c:	af00      	add	r7, sp, #0
 800208e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002090:	4b12      	ldr	r3, [pc, #72]	; (80020dc <HAL_InitTick+0x54>)
 8002092:	681a      	ldr	r2, [r3, #0]
 8002094:	4b12      	ldr	r3, [pc, #72]	; (80020e0 <HAL_InitTick+0x58>)
 8002096:	781b      	ldrb	r3, [r3, #0]
 8002098:	4619      	mov	r1, r3
 800209a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800209e:	fbb3 f3f1 	udiv	r3, r3, r1
 80020a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80020a6:	4618      	mov	r0, r3
 80020a8:	f000 f95f 	bl	800236a <HAL_SYSTICK_Config>
 80020ac:	4603      	mov	r3, r0
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d001      	beq.n	80020b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80020b2:	2301      	movs	r3, #1
 80020b4:	e00e      	b.n	80020d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2b0f      	cmp	r3, #15
 80020ba:	d80a      	bhi.n	80020d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80020bc:	2200      	movs	r2, #0
 80020be:	6879      	ldr	r1, [r7, #4]
 80020c0:	f04f 30ff 	mov.w	r0, #4294967295
 80020c4:	f000 f927 	bl	8002316 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80020c8:	4a06      	ldr	r2, [pc, #24]	; (80020e4 <HAL_InitTick+0x5c>)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80020ce:	2300      	movs	r3, #0
 80020d0:	e000      	b.n	80020d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80020d2:	2301      	movs	r3, #1
}
 80020d4:	4618      	mov	r0, r3
 80020d6:	3708      	adds	r7, #8
 80020d8:	46bd      	mov	sp, r7
 80020da:	bd80      	pop	{r7, pc}
 80020dc:	20000008 	.word	0x20000008
 80020e0:	20000010 	.word	0x20000010
 80020e4:	2000000c 	.word	0x2000000c

080020e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80020e8:	b480      	push	{r7}
 80020ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80020ec:	4b05      	ldr	r3, [pc, #20]	; (8002104 <HAL_IncTick+0x1c>)
 80020ee:	781b      	ldrb	r3, [r3, #0]
 80020f0:	461a      	mov	r2, r3
 80020f2:	4b05      	ldr	r3, [pc, #20]	; (8002108 <HAL_IncTick+0x20>)
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	4413      	add	r3, r2
 80020f8:	4a03      	ldr	r2, [pc, #12]	; (8002108 <HAL_IncTick+0x20>)
 80020fa:	6013      	str	r3, [r2, #0]
}
 80020fc:	bf00      	nop
 80020fe:	46bd      	mov	sp, r7
 8002100:	bc80      	pop	{r7}
 8002102:	4770      	bx	lr
 8002104:	20000010 	.word	0x20000010
 8002108:	20000378 	.word	0x20000378

0800210c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800210c:	b480      	push	{r7}
 800210e:	af00      	add	r7, sp, #0
  return uwTick;
 8002110:	4b02      	ldr	r3, [pc, #8]	; (800211c <HAL_GetTick+0x10>)
 8002112:	681b      	ldr	r3, [r3, #0]
}
 8002114:	4618      	mov	r0, r3
 8002116:	46bd      	mov	sp, r7
 8002118:	bc80      	pop	{r7}
 800211a:	4770      	bx	lr
 800211c:	20000378 	.word	0x20000378

08002120 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002120:	b580      	push	{r7, lr}
 8002122:	b084      	sub	sp, #16
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002128:	f7ff fff0 	bl	800210c <HAL_GetTick>
 800212c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800212e:	687b      	ldr	r3, [r7, #4]
 8002130:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8002132:	68fb      	ldr	r3, [r7, #12]
 8002134:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002138:	d005      	beq.n	8002146 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800213a:	4b0a      	ldr	r3, [pc, #40]	; (8002164 <HAL_Delay+0x44>)
 800213c:	781b      	ldrb	r3, [r3, #0]
 800213e:	461a      	mov	r2, r3
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	4413      	add	r3, r2
 8002144:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8002146:	bf00      	nop
 8002148:	f7ff ffe0 	bl	800210c <HAL_GetTick>
 800214c:	4602      	mov	r2, r0
 800214e:	68bb      	ldr	r3, [r7, #8]
 8002150:	1ad3      	subs	r3, r2, r3
 8002152:	68fa      	ldr	r2, [r7, #12]
 8002154:	429a      	cmp	r2, r3
 8002156:	d8f7      	bhi.n	8002148 <HAL_Delay+0x28>
  {
  }
}
 8002158:	bf00      	nop
 800215a:	bf00      	nop
 800215c:	3710      	adds	r7, #16
 800215e:	46bd      	mov	sp, r7
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20000010 	.word	0x20000010

08002168 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002168:	b480      	push	{r7}
 800216a:	b085      	sub	sp, #20
 800216c:	af00      	add	r7, sp, #0
 800216e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002170:	687b      	ldr	r3, [r7, #4]
 8002172:	f003 0307 	and.w	r3, r3, #7
 8002176:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002178:	4b0c      	ldr	r3, [pc, #48]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800217a:	68db      	ldr	r3, [r3, #12]
 800217c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800217e:	68ba      	ldr	r2, [r7, #8]
 8002180:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002184:	4013      	ands	r3, r2
 8002186:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002188:	68fb      	ldr	r3, [r7, #12]
 800218a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800218c:	68bb      	ldr	r3, [r7, #8]
 800218e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002190:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002194:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002198:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800219a:	4a04      	ldr	r2, [pc, #16]	; (80021ac <__NVIC_SetPriorityGrouping+0x44>)
 800219c:	68bb      	ldr	r3, [r7, #8]
 800219e:	60d3      	str	r3, [r2, #12]
}
 80021a0:	bf00      	nop
 80021a2:	3714      	adds	r7, #20
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bc80      	pop	{r7}
 80021a8:	4770      	bx	lr
 80021aa:	bf00      	nop
 80021ac:	e000ed00 	.word	0xe000ed00

080021b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80021b4:	4b04      	ldr	r3, [pc, #16]	; (80021c8 <__NVIC_GetPriorityGrouping+0x18>)
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	0a1b      	lsrs	r3, r3, #8
 80021ba:	f003 0307 	and.w	r3, r3, #7
}
 80021be:	4618      	mov	r0, r3
 80021c0:	46bd      	mov	sp, r7
 80021c2:	bc80      	pop	{r7}
 80021c4:	4770      	bx	lr
 80021c6:	bf00      	nop
 80021c8:	e000ed00 	.word	0xe000ed00

080021cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80021cc:	b480      	push	{r7}
 80021ce:	b083      	sub	sp, #12
 80021d0:	af00      	add	r7, sp, #0
 80021d2:	4603      	mov	r3, r0
 80021d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80021d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021da:	2b00      	cmp	r3, #0
 80021dc:	db0b      	blt.n	80021f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80021de:	79fb      	ldrb	r3, [r7, #7]
 80021e0:	f003 021f 	and.w	r2, r3, #31
 80021e4:	4906      	ldr	r1, [pc, #24]	; (8002200 <__NVIC_EnableIRQ+0x34>)
 80021e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80021ea:	095b      	lsrs	r3, r3, #5
 80021ec:	2001      	movs	r0, #1
 80021ee:	fa00 f202 	lsl.w	r2, r0, r2
 80021f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80021f6:	bf00      	nop
 80021f8:	370c      	adds	r7, #12
 80021fa:	46bd      	mov	sp, r7
 80021fc:	bc80      	pop	{r7}
 80021fe:	4770      	bx	lr
 8002200:	e000e100 	.word	0xe000e100

08002204 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002204:	b480      	push	{r7}
 8002206:	b083      	sub	sp, #12
 8002208:	af00      	add	r7, sp, #0
 800220a:	4603      	mov	r3, r0
 800220c:	6039      	str	r1, [r7, #0]
 800220e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002210:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002214:	2b00      	cmp	r3, #0
 8002216:	db0a      	blt.n	800222e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002218:	683b      	ldr	r3, [r7, #0]
 800221a:	b2da      	uxtb	r2, r3
 800221c:	490c      	ldr	r1, [pc, #48]	; (8002250 <__NVIC_SetPriority+0x4c>)
 800221e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002222:	0112      	lsls	r2, r2, #4
 8002224:	b2d2      	uxtb	r2, r2
 8002226:	440b      	add	r3, r1
 8002228:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800222c:	e00a      	b.n	8002244 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800222e:	683b      	ldr	r3, [r7, #0]
 8002230:	b2da      	uxtb	r2, r3
 8002232:	4908      	ldr	r1, [pc, #32]	; (8002254 <__NVIC_SetPriority+0x50>)
 8002234:	79fb      	ldrb	r3, [r7, #7]
 8002236:	f003 030f 	and.w	r3, r3, #15
 800223a:	3b04      	subs	r3, #4
 800223c:	0112      	lsls	r2, r2, #4
 800223e:	b2d2      	uxtb	r2, r2
 8002240:	440b      	add	r3, r1
 8002242:	761a      	strb	r2, [r3, #24]
}
 8002244:	bf00      	nop
 8002246:	370c      	adds	r7, #12
 8002248:	46bd      	mov	sp, r7
 800224a:	bc80      	pop	{r7}
 800224c:	4770      	bx	lr
 800224e:	bf00      	nop
 8002250:	e000e100 	.word	0xe000e100
 8002254:	e000ed00 	.word	0xe000ed00

08002258 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002258:	b480      	push	{r7}
 800225a:	b089      	sub	sp, #36	; 0x24
 800225c:	af00      	add	r7, sp, #0
 800225e:	60f8      	str	r0, [r7, #12]
 8002260:	60b9      	str	r1, [r7, #8]
 8002262:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800226c:	69fb      	ldr	r3, [r7, #28]
 800226e:	f1c3 0307 	rsb	r3, r3, #7
 8002272:	2b04      	cmp	r3, #4
 8002274:	bf28      	it	cs
 8002276:	2304      	movcs	r3, #4
 8002278:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800227a:	69fb      	ldr	r3, [r7, #28]
 800227c:	3304      	adds	r3, #4
 800227e:	2b06      	cmp	r3, #6
 8002280:	d902      	bls.n	8002288 <NVIC_EncodePriority+0x30>
 8002282:	69fb      	ldr	r3, [r7, #28]
 8002284:	3b03      	subs	r3, #3
 8002286:	e000      	b.n	800228a <NVIC_EncodePriority+0x32>
 8002288:	2300      	movs	r3, #0
 800228a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800228c:	f04f 32ff 	mov.w	r2, #4294967295
 8002290:	69bb      	ldr	r3, [r7, #24]
 8002292:	fa02 f303 	lsl.w	r3, r2, r3
 8002296:	43da      	mvns	r2, r3
 8002298:	68bb      	ldr	r3, [r7, #8]
 800229a:	401a      	ands	r2, r3
 800229c:	697b      	ldr	r3, [r7, #20]
 800229e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80022a0:	f04f 31ff 	mov.w	r1, #4294967295
 80022a4:	697b      	ldr	r3, [r7, #20]
 80022a6:	fa01 f303 	lsl.w	r3, r1, r3
 80022aa:	43d9      	mvns	r1, r3
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80022b0:	4313      	orrs	r3, r2
         );
}
 80022b2:	4618      	mov	r0, r3
 80022b4:	3724      	adds	r7, #36	; 0x24
 80022b6:	46bd      	mov	sp, r7
 80022b8:	bc80      	pop	{r7}
 80022ba:	4770      	bx	lr

080022bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	b082      	sub	sp, #8
 80022c0:	af00      	add	r7, sp, #0
 80022c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	3b01      	subs	r3, #1
 80022c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80022cc:	d301      	bcc.n	80022d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80022ce:	2301      	movs	r3, #1
 80022d0:	e00f      	b.n	80022f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80022d2:	4a0a      	ldr	r2, [pc, #40]	; (80022fc <SysTick_Config+0x40>)
 80022d4:	687b      	ldr	r3, [r7, #4]
 80022d6:	3b01      	subs	r3, #1
 80022d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80022da:	210f      	movs	r1, #15
 80022dc:	f04f 30ff 	mov.w	r0, #4294967295
 80022e0:	f7ff ff90 	bl	8002204 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80022e4:	4b05      	ldr	r3, [pc, #20]	; (80022fc <SysTick_Config+0x40>)
 80022e6:	2200      	movs	r2, #0
 80022e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80022ea:	4b04      	ldr	r3, [pc, #16]	; (80022fc <SysTick_Config+0x40>)
 80022ec:	2207      	movs	r2, #7
 80022ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80022f0:	2300      	movs	r3, #0
}
 80022f2:	4618      	mov	r0, r3
 80022f4:	3708      	adds	r7, #8
 80022f6:	46bd      	mov	sp, r7
 80022f8:	bd80      	pop	{r7, pc}
 80022fa:	bf00      	nop
 80022fc:	e000e010 	.word	0xe000e010

08002300 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002300:	b580      	push	{r7, lr}
 8002302:	b082      	sub	sp, #8
 8002304:	af00      	add	r7, sp, #0
 8002306:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002308:	6878      	ldr	r0, [r7, #4]
 800230a:	f7ff ff2d 	bl	8002168 <__NVIC_SetPriorityGrouping>
}
 800230e:	bf00      	nop
 8002310:	3708      	adds	r7, #8
 8002312:	46bd      	mov	sp, r7
 8002314:	bd80      	pop	{r7, pc}

08002316 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002316:	b580      	push	{r7, lr}
 8002318:	b086      	sub	sp, #24
 800231a:	af00      	add	r7, sp, #0
 800231c:	4603      	mov	r3, r0
 800231e:	60b9      	str	r1, [r7, #8]
 8002320:	607a      	str	r2, [r7, #4]
 8002322:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002324:	2300      	movs	r3, #0
 8002326:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002328:	f7ff ff42 	bl	80021b0 <__NVIC_GetPriorityGrouping>
 800232c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800232e:	687a      	ldr	r2, [r7, #4]
 8002330:	68b9      	ldr	r1, [r7, #8]
 8002332:	6978      	ldr	r0, [r7, #20]
 8002334:	f7ff ff90 	bl	8002258 <NVIC_EncodePriority>
 8002338:	4602      	mov	r2, r0
 800233a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800233e:	4611      	mov	r1, r2
 8002340:	4618      	mov	r0, r3
 8002342:	f7ff ff5f 	bl	8002204 <__NVIC_SetPriority>
}
 8002346:	bf00      	nop
 8002348:	3718      	adds	r7, #24
 800234a:	46bd      	mov	sp, r7
 800234c:	bd80      	pop	{r7, pc}

0800234e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800234e:	b580      	push	{r7, lr}
 8002350:	b082      	sub	sp, #8
 8002352:	af00      	add	r7, sp, #0
 8002354:	4603      	mov	r3, r0
 8002356:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002358:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800235c:	4618      	mov	r0, r3
 800235e:	f7ff ff35 	bl	80021cc <__NVIC_EnableIRQ>
}
 8002362:	bf00      	nop
 8002364:	3708      	adds	r7, #8
 8002366:	46bd      	mov	sp, r7
 8002368:	bd80      	pop	{r7, pc}

0800236a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800236a:	b580      	push	{r7, lr}
 800236c:	b082      	sub	sp, #8
 800236e:	af00      	add	r7, sp, #0
 8002370:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002372:	6878      	ldr	r0, [r7, #4]
 8002374:	f7ff ffa2 	bl	80022bc <SysTick_Config>
 8002378:	4603      	mov	r3, r0
}
 800237a:	4618      	mov	r0, r3
 800237c:	3708      	adds	r7, #8
 800237e:	46bd      	mov	sp, r7
 8002380:	bd80      	pop	{r7, pc}
	...

08002384 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002384:	b480      	push	{r7}
 8002386:	b08b      	sub	sp, #44	; 0x2c
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
 800238c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800238e:	2300      	movs	r3, #0
 8002390:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002392:	2300      	movs	r3, #0
 8002394:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002396:	e169      	b.n	800266c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002398:	2201      	movs	r2, #1
 800239a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800239c:	fa02 f303 	lsl.w	r3, r2, r3
 80023a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80023a2:	683b      	ldr	r3, [r7, #0]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	69fa      	ldr	r2, [r7, #28]
 80023a8:	4013      	ands	r3, r2
 80023aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80023ac:	69ba      	ldr	r2, [r7, #24]
 80023ae:	69fb      	ldr	r3, [r7, #28]
 80023b0:	429a      	cmp	r2, r3
 80023b2:	f040 8158 	bne.w	8002666 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80023b6:	683b      	ldr	r3, [r7, #0]
 80023b8:	685b      	ldr	r3, [r3, #4]
 80023ba:	4a9a      	ldr	r2, [pc, #616]	; (8002624 <HAL_GPIO_Init+0x2a0>)
 80023bc:	4293      	cmp	r3, r2
 80023be:	d05e      	beq.n	800247e <HAL_GPIO_Init+0xfa>
 80023c0:	4a98      	ldr	r2, [pc, #608]	; (8002624 <HAL_GPIO_Init+0x2a0>)
 80023c2:	4293      	cmp	r3, r2
 80023c4:	d875      	bhi.n	80024b2 <HAL_GPIO_Init+0x12e>
 80023c6:	4a98      	ldr	r2, [pc, #608]	; (8002628 <HAL_GPIO_Init+0x2a4>)
 80023c8:	4293      	cmp	r3, r2
 80023ca:	d058      	beq.n	800247e <HAL_GPIO_Init+0xfa>
 80023cc:	4a96      	ldr	r2, [pc, #600]	; (8002628 <HAL_GPIO_Init+0x2a4>)
 80023ce:	4293      	cmp	r3, r2
 80023d0:	d86f      	bhi.n	80024b2 <HAL_GPIO_Init+0x12e>
 80023d2:	4a96      	ldr	r2, [pc, #600]	; (800262c <HAL_GPIO_Init+0x2a8>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d052      	beq.n	800247e <HAL_GPIO_Init+0xfa>
 80023d8:	4a94      	ldr	r2, [pc, #592]	; (800262c <HAL_GPIO_Init+0x2a8>)
 80023da:	4293      	cmp	r3, r2
 80023dc:	d869      	bhi.n	80024b2 <HAL_GPIO_Init+0x12e>
 80023de:	4a94      	ldr	r2, [pc, #592]	; (8002630 <HAL_GPIO_Init+0x2ac>)
 80023e0:	4293      	cmp	r3, r2
 80023e2:	d04c      	beq.n	800247e <HAL_GPIO_Init+0xfa>
 80023e4:	4a92      	ldr	r2, [pc, #584]	; (8002630 <HAL_GPIO_Init+0x2ac>)
 80023e6:	4293      	cmp	r3, r2
 80023e8:	d863      	bhi.n	80024b2 <HAL_GPIO_Init+0x12e>
 80023ea:	4a92      	ldr	r2, [pc, #584]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80023ec:	4293      	cmp	r3, r2
 80023ee:	d046      	beq.n	800247e <HAL_GPIO_Init+0xfa>
 80023f0:	4a90      	ldr	r2, [pc, #576]	; (8002634 <HAL_GPIO_Init+0x2b0>)
 80023f2:	4293      	cmp	r3, r2
 80023f4:	d85d      	bhi.n	80024b2 <HAL_GPIO_Init+0x12e>
 80023f6:	2b12      	cmp	r3, #18
 80023f8:	d82a      	bhi.n	8002450 <HAL_GPIO_Init+0xcc>
 80023fa:	2b12      	cmp	r3, #18
 80023fc:	d859      	bhi.n	80024b2 <HAL_GPIO_Init+0x12e>
 80023fe:	a201      	add	r2, pc, #4	; (adr r2, 8002404 <HAL_GPIO_Init+0x80>)
 8002400:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002404:	0800247f 	.word	0x0800247f
 8002408:	08002459 	.word	0x08002459
 800240c:	0800246b 	.word	0x0800246b
 8002410:	080024ad 	.word	0x080024ad
 8002414:	080024b3 	.word	0x080024b3
 8002418:	080024b3 	.word	0x080024b3
 800241c:	080024b3 	.word	0x080024b3
 8002420:	080024b3 	.word	0x080024b3
 8002424:	080024b3 	.word	0x080024b3
 8002428:	080024b3 	.word	0x080024b3
 800242c:	080024b3 	.word	0x080024b3
 8002430:	080024b3 	.word	0x080024b3
 8002434:	080024b3 	.word	0x080024b3
 8002438:	080024b3 	.word	0x080024b3
 800243c:	080024b3 	.word	0x080024b3
 8002440:	080024b3 	.word	0x080024b3
 8002444:	080024b3 	.word	0x080024b3
 8002448:	08002461 	.word	0x08002461
 800244c:	08002475 	.word	0x08002475
 8002450:	4a79      	ldr	r2, [pc, #484]	; (8002638 <HAL_GPIO_Init+0x2b4>)
 8002452:	4293      	cmp	r3, r2
 8002454:	d013      	beq.n	800247e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002456:	e02c      	b.n	80024b2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002458:	683b      	ldr	r3, [r7, #0]
 800245a:	68db      	ldr	r3, [r3, #12]
 800245c:	623b      	str	r3, [r7, #32]
          break;
 800245e:	e029      	b.n	80024b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002460:	683b      	ldr	r3, [r7, #0]
 8002462:	68db      	ldr	r3, [r3, #12]
 8002464:	3304      	adds	r3, #4
 8002466:	623b      	str	r3, [r7, #32]
          break;
 8002468:	e024      	b.n	80024b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800246a:	683b      	ldr	r3, [r7, #0]
 800246c:	68db      	ldr	r3, [r3, #12]
 800246e:	3308      	adds	r3, #8
 8002470:	623b      	str	r3, [r7, #32]
          break;
 8002472:	e01f      	b.n	80024b4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002474:	683b      	ldr	r3, [r7, #0]
 8002476:	68db      	ldr	r3, [r3, #12]
 8002478:	330c      	adds	r3, #12
 800247a:	623b      	str	r3, [r7, #32]
          break;
 800247c:	e01a      	b.n	80024b4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800247e:	683b      	ldr	r3, [r7, #0]
 8002480:	689b      	ldr	r3, [r3, #8]
 8002482:	2b00      	cmp	r3, #0
 8002484:	d102      	bne.n	800248c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002486:	2304      	movs	r3, #4
 8002488:	623b      	str	r3, [r7, #32]
          break;
 800248a:	e013      	b.n	80024b4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 800248c:	683b      	ldr	r3, [r7, #0]
 800248e:	689b      	ldr	r3, [r3, #8]
 8002490:	2b01      	cmp	r3, #1
 8002492:	d105      	bne.n	80024a0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002494:	2308      	movs	r3, #8
 8002496:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	69fa      	ldr	r2, [r7, #28]
 800249c:	611a      	str	r2, [r3, #16]
          break;
 800249e:	e009      	b.n	80024b4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80024a0:	2308      	movs	r3, #8
 80024a2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80024a4:	687b      	ldr	r3, [r7, #4]
 80024a6:	69fa      	ldr	r2, [r7, #28]
 80024a8:	615a      	str	r2, [r3, #20]
          break;
 80024aa:	e003      	b.n	80024b4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80024ac:	2300      	movs	r3, #0
 80024ae:	623b      	str	r3, [r7, #32]
          break;
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x130>
          break;
 80024b2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80024b4:	69bb      	ldr	r3, [r7, #24]
 80024b6:	2bff      	cmp	r3, #255	; 0xff
 80024b8:	d801      	bhi.n	80024be <HAL_GPIO_Init+0x13a>
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	e001      	b.n	80024c2 <HAL_GPIO_Init+0x13e>
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	3304      	adds	r3, #4
 80024c2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80024c4:	69bb      	ldr	r3, [r7, #24]
 80024c6:	2bff      	cmp	r3, #255	; 0xff
 80024c8:	d802      	bhi.n	80024d0 <HAL_GPIO_Init+0x14c>
 80024ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024cc:	009b      	lsls	r3, r3, #2
 80024ce:	e002      	b.n	80024d6 <HAL_GPIO_Init+0x152>
 80024d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80024d2:	3b08      	subs	r3, #8
 80024d4:	009b      	lsls	r3, r3, #2
 80024d6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	681a      	ldr	r2, [r3, #0]
 80024dc:	210f      	movs	r1, #15
 80024de:	693b      	ldr	r3, [r7, #16]
 80024e0:	fa01 f303 	lsl.w	r3, r1, r3
 80024e4:	43db      	mvns	r3, r3
 80024e6:	401a      	ands	r2, r3
 80024e8:	6a39      	ldr	r1, [r7, #32]
 80024ea:	693b      	ldr	r3, [r7, #16]
 80024ec:	fa01 f303 	lsl.w	r3, r1, r3
 80024f0:	431a      	orrs	r2, r3
 80024f2:	697b      	ldr	r3, [r7, #20]
 80024f4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80024f6:	683b      	ldr	r3, [r7, #0]
 80024f8:	685b      	ldr	r3, [r3, #4]
 80024fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80024fe:	2b00      	cmp	r3, #0
 8002500:	f000 80b1 	beq.w	8002666 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002504:	4b4d      	ldr	r3, [pc, #308]	; (800263c <HAL_GPIO_Init+0x2b8>)
 8002506:	699b      	ldr	r3, [r3, #24]
 8002508:	4a4c      	ldr	r2, [pc, #304]	; (800263c <HAL_GPIO_Init+0x2b8>)
 800250a:	f043 0301 	orr.w	r3, r3, #1
 800250e:	6193      	str	r3, [r2, #24]
 8002510:	4b4a      	ldr	r3, [pc, #296]	; (800263c <HAL_GPIO_Init+0x2b8>)
 8002512:	699b      	ldr	r3, [r3, #24]
 8002514:	f003 0301 	and.w	r3, r3, #1
 8002518:	60bb      	str	r3, [r7, #8]
 800251a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 800251c:	4a48      	ldr	r2, [pc, #288]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 800251e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002520:	089b      	lsrs	r3, r3, #2
 8002522:	3302      	adds	r3, #2
 8002524:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002528:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800252a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800252c:	f003 0303 	and.w	r3, r3, #3
 8002530:	009b      	lsls	r3, r3, #2
 8002532:	220f      	movs	r2, #15
 8002534:	fa02 f303 	lsl.w	r3, r2, r3
 8002538:	43db      	mvns	r3, r3
 800253a:	68fa      	ldr	r2, [r7, #12]
 800253c:	4013      	ands	r3, r2
 800253e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002540:	687b      	ldr	r3, [r7, #4]
 8002542:	4a40      	ldr	r2, [pc, #256]	; (8002644 <HAL_GPIO_Init+0x2c0>)
 8002544:	4293      	cmp	r3, r2
 8002546:	d013      	beq.n	8002570 <HAL_GPIO_Init+0x1ec>
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	4a3f      	ldr	r2, [pc, #252]	; (8002648 <HAL_GPIO_Init+0x2c4>)
 800254c:	4293      	cmp	r3, r2
 800254e:	d00d      	beq.n	800256c <HAL_GPIO_Init+0x1e8>
 8002550:	687b      	ldr	r3, [r7, #4]
 8002552:	4a3e      	ldr	r2, [pc, #248]	; (800264c <HAL_GPIO_Init+0x2c8>)
 8002554:	4293      	cmp	r3, r2
 8002556:	d007      	beq.n	8002568 <HAL_GPIO_Init+0x1e4>
 8002558:	687b      	ldr	r3, [r7, #4]
 800255a:	4a3d      	ldr	r2, [pc, #244]	; (8002650 <HAL_GPIO_Init+0x2cc>)
 800255c:	4293      	cmp	r3, r2
 800255e:	d101      	bne.n	8002564 <HAL_GPIO_Init+0x1e0>
 8002560:	2303      	movs	r3, #3
 8002562:	e006      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 8002564:	2304      	movs	r3, #4
 8002566:	e004      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 8002568:	2302      	movs	r3, #2
 800256a:	e002      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 800256c:	2301      	movs	r3, #1
 800256e:	e000      	b.n	8002572 <HAL_GPIO_Init+0x1ee>
 8002570:	2300      	movs	r3, #0
 8002572:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002574:	f002 0203 	and.w	r2, r2, #3
 8002578:	0092      	lsls	r2, r2, #2
 800257a:	4093      	lsls	r3, r2
 800257c:	68fa      	ldr	r2, [r7, #12]
 800257e:	4313      	orrs	r3, r2
 8002580:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002582:	492f      	ldr	r1, [pc, #188]	; (8002640 <HAL_GPIO_Init+0x2bc>)
 8002584:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002586:	089b      	lsrs	r3, r3, #2
 8002588:	3302      	adds	r3, #2
 800258a:	68fa      	ldr	r2, [r7, #12]
 800258c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002590:	683b      	ldr	r3, [r7, #0]
 8002592:	685b      	ldr	r3, [r3, #4]
 8002594:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002598:	2b00      	cmp	r3, #0
 800259a:	d006      	beq.n	80025aa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 800259c:	4b2d      	ldr	r3, [pc, #180]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 800259e:	681a      	ldr	r2, [r3, #0]
 80025a0:	492c      	ldr	r1, [pc, #176]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025a2:	69bb      	ldr	r3, [r7, #24]
 80025a4:	4313      	orrs	r3, r2
 80025a6:	600b      	str	r3, [r1, #0]
 80025a8:	e006      	b.n	80025b8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80025aa:	4b2a      	ldr	r3, [pc, #168]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025ac:	681a      	ldr	r2, [r3, #0]
 80025ae:	69bb      	ldr	r3, [r7, #24]
 80025b0:	43db      	mvns	r3, r3
 80025b2:	4928      	ldr	r1, [pc, #160]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025b4:	4013      	ands	r3, r2
 80025b6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80025b8:	683b      	ldr	r3, [r7, #0]
 80025ba:	685b      	ldr	r3, [r3, #4]
 80025bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80025c0:	2b00      	cmp	r3, #0
 80025c2:	d006      	beq.n	80025d2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80025c4:	4b23      	ldr	r3, [pc, #140]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025c6:	685a      	ldr	r2, [r3, #4]
 80025c8:	4922      	ldr	r1, [pc, #136]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025ca:	69bb      	ldr	r3, [r7, #24]
 80025cc:	4313      	orrs	r3, r2
 80025ce:	604b      	str	r3, [r1, #4]
 80025d0:	e006      	b.n	80025e0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80025d2:	4b20      	ldr	r3, [pc, #128]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025d4:	685a      	ldr	r2, [r3, #4]
 80025d6:	69bb      	ldr	r3, [r7, #24]
 80025d8:	43db      	mvns	r3, r3
 80025da:	491e      	ldr	r1, [pc, #120]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025dc:	4013      	ands	r3, r2
 80025de:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80025e0:	683b      	ldr	r3, [r7, #0]
 80025e2:	685b      	ldr	r3, [r3, #4]
 80025e4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80025e8:	2b00      	cmp	r3, #0
 80025ea:	d006      	beq.n	80025fa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80025ec:	4b19      	ldr	r3, [pc, #100]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025ee:	689a      	ldr	r2, [r3, #8]
 80025f0:	4918      	ldr	r1, [pc, #96]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025f2:	69bb      	ldr	r3, [r7, #24]
 80025f4:	4313      	orrs	r3, r2
 80025f6:	608b      	str	r3, [r1, #8]
 80025f8:	e006      	b.n	8002608 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80025fa:	4b16      	ldr	r3, [pc, #88]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 80025fc:	689a      	ldr	r2, [r3, #8]
 80025fe:	69bb      	ldr	r3, [r7, #24]
 8002600:	43db      	mvns	r3, r3
 8002602:	4914      	ldr	r1, [pc, #80]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 8002604:	4013      	ands	r3, r2
 8002606:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002608:	683b      	ldr	r3, [r7, #0]
 800260a:	685b      	ldr	r3, [r3, #4]
 800260c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002610:	2b00      	cmp	r3, #0
 8002612:	d021      	beq.n	8002658 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002614:	4b0f      	ldr	r3, [pc, #60]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 8002616:	68da      	ldr	r2, [r3, #12]
 8002618:	490e      	ldr	r1, [pc, #56]	; (8002654 <HAL_GPIO_Init+0x2d0>)
 800261a:	69bb      	ldr	r3, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	60cb      	str	r3, [r1, #12]
 8002620:	e021      	b.n	8002666 <HAL_GPIO_Init+0x2e2>
 8002622:	bf00      	nop
 8002624:	10320000 	.word	0x10320000
 8002628:	10310000 	.word	0x10310000
 800262c:	10220000 	.word	0x10220000
 8002630:	10210000 	.word	0x10210000
 8002634:	10120000 	.word	0x10120000
 8002638:	10110000 	.word	0x10110000
 800263c:	40021000 	.word	0x40021000
 8002640:	40010000 	.word	0x40010000
 8002644:	40010800 	.word	0x40010800
 8002648:	40010c00 	.word	0x40010c00
 800264c:	40011000 	.word	0x40011000
 8002650:	40011400 	.word	0x40011400
 8002654:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002658:	4b0b      	ldr	r3, [pc, #44]	; (8002688 <HAL_GPIO_Init+0x304>)
 800265a:	68da      	ldr	r2, [r3, #12]
 800265c:	69bb      	ldr	r3, [r7, #24]
 800265e:	43db      	mvns	r3, r3
 8002660:	4909      	ldr	r1, [pc, #36]	; (8002688 <HAL_GPIO_Init+0x304>)
 8002662:	4013      	ands	r3, r2
 8002664:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8002666:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002668:	3301      	adds	r3, #1
 800266a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	681a      	ldr	r2, [r3, #0]
 8002670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002672:	fa22 f303 	lsr.w	r3, r2, r3
 8002676:	2b00      	cmp	r3, #0
 8002678:	f47f ae8e 	bne.w	8002398 <HAL_GPIO_Init+0x14>
  }
}
 800267c:	bf00      	nop
 800267e:	bf00      	nop
 8002680:	372c      	adds	r7, #44	; 0x2c
 8002682:	46bd      	mov	sp, r7
 8002684:	bc80      	pop	{r7}
 8002686:	4770      	bx	lr
 8002688:	40010400 	.word	0x40010400

0800268c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800268c:	b480      	push	{r7}
 800268e:	b085      	sub	sp, #20
 8002690:	af00      	add	r7, sp, #0
 8002692:	6078      	str	r0, [r7, #4]
 8002694:	460b      	mov	r3, r1
 8002696:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	689a      	ldr	r2, [r3, #8]
 800269c:	887b      	ldrh	r3, [r7, #2]
 800269e:	4013      	ands	r3, r2
 80026a0:	2b00      	cmp	r3, #0
 80026a2:	d002      	beq.n	80026aa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80026a4:	2301      	movs	r3, #1
 80026a6:	73fb      	strb	r3, [r7, #15]
 80026a8:	e001      	b.n	80026ae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80026aa:	2300      	movs	r3, #0
 80026ac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80026ae:	7bfb      	ldrb	r3, [r7, #15]
}
 80026b0:	4618      	mov	r0, r3
 80026b2:	3714      	adds	r7, #20
 80026b4:	46bd      	mov	sp, r7
 80026b6:	bc80      	pop	{r7}
 80026b8:	4770      	bx	lr

080026ba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80026ba:	b480      	push	{r7}
 80026bc:	b083      	sub	sp, #12
 80026be:	af00      	add	r7, sp, #0
 80026c0:	6078      	str	r0, [r7, #4]
 80026c2:	460b      	mov	r3, r1
 80026c4:	807b      	strh	r3, [r7, #2]
 80026c6:	4613      	mov	r3, r2
 80026c8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80026ca:	787b      	ldrb	r3, [r7, #1]
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	d003      	beq.n	80026d8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80026d0:	887a      	ldrh	r2, [r7, #2]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80026d6:	e003      	b.n	80026e0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80026d8:	887b      	ldrh	r3, [r7, #2]
 80026da:	041a      	lsls	r2, r3, #16
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	611a      	str	r2, [r3, #16]
}
 80026e0:	bf00      	nop
 80026e2:	370c      	adds	r7, #12
 80026e4:	46bd      	mov	sp, r7
 80026e6:	bc80      	pop	{r7}
 80026e8:	4770      	bx	lr
	...

080026ec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80026ec:	b580      	push	{r7, lr}
 80026ee:	b082      	sub	sp, #8
 80026f0:	af00      	add	r7, sp, #0
 80026f2:	4603      	mov	r3, r0
 80026f4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 80026f6:	4b08      	ldr	r3, [pc, #32]	; (8002718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80026f8:	695a      	ldr	r2, [r3, #20]
 80026fa:	88fb      	ldrh	r3, [r7, #6]
 80026fc:	4013      	ands	r3, r2
 80026fe:	2b00      	cmp	r3, #0
 8002700:	d006      	beq.n	8002710 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8002702:	4a05      	ldr	r2, [pc, #20]	; (8002718 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8002704:	88fb      	ldrh	r3, [r7, #6]
 8002706:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8002708:	88fb      	ldrh	r3, [r7, #6]
 800270a:	4618      	mov	r0, r3
 800270c:	f000 f806 	bl	800271c <HAL_GPIO_EXTI_Callback>
  }
}
 8002710:	bf00      	nop
 8002712:	3708      	adds	r7, #8
 8002714:	46bd      	mov	sp, r7
 8002716:	bd80      	pop	{r7, pc}
 8002718:	40010400 	.word	0x40010400

0800271c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 800271c:	b480      	push	{r7}
 800271e:	b083      	sub	sp, #12
 8002720:	af00      	add	r7, sp, #0
 8002722:	4603      	mov	r3, r0
 8002724:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8002726:	bf00      	nop
 8002728:	370c      	adds	r7, #12
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr

08002730 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 128 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8002730:	b480      	push	{r7}
 8002732:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  *(__IO uint32_t *) CR_DBP_BB = (uint32_t)ENABLE;
 8002734:	4b03      	ldr	r3, [pc, #12]	; (8002744 <HAL_PWR_EnableBkUpAccess+0x14>)
 8002736:	2201      	movs	r2, #1
 8002738:	601a      	str	r2, [r3, #0]
}
 800273a:	bf00      	nop
 800273c:	46bd      	mov	sp, r7
 800273e:	bc80      	pop	{r7}
 8002740:	4770      	bx	lr
 8002742:	bf00      	nop
 8002744:	420e0020 	.word	0x420e0020

08002748 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002748:	b580      	push	{r7, lr}
 800274a:	b086      	sub	sp, #24
 800274c:	af00      	add	r7, sp, #0
 800274e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d101      	bne.n	800275a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002756:	2301      	movs	r3, #1
 8002758:	e26c      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	681b      	ldr	r3, [r3, #0]
 800275e:	f003 0301 	and.w	r3, r3, #1
 8002762:	2b00      	cmp	r3, #0
 8002764:	f000 8087 	beq.w	8002876 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002768:	4b92      	ldr	r3, [pc, #584]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	f003 030c 	and.w	r3, r3, #12
 8002770:	2b04      	cmp	r3, #4
 8002772:	d00c      	beq.n	800278e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002774:	4b8f      	ldr	r3, [pc, #572]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002776:	685b      	ldr	r3, [r3, #4]
 8002778:	f003 030c 	and.w	r3, r3, #12
 800277c:	2b08      	cmp	r3, #8
 800277e:	d112      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5e>
 8002780:	4b8c      	ldr	r3, [pc, #560]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002782:	685b      	ldr	r3, [r3, #4]
 8002784:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002788:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800278c:	d10b      	bne.n	80027a6 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800278e:	4b89      	ldr	r3, [pc, #548]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002790:	681b      	ldr	r3, [r3, #0]
 8002792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002796:	2b00      	cmp	r3, #0
 8002798:	d06c      	beq.n	8002874 <HAL_RCC_OscConfig+0x12c>
 800279a:	687b      	ldr	r3, [r7, #4]
 800279c:	685b      	ldr	r3, [r3, #4]
 800279e:	2b00      	cmp	r3, #0
 80027a0:	d168      	bne.n	8002874 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 80027a2:	2301      	movs	r3, #1
 80027a4:	e246      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80027a6:	687b      	ldr	r3, [r7, #4]
 80027a8:	685b      	ldr	r3, [r3, #4]
 80027aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80027ae:	d106      	bne.n	80027be <HAL_RCC_OscConfig+0x76>
 80027b0:	4b80      	ldr	r3, [pc, #512]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027b2:	681b      	ldr	r3, [r3, #0]
 80027b4:	4a7f      	ldr	r2, [pc, #508]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027b6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80027ba:	6013      	str	r3, [r2, #0]
 80027bc:	e02e      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	685b      	ldr	r3, [r3, #4]
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d10c      	bne.n	80027e0 <HAL_RCC_OscConfig+0x98>
 80027c6:	4b7b      	ldr	r3, [pc, #492]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027c8:	681b      	ldr	r3, [r3, #0]
 80027ca:	4a7a      	ldr	r2, [pc, #488]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027cc:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80027d0:	6013      	str	r3, [r2, #0]
 80027d2:	4b78      	ldr	r3, [pc, #480]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	4a77      	ldr	r2, [pc, #476]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027d8:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80027dc:	6013      	str	r3, [r2, #0]
 80027de:	e01d      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	685b      	ldr	r3, [r3, #4]
 80027e4:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80027e8:	d10c      	bne.n	8002804 <HAL_RCC_OscConfig+0xbc>
 80027ea:	4b72      	ldr	r3, [pc, #456]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a71      	ldr	r2, [pc, #452]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027f0:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80027f4:	6013      	str	r3, [r2, #0]
 80027f6:	4b6f      	ldr	r3, [pc, #444]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4a6e      	ldr	r2, [pc, #440]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80027fc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8002800:	6013      	str	r3, [r2, #0]
 8002802:	e00b      	b.n	800281c <HAL_RCC_OscConfig+0xd4>
 8002804:	4b6b      	ldr	r3, [pc, #428]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	4a6a      	ldr	r2, [pc, #424]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800280a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800280e:	6013      	str	r3, [r2, #0]
 8002810:	4b68      	ldr	r3, [pc, #416]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002812:	681b      	ldr	r3, [r3, #0]
 8002814:	4a67      	ldr	r2, [pc, #412]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002816:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800281a:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	685b      	ldr	r3, [r3, #4]
 8002820:	2b00      	cmp	r3, #0
 8002822:	d013      	beq.n	800284c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002824:	f7ff fc72 	bl	800210c <HAL_GetTick>
 8002828:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800282a:	e008      	b.n	800283e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800282c:	f7ff fc6e 	bl	800210c <HAL_GetTick>
 8002830:	4602      	mov	r2, r0
 8002832:	693b      	ldr	r3, [r7, #16]
 8002834:	1ad3      	subs	r3, r2, r3
 8002836:	2b64      	cmp	r3, #100	; 0x64
 8002838:	d901      	bls.n	800283e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800283a:	2303      	movs	r3, #3
 800283c:	e1fa      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002846:	2b00      	cmp	r3, #0
 8002848:	d0f0      	beq.n	800282c <HAL_RCC_OscConfig+0xe4>
 800284a:	e014      	b.n	8002876 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800284c:	f7ff fc5e 	bl	800210c <HAL_GetTick>
 8002850:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002852:	e008      	b.n	8002866 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002854:	f7ff fc5a 	bl	800210c <HAL_GetTick>
 8002858:	4602      	mov	r2, r0
 800285a:	693b      	ldr	r3, [r7, #16]
 800285c:	1ad3      	subs	r3, r2, r3
 800285e:	2b64      	cmp	r3, #100	; 0x64
 8002860:	d901      	bls.n	8002866 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002862:	2303      	movs	r3, #3
 8002864:	e1e6      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002866:	4b53      	ldr	r3, [pc, #332]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800286e:	2b00      	cmp	r3, #0
 8002870:	d1f0      	bne.n	8002854 <HAL_RCC_OscConfig+0x10c>
 8002872:	e000      	b.n	8002876 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002874:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	f003 0302 	and.w	r3, r3, #2
 800287e:	2b00      	cmp	r3, #0
 8002880:	d063      	beq.n	800294a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002882:	4b4c      	ldr	r3, [pc, #304]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002884:	685b      	ldr	r3, [r3, #4]
 8002886:	f003 030c 	and.w	r3, r3, #12
 800288a:	2b00      	cmp	r3, #0
 800288c:	d00b      	beq.n	80028a6 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800288e:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002890:	685b      	ldr	r3, [r3, #4]
 8002892:	f003 030c 	and.w	r3, r3, #12
 8002896:	2b08      	cmp	r3, #8
 8002898:	d11c      	bne.n	80028d4 <HAL_RCC_OscConfig+0x18c>
 800289a:	4b46      	ldr	r3, [pc, #280]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800289c:	685b      	ldr	r3, [r3, #4]
 800289e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d116      	bne.n	80028d4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028a6:	4b43      	ldr	r3, [pc, #268]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028a8:	681b      	ldr	r3, [r3, #0]
 80028aa:	f003 0302 	and.w	r3, r3, #2
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d005      	beq.n	80028be <HAL_RCC_OscConfig+0x176>
 80028b2:	687b      	ldr	r3, [r7, #4]
 80028b4:	691b      	ldr	r3, [r3, #16]
 80028b6:	2b01      	cmp	r3, #1
 80028b8:	d001      	beq.n	80028be <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80028ba:	2301      	movs	r3, #1
 80028bc:	e1ba      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80028be:	4b3d      	ldr	r3, [pc, #244]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	695b      	ldr	r3, [r3, #20]
 80028ca:	00db      	lsls	r3, r3, #3
 80028cc:	4939      	ldr	r1, [pc, #228]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028ce:	4313      	orrs	r3, r2
 80028d0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80028d2:	e03a      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80028d4:	687b      	ldr	r3, [r7, #4]
 80028d6:	691b      	ldr	r3, [r3, #16]
 80028d8:	2b00      	cmp	r3, #0
 80028da:	d020      	beq.n	800291e <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80028dc:	4b36      	ldr	r3, [pc, #216]	; (80029b8 <HAL_RCC_OscConfig+0x270>)
 80028de:	2201      	movs	r2, #1
 80028e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028e2:	f7ff fc13 	bl	800210c <HAL_GetTick>
 80028e6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028e8:	e008      	b.n	80028fc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80028ea:	f7ff fc0f 	bl	800210c <HAL_GetTick>
 80028ee:	4602      	mov	r2, r0
 80028f0:	693b      	ldr	r3, [r7, #16]
 80028f2:	1ad3      	subs	r3, r2, r3
 80028f4:	2b02      	cmp	r3, #2
 80028f6:	d901      	bls.n	80028fc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80028f8:	2303      	movs	r3, #3
 80028fa:	e19b      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028fc:	4b2d      	ldr	r3, [pc, #180]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0302 	and.w	r3, r3, #2
 8002904:	2b00      	cmp	r3, #0
 8002906:	d0f0      	beq.n	80028ea <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002908:	4b2a      	ldr	r3, [pc, #168]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8002910:	687b      	ldr	r3, [r7, #4]
 8002912:	695b      	ldr	r3, [r3, #20]
 8002914:	00db      	lsls	r3, r3, #3
 8002916:	4927      	ldr	r1, [pc, #156]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002918:	4313      	orrs	r3, r2
 800291a:	600b      	str	r3, [r1, #0]
 800291c:	e015      	b.n	800294a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800291e:	4b26      	ldr	r3, [pc, #152]	; (80029b8 <HAL_RCC_OscConfig+0x270>)
 8002920:	2200      	movs	r2, #0
 8002922:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002924:	f7ff fbf2 	bl	800210c <HAL_GetTick>
 8002928:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800292a:	e008      	b.n	800293e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800292c:	f7ff fbee 	bl	800210c <HAL_GetTick>
 8002930:	4602      	mov	r2, r0
 8002932:	693b      	ldr	r3, [r7, #16]
 8002934:	1ad3      	subs	r3, r2, r3
 8002936:	2b02      	cmp	r3, #2
 8002938:	d901      	bls.n	800293e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800293a:	2303      	movs	r3, #3
 800293c:	e17a      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800293e:	4b1d      	ldr	r3, [pc, #116]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	f003 0302 	and.w	r3, r3, #2
 8002946:	2b00      	cmp	r3, #0
 8002948:	d1f0      	bne.n	800292c <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800294a:	687b      	ldr	r3, [r7, #4]
 800294c:	681b      	ldr	r3, [r3, #0]
 800294e:	f003 0308 	and.w	r3, r3, #8
 8002952:	2b00      	cmp	r3, #0
 8002954:	d03a      	beq.n	80029cc <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	699b      	ldr	r3, [r3, #24]
 800295a:	2b00      	cmp	r3, #0
 800295c:	d019      	beq.n	8002992 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800295e:	4b17      	ldr	r3, [pc, #92]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002960:	2201      	movs	r2, #1
 8002962:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002964:	f7ff fbd2 	bl	800210c <HAL_GetTick>
 8002968:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800296a:	e008      	b.n	800297e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800296c:	f7ff fbce 	bl	800210c <HAL_GetTick>
 8002970:	4602      	mov	r2, r0
 8002972:	693b      	ldr	r3, [r7, #16]
 8002974:	1ad3      	subs	r3, r2, r3
 8002976:	2b02      	cmp	r3, #2
 8002978:	d901      	bls.n	800297e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800297a:	2303      	movs	r3, #3
 800297c:	e15a      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800297e:	4b0d      	ldr	r3, [pc, #52]	; (80029b4 <HAL_RCC_OscConfig+0x26c>)
 8002980:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002982:	f003 0302 	and.w	r3, r3, #2
 8002986:	2b00      	cmp	r3, #0
 8002988:	d0f0      	beq.n	800296c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800298a:	2001      	movs	r0, #1
 800298c:	f000 fad8 	bl	8002f40 <RCC_Delay>
 8002990:	e01c      	b.n	80029cc <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002992:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <HAL_RCC_OscConfig+0x274>)
 8002994:	2200      	movs	r2, #0
 8002996:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002998:	f7ff fbb8 	bl	800210c <HAL_GetTick>
 800299c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800299e:	e00f      	b.n	80029c0 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80029a0:	f7ff fbb4 	bl	800210c <HAL_GetTick>
 80029a4:	4602      	mov	r2, r0
 80029a6:	693b      	ldr	r3, [r7, #16]
 80029a8:	1ad3      	subs	r3, r2, r3
 80029aa:	2b02      	cmp	r3, #2
 80029ac:	d908      	bls.n	80029c0 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80029ae:	2303      	movs	r3, #3
 80029b0:	e140      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
 80029b2:	bf00      	nop
 80029b4:	40021000 	.word	0x40021000
 80029b8:	42420000 	.word	0x42420000
 80029bc:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80029c0:	4b9e      	ldr	r3, [pc, #632]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80029c4:	f003 0302 	and.w	r3, r3, #2
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d1e9      	bne.n	80029a0 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	681b      	ldr	r3, [r3, #0]
 80029d0:	f003 0304 	and.w	r3, r3, #4
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80a6 	beq.w	8002b26 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80029da:	2300      	movs	r3, #0
 80029dc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80029de:	4b97      	ldr	r3, [pc, #604]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029e0:	69db      	ldr	r3, [r3, #28]
 80029e2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029e6:	2b00      	cmp	r3, #0
 80029e8:	d10d      	bne.n	8002a06 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80029ea:	4b94      	ldr	r3, [pc, #592]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029ec:	69db      	ldr	r3, [r3, #28]
 80029ee:	4a93      	ldr	r2, [pc, #588]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029f0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80029f4:	61d3      	str	r3, [r2, #28]
 80029f6:	4b91      	ldr	r3, [pc, #580]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 80029f8:	69db      	ldr	r3, [r3, #28]
 80029fa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80029fe:	60bb      	str	r3, [r7, #8]
 8002a00:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002a02:	2301      	movs	r3, #1
 8002a04:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a06:	4b8e      	ldr	r3, [pc, #568]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a08:	681b      	ldr	r3, [r3, #0]
 8002a0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	d118      	bne.n	8002a44 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002a12:	4b8b      	ldr	r3, [pc, #556]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a8a      	ldr	r2, [pc, #552]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a18:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002a1c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002a1e:	f7ff fb75 	bl	800210c <HAL_GetTick>
 8002a22:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a24:	e008      	b.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002a26:	f7ff fb71 	bl	800210c <HAL_GetTick>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	693b      	ldr	r3, [r7, #16]
 8002a2e:	1ad3      	subs	r3, r2, r3
 8002a30:	2b64      	cmp	r3, #100	; 0x64
 8002a32:	d901      	bls.n	8002a38 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002a34:	2303      	movs	r3, #3
 8002a36:	e0fd      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002a38:	4b81      	ldr	r3, [pc, #516]	; (8002c40 <HAL_RCC_OscConfig+0x4f8>)
 8002a3a:	681b      	ldr	r3, [r3, #0]
 8002a3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002a40:	2b00      	cmp	r3, #0
 8002a42:	d0f0      	beq.n	8002a26 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	68db      	ldr	r3, [r3, #12]
 8002a48:	2b01      	cmp	r3, #1
 8002a4a:	d106      	bne.n	8002a5a <HAL_RCC_OscConfig+0x312>
 8002a4c:	4b7b      	ldr	r3, [pc, #492]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a4e:	6a1b      	ldr	r3, [r3, #32]
 8002a50:	4a7a      	ldr	r2, [pc, #488]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a52:	f043 0301 	orr.w	r3, r3, #1
 8002a56:	6213      	str	r3, [r2, #32]
 8002a58:	e02d      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	68db      	ldr	r3, [r3, #12]
 8002a5e:	2b00      	cmp	r3, #0
 8002a60:	d10c      	bne.n	8002a7c <HAL_RCC_OscConfig+0x334>
 8002a62:	4b76      	ldr	r3, [pc, #472]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a64:	6a1b      	ldr	r3, [r3, #32]
 8002a66:	4a75      	ldr	r2, [pc, #468]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a68:	f023 0301 	bic.w	r3, r3, #1
 8002a6c:	6213      	str	r3, [r2, #32]
 8002a6e:	4b73      	ldr	r3, [pc, #460]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a70:	6a1b      	ldr	r3, [r3, #32]
 8002a72:	4a72      	ldr	r2, [pc, #456]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a74:	f023 0304 	bic.w	r3, r3, #4
 8002a78:	6213      	str	r3, [r2, #32]
 8002a7a:	e01c      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	68db      	ldr	r3, [r3, #12]
 8002a80:	2b05      	cmp	r3, #5
 8002a82:	d10c      	bne.n	8002a9e <HAL_RCC_OscConfig+0x356>
 8002a84:	4b6d      	ldr	r3, [pc, #436]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a86:	6a1b      	ldr	r3, [r3, #32]
 8002a88:	4a6c      	ldr	r2, [pc, #432]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a8a:	f043 0304 	orr.w	r3, r3, #4
 8002a8e:	6213      	str	r3, [r2, #32]
 8002a90:	4b6a      	ldr	r3, [pc, #424]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a92:	6a1b      	ldr	r3, [r3, #32]
 8002a94:	4a69      	ldr	r2, [pc, #420]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002a96:	f043 0301 	orr.w	r3, r3, #1
 8002a9a:	6213      	str	r3, [r2, #32]
 8002a9c:	e00b      	b.n	8002ab6 <HAL_RCC_OscConfig+0x36e>
 8002a9e:	4b67      	ldr	r3, [pc, #412]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002aa0:	6a1b      	ldr	r3, [r3, #32]
 8002aa2:	4a66      	ldr	r2, [pc, #408]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002aa4:	f023 0301 	bic.w	r3, r3, #1
 8002aa8:	6213      	str	r3, [r2, #32]
 8002aaa:	4b64      	ldr	r3, [pc, #400]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002aac:	6a1b      	ldr	r3, [r3, #32]
 8002aae:	4a63      	ldr	r2, [pc, #396]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002ab0:	f023 0304 	bic.w	r3, r3, #4
 8002ab4:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	68db      	ldr	r3, [r3, #12]
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d015      	beq.n	8002aea <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002abe:	f7ff fb25 	bl	800210c <HAL_GetTick>
 8002ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002ac4:	e00a      	b.n	8002adc <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002ac6:	f7ff fb21 	bl	800210c <HAL_GetTick>
 8002aca:	4602      	mov	r2, r0
 8002acc:	693b      	ldr	r3, [r7, #16]
 8002ace:	1ad3      	subs	r3, r2, r3
 8002ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8002ad4:	4293      	cmp	r3, r2
 8002ad6:	d901      	bls.n	8002adc <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002ad8:	2303      	movs	r3, #3
 8002ada:	e0ab      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002adc:	4b57      	ldr	r3, [pc, #348]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002ade:	6a1b      	ldr	r3, [r3, #32]
 8002ae0:	f003 0302 	and.w	r3, r3, #2
 8002ae4:	2b00      	cmp	r3, #0
 8002ae6:	d0ee      	beq.n	8002ac6 <HAL_RCC_OscConfig+0x37e>
 8002ae8:	e014      	b.n	8002b14 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002aea:	f7ff fb0f 	bl	800210c <HAL_GetTick>
 8002aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002af0:	e00a      	b.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8002af2:	f7ff fb0b 	bl	800210c <HAL_GetTick>
 8002af6:	4602      	mov	r2, r0
 8002af8:	693b      	ldr	r3, [r7, #16]
 8002afa:	1ad3      	subs	r3, r2, r3
 8002afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8002b00:	4293      	cmp	r3, r2
 8002b02:	d901      	bls.n	8002b08 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8002b04:	2303      	movs	r3, #3
 8002b06:	e095      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002b08:	4b4c      	ldr	r3, [pc, #304]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b0a:	6a1b      	ldr	r3, [r3, #32]
 8002b0c:	f003 0302 	and.w	r3, r3, #2
 8002b10:	2b00      	cmp	r3, #0
 8002b12:	d1ee      	bne.n	8002af2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8002b14:	7dfb      	ldrb	r3, [r7, #23]
 8002b16:	2b01      	cmp	r3, #1
 8002b18:	d105      	bne.n	8002b26 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002b1a:	4b48      	ldr	r3, [pc, #288]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b1c:	69db      	ldr	r3, [r3, #28]
 8002b1e:	4a47      	ldr	r2, [pc, #284]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8002b24:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002b26:	687b      	ldr	r3, [r7, #4]
 8002b28:	69db      	ldr	r3, [r3, #28]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	f000 8081 	beq.w	8002c32 <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002b30:	4b42      	ldr	r3, [pc, #264]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b32:	685b      	ldr	r3, [r3, #4]
 8002b34:	f003 030c 	and.w	r3, r3, #12
 8002b38:	2b08      	cmp	r3, #8
 8002b3a:	d061      	beq.n	8002c00 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	69db      	ldr	r3, [r3, #28]
 8002b40:	2b02      	cmp	r3, #2
 8002b42:	d146      	bne.n	8002bd2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002b44:	4b3f      	ldr	r3, [pc, #252]	; (8002c44 <HAL_RCC_OscConfig+0x4fc>)
 8002b46:	2200      	movs	r2, #0
 8002b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002b4a:	f7ff fadf 	bl	800210c <HAL_GetTick>
 8002b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b50:	e008      	b.n	8002b64 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002b52:	f7ff fadb 	bl	800210c <HAL_GetTick>
 8002b56:	4602      	mov	r2, r0
 8002b58:	693b      	ldr	r3, [r7, #16]
 8002b5a:	1ad3      	subs	r3, r2, r3
 8002b5c:	2b02      	cmp	r3, #2
 8002b5e:	d901      	bls.n	8002b64 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002b60:	2303      	movs	r3, #3
 8002b62:	e067      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002b64:	4b35      	ldr	r3, [pc, #212]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d1f0      	bne.n	8002b52 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6a1b      	ldr	r3, [r3, #32]
 8002b74:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002b78:	d108      	bne.n	8002b8c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002b7a:	4b30      	ldr	r3, [pc, #192]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b7c:	685b      	ldr	r3, [r3, #4]
 8002b7e:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	689b      	ldr	r3, [r3, #8]
 8002b86:	492d      	ldr	r1, [pc, #180]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b88:	4313      	orrs	r3, r2
 8002b8a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002b8e:	685b      	ldr	r3, [r3, #4]
 8002b90:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	6a19      	ldr	r1, [r3, #32]
 8002b98:	687b      	ldr	r3, [r7, #4]
 8002b9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002b9c:	430b      	orrs	r3, r1
 8002b9e:	4927      	ldr	r1, [pc, #156]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002ba0:	4313      	orrs	r3, r2
 8002ba2:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002ba4:	4b27      	ldr	r3, [pc, #156]	; (8002c44 <HAL_RCC_OscConfig+0x4fc>)
 8002ba6:	2201      	movs	r2, #1
 8002ba8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002baa:	f7ff faaf 	bl	800210c <HAL_GetTick>
 8002bae:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bb0:	e008      	b.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002bb2:	f7ff faab 	bl	800210c <HAL_GetTick>
 8002bb6:	4602      	mov	r2, r0
 8002bb8:	693b      	ldr	r3, [r7, #16]
 8002bba:	1ad3      	subs	r3, r2, r3
 8002bbc:	2b02      	cmp	r3, #2
 8002bbe:	d901      	bls.n	8002bc4 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002bc0:	2303      	movs	r3, #3
 8002bc2:	e037      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002bc4:	4b1d      	ldr	r3, [pc, #116]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d0f0      	beq.n	8002bb2 <HAL_RCC_OscConfig+0x46a>
 8002bd0:	e02f      	b.n	8002c32 <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002bd2:	4b1c      	ldr	r3, [pc, #112]	; (8002c44 <HAL_RCC_OscConfig+0x4fc>)
 8002bd4:	2200      	movs	r2, #0
 8002bd6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002bd8:	f7ff fa98 	bl	800210c <HAL_GetTick>
 8002bdc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bde:	e008      	b.n	8002bf2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002be0:	f7ff fa94 	bl	800210c <HAL_GetTick>
 8002be4:	4602      	mov	r2, r0
 8002be6:	693b      	ldr	r3, [r7, #16]
 8002be8:	1ad3      	subs	r3, r2, r3
 8002bea:	2b02      	cmp	r3, #2
 8002bec:	d901      	bls.n	8002bf2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002bee:	2303      	movs	r3, #3
 8002bf0:	e020      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002bfa:	2b00      	cmp	r3, #0
 8002bfc:	d1f0      	bne.n	8002be0 <HAL_RCC_OscConfig+0x498>
 8002bfe:	e018      	b.n	8002c32 <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002c00:	687b      	ldr	r3, [r7, #4]
 8002c02:	69db      	ldr	r3, [r3, #28]
 8002c04:	2b01      	cmp	r3, #1
 8002c06:	d101      	bne.n	8002c0c <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 8002c08:	2301      	movs	r3, #1
 8002c0a:	e013      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002c0c:	4b0b      	ldr	r3, [pc, #44]	; (8002c3c <HAL_RCC_OscConfig+0x4f4>)
 8002c0e:	685b      	ldr	r3, [r3, #4]
 8002c10:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002c18:	687b      	ldr	r3, [r7, #4]
 8002c1a:	6a1b      	ldr	r3, [r3, #32]
 8002c1c:	429a      	cmp	r2, r3
 8002c1e:	d106      	bne.n	8002c2e <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8002c26:	687b      	ldr	r3, [r7, #4]
 8002c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002c2a:	429a      	cmp	r2, r3
 8002c2c:	d001      	beq.n	8002c32 <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002c2e:	2301      	movs	r3, #1
 8002c30:	e000      	b.n	8002c34 <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 8002c32:	2300      	movs	r3, #0
}
 8002c34:	4618      	mov	r0, r3
 8002c36:	3718      	adds	r7, #24
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	bd80      	pop	{r7, pc}
 8002c3c:	40021000 	.word	0x40021000
 8002c40:	40007000 	.word	0x40007000
 8002c44:	42420060 	.word	0x42420060

08002c48 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b084      	sub	sp, #16
 8002c4c:	af00      	add	r7, sp, #0
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8002c52:	687b      	ldr	r3, [r7, #4]
 8002c54:	2b00      	cmp	r3, #0
 8002c56:	d101      	bne.n	8002c5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002c58:	2301      	movs	r3, #1
 8002c5a:	e0d0      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002c5c:	4b6a      	ldr	r3, [pc, #424]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	f003 0307 	and.w	r3, r3, #7
 8002c64:	683a      	ldr	r2, [r7, #0]
 8002c66:	429a      	cmp	r2, r3
 8002c68:	d910      	bls.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002c6a:	4b67      	ldr	r3, [pc, #412]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	f023 0207 	bic.w	r2, r3, #7
 8002c72:	4965      	ldr	r1, [pc, #404]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c74:	683b      	ldr	r3, [r7, #0]
 8002c76:	4313      	orrs	r3, r2
 8002c78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002c7a:	4b63      	ldr	r3, [pc, #396]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002c7c:	681b      	ldr	r3, [r3, #0]
 8002c7e:	f003 0307 	and.w	r3, r3, #7
 8002c82:	683a      	ldr	r2, [r7, #0]
 8002c84:	429a      	cmp	r2, r3
 8002c86:	d001      	beq.n	8002c8c <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002c88:	2301      	movs	r3, #1
 8002c8a:	e0b8      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	f003 0302 	and.w	r3, r3, #2
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d020      	beq.n	8002cda <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	f003 0304 	and.w	r3, r3, #4
 8002ca0:	2b00      	cmp	r3, #0
 8002ca2:	d005      	beq.n	8002cb0 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002ca4:	4b59      	ldr	r3, [pc, #356]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002ca6:	685b      	ldr	r3, [r3, #4]
 8002ca8:	4a58      	ldr	r2, [pc, #352]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002caa:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002cae:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	f003 0308 	and.w	r3, r3, #8
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d005      	beq.n	8002cc8 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002cbc:	4b53      	ldr	r3, [pc, #332]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cbe:	685b      	ldr	r3, [r3, #4]
 8002cc0:	4a52      	ldr	r2, [pc, #328]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cc2:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8002cc6:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002cc8:	4b50      	ldr	r3, [pc, #320]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cca:	685b      	ldr	r3, [r3, #4]
 8002ccc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8002cd0:	687b      	ldr	r3, [r7, #4]
 8002cd2:	689b      	ldr	r3, [r3, #8]
 8002cd4:	494d      	ldr	r1, [pc, #308]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cd6:	4313      	orrs	r3, r2
 8002cd8:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002cda:	687b      	ldr	r3, [r7, #4]
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	f003 0301 	and.w	r3, r3, #1
 8002ce2:	2b00      	cmp	r3, #0
 8002ce4:	d040      	beq.n	8002d68 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002ce6:	687b      	ldr	r3, [r7, #4]
 8002ce8:	685b      	ldr	r3, [r3, #4]
 8002cea:	2b01      	cmp	r3, #1
 8002cec:	d107      	bne.n	8002cfe <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002cee:	4b47      	ldr	r3, [pc, #284]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002cf0:	681b      	ldr	r3, [r3, #0]
 8002cf2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002cf6:	2b00      	cmp	r3, #0
 8002cf8:	d115      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002cfa:	2301      	movs	r3, #1
 8002cfc:	e07f      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8002cfe:	687b      	ldr	r3, [r7, #4]
 8002d00:	685b      	ldr	r3, [r3, #4]
 8002d02:	2b02      	cmp	r3, #2
 8002d04:	d107      	bne.n	8002d16 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002d06:	4b41      	ldr	r3, [pc, #260]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d109      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e073      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002d16:	4b3d      	ldr	r3, [pc, #244]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d18:	681b      	ldr	r3, [r3, #0]
 8002d1a:	f003 0302 	and.w	r3, r3, #2
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d101      	bne.n	8002d26 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002d22:	2301      	movs	r3, #1
 8002d24:	e06b      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002d26:	4b39      	ldr	r3, [pc, #228]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	f023 0203 	bic.w	r2, r3, #3
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	4936      	ldr	r1, [pc, #216]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d34:	4313      	orrs	r3, r2
 8002d36:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002d38:	f7ff f9e8 	bl	800210c <HAL_GetTick>
 8002d3c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d3e:	e00a      	b.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002d40:	f7ff f9e4 	bl	800210c <HAL_GetTick>
 8002d44:	4602      	mov	r2, r0
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	1ad3      	subs	r3, r2, r3
 8002d4a:	f241 3288 	movw	r2, #5000	; 0x1388
 8002d4e:	4293      	cmp	r3, r2
 8002d50:	d901      	bls.n	8002d56 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002d52:	2303      	movs	r3, #3
 8002d54:	e053      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002d56:	4b2d      	ldr	r3, [pc, #180]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002d58:	685b      	ldr	r3, [r3, #4]
 8002d5a:	f003 020c 	and.w	r2, r3, #12
 8002d5e:	687b      	ldr	r3, [r7, #4]
 8002d60:	685b      	ldr	r3, [r3, #4]
 8002d62:	009b      	lsls	r3, r3, #2
 8002d64:	429a      	cmp	r2, r3
 8002d66:	d1eb      	bne.n	8002d40 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002d68:	4b27      	ldr	r3, [pc, #156]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f003 0307 	and.w	r3, r3, #7
 8002d70:	683a      	ldr	r2, [r7, #0]
 8002d72:	429a      	cmp	r2, r3
 8002d74:	d210      	bcs.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002d76:	4b24      	ldr	r3, [pc, #144]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f023 0207 	bic.w	r2, r3, #7
 8002d7e:	4922      	ldr	r1, [pc, #136]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	4313      	orrs	r3, r2
 8002d84:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002d86:	4b20      	ldr	r3, [pc, #128]	; (8002e08 <HAL_RCC_ClockConfig+0x1c0>)
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f003 0307 	and.w	r3, r3, #7
 8002d8e:	683a      	ldr	r2, [r7, #0]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	d001      	beq.n	8002d98 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002d94:	2301      	movs	r3, #1
 8002d96:	e032      	b.n	8002dfe <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	681b      	ldr	r3, [r3, #0]
 8002d9c:	f003 0304 	and.w	r3, r3, #4
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d008      	beq.n	8002db6 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002da4:	4b19      	ldr	r3, [pc, #100]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002da6:	685b      	ldr	r3, [r3, #4]
 8002da8:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	4916      	ldr	r1, [pc, #88]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002db2:	4313      	orrs	r3, r2
 8002db4:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002db6:	687b      	ldr	r3, [r7, #4]
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	f003 0308 	and.w	r3, r3, #8
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	d009      	beq.n	8002dd6 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002dc2:	4b12      	ldr	r3, [pc, #72]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dc4:	685b      	ldr	r3, [r3, #4]
 8002dc6:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	00db      	lsls	r3, r3, #3
 8002dd0:	490e      	ldr	r1, [pc, #56]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dd2:	4313      	orrs	r3, r2
 8002dd4:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002dd6:	f000 f821 	bl	8002e1c <HAL_RCC_GetSysClockFreq>
 8002dda:	4602      	mov	r2, r0
 8002ddc:	4b0b      	ldr	r3, [pc, #44]	; (8002e0c <HAL_RCC_ClockConfig+0x1c4>)
 8002dde:	685b      	ldr	r3, [r3, #4]
 8002de0:	091b      	lsrs	r3, r3, #4
 8002de2:	f003 030f 	and.w	r3, r3, #15
 8002de6:	490a      	ldr	r1, [pc, #40]	; (8002e10 <HAL_RCC_ClockConfig+0x1c8>)
 8002de8:	5ccb      	ldrb	r3, [r1, r3]
 8002dea:	fa22 f303 	lsr.w	r3, r2, r3
 8002dee:	4a09      	ldr	r2, [pc, #36]	; (8002e14 <HAL_RCC_ClockConfig+0x1cc>)
 8002df0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002df2:	4b09      	ldr	r3, [pc, #36]	; (8002e18 <HAL_RCC_ClockConfig+0x1d0>)
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4618      	mov	r0, r3
 8002df8:	f7ff f946 	bl	8002088 <HAL_InitTick>

  return HAL_OK;
 8002dfc:	2300      	movs	r3, #0
}
 8002dfe:	4618      	mov	r0, r3
 8002e00:	3710      	adds	r7, #16
 8002e02:	46bd      	mov	sp, r7
 8002e04:	bd80      	pop	{r7, pc}
 8002e06:	bf00      	nop
 8002e08:	40022000 	.word	0x40022000
 8002e0c:	40021000 	.word	0x40021000
 8002e10:	08007240 	.word	0x08007240
 8002e14:	20000008 	.word	0x20000008
 8002e18:	2000000c 	.word	0x2000000c

08002e1c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002e1c:	b490      	push	{r4, r7}
 8002e1e:	b08a      	sub	sp, #40	; 0x28
 8002e20:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 8002e22:	4b2a      	ldr	r3, [pc, #168]	; (8002ecc <HAL_RCC_GetSysClockFreq+0xb0>)
 8002e24:	1d3c      	adds	r4, r7, #4
 8002e26:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002e28:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002e2c:	f240 2301 	movw	r3, #513	; 0x201
 8002e30:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002e32:	2300      	movs	r3, #0
 8002e34:	61fb      	str	r3, [r7, #28]
 8002e36:	2300      	movs	r3, #0
 8002e38:	61bb      	str	r3, [r7, #24]
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	627b      	str	r3, [r7, #36]	; 0x24
 8002e3e:	2300      	movs	r3, #0
 8002e40:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 8002e42:	2300      	movs	r3, #0
 8002e44:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002e46:	4b22      	ldr	r3, [pc, #136]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e48:	685b      	ldr	r3, [r3, #4]
 8002e4a:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	f003 030c 	and.w	r3, r3, #12
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d002      	beq.n	8002e5c <HAL_RCC_GetSysClockFreq+0x40>
 8002e56:	2b08      	cmp	r3, #8
 8002e58:	d003      	beq.n	8002e62 <HAL_RCC_GetSysClockFreq+0x46>
 8002e5a:	e02d      	b.n	8002eb8 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002e5c:	4b1d      	ldr	r3, [pc, #116]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e5e:	623b      	str	r3, [r7, #32]
      break;
 8002e60:	e02d      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002e62:	69fb      	ldr	r3, [r7, #28]
 8002e64:	0c9b      	lsrs	r3, r3, #18
 8002e66:	f003 030f 	and.w	r3, r3, #15
 8002e6a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e6e:	4413      	add	r3, r2
 8002e70:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8002e74:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002e76:	69fb      	ldr	r3, [r7, #28]
 8002e78:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002e7c:	2b00      	cmp	r3, #0
 8002e7e:	d013      	beq.n	8002ea8 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002e80:	4b13      	ldr	r3, [pc, #76]	; (8002ed0 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002e82:	685b      	ldr	r3, [r3, #4]
 8002e84:	0c5b      	lsrs	r3, r3, #17
 8002e86:	f003 0301 	and.w	r3, r3, #1
 8002e8a:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002e8e:	4413      	add	r3, r2
 8002e90:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8002e94:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002e96:	697b      	ldr	r3, [r7, #20]
 8002e98:	4a0e      	ldr	r2, [pc, #56]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002e9a:	fb02 f203 	mul.w	r2, r2, r3
 8002e9e:	69bb      	ldr	r3, [r7, #24]
 8002ea0:	fbb2 f3f3 	udiv	r3, r2, r3
 8002ea4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ea6:	e004      	b.n	8002eb2 <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002ea8:	697b      	ldr	r3, [r7, #20]
 8002eaa:	4a0b      	ldr	r2, [pc, #44]	; (8002ed8 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002eac:	fb02 f303 	mul.w	r3, r2, r3
 8002eb0:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 8002eb2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002eb4:	623b      	str	r3, [r7, #32]
      break;
 8002eb6:	e002      	b.n	8002ebe <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002eb8:	4b06      	ldr	r3, [pc, #24]	; (8002ed4 <HAL_RCC_GetSysClockFreq+0xb8>)
 8002eba:	623b      	str	r3, [r7, #32]
      break;
 8002ebc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002ebe:	6a3b      	ldr	r3, [r7, #32]
}
 8002ec0:	4618      	mov	r0, r3
 8002ec2:	3728      	adds	r7, #40	; 0x28
 8002ec4:	46bd      	mov	sp, r7
 8002ec6:	bc90      	pop	{r4, r7}
 8002ec8:	4770      	bx	lr
 8002eca:	bf00      	nop
 8002ecc:	08007220 	.word	0x08007220
 8002ed0:	40021000 	.word	0x40021000
 8002ed4:	007a1200 	.word	0x007a1200
 8002ed8:	003d0900 	.word	0x003d0900

08002edc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8002edc:	b480      	push	{r7}
 8002ede:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8002ee0:	4b02      	ldr	r3, [pc, #8]	; (8002eec <HAL_RCC_GetHCLKFreq+0x10>)
 8002ee2:	681b      	ldr	r3, [r3, #0]
}
 8002ee4:	4618      	mov	r0, r3
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bc80      	pop	{r7}
 8002eea:	4770      	bx	lr
 8002eec:	20000008 	.word	0x20000008

08002ef0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8002ef0:	b580      	push	{r7, lr}
 8002ef2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8002ef4:	f7ff fff2 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002ef8:	4602      	mov	r2, r0
 8002efa:	4b05      	ldr	r3, [pc, #20]	; (8002f10 <HAL_RCC_GetPCLK1Freq+0x20>)
 8002efc:	685b      	ldr	r3, [r3, #4]
 8002efe:	0a1b      	lsrs	r3, r3, #8
 8002f00:	f003 0307 	and.w	r3, r3, #7
 8002f04:	4903      	ldr	r1, [pc, #12]	; (8002f14 <HAL_RCC_GetPCLK1Freq+0x24>)
 8002f06:	5ccb      	ldrb	r3, [r1, r3]
 8002f08:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f0c:	4618      	mov	r0, r3
 8002f0e:	bd80      	pop	{r7, pc}
 8002f10:	40021000 	.word	0x40021000
 8002f14:	08007250 	.word	0x08007250

08002f18 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002f18:	b580      	push	{r7, lr}
 8002f1a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002f1c:	f7ff ffde 	bl	8002edc <HAL_RCC_GetHCLKFreq>
 8002f20:	4602      	mov	r2, r0
 8002f22:	4b05      	ldr	r3, [pc, #20]	; (8002f38 <HAL_RCC_GetPCLK2Freq+0x20>)
 8002f24:	685b      	ldr	r3, [r3, #4]
 8002f26:	0adb      	lsrs	r3, r3, #11
 8002f28:	f003 0307 	and.w	r3, r3, #7
 8002f2c:	4903      	ldr	r1, [pc, #12]	; (8002f3c <HAL_RCC_GetPCLK2Freq+0x24>)
 8002f2e:	5ccb      	ldrb	r3, [r1, r3]
 8002f30:	fa22 f303 	lsr.w	r3, r2, r3
}
 8002f34:	4618      	mov	r0, r3
 8002f36:	bd80      	pop	{r7, pc}
 8002f38:	40021000 	.word	0x40021000
 8002f3c:	08007250 	.word	0x08007250

08002f40 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002f40:	b480      	push	{r7}
 8002f42:	b085      	sub	sp, #20
 8002f44:	af00      	add	r7, sp, #0
 8002f46:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002f48:	4b0a      	ldr	r3, [pc, #40]	; (8002f74 <RCC_Delay+0x34>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a0a      	ldr	r2, [pc, #40]	; (8002f78 <RCC_Delay+0x38>)
 8002f4e:	fba2 2303 	umull	r2, r3, r2, r3
 8002f52:	0a5b      	lsrs	r3, r3, #9
 8002f54:	687a      	ldr	r2, [r7, #4]
 8002f56:	fb02 f303 	mul.w	r3, r2, r3
 8002f5a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002f5c:	bf00      	nop
  }
  while (Delay --);
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	1e5a      	subs	r2, r3, #1
 8002f62:	60fa      	str	r2, [r7, #12]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d1f9      	bne.n	8002f5c <RCC_Delay+0x1c>
}
 8002f68:	bf00      	nop
 8002f6a:	bf00      	nop
 8002f6c:	3714      	adds	r7, #20
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	bc80      	pop	{r7}
 8002f72:	4770      	bx	lr
 8002f74:	20000008 	.word	0x20000008
 8002f78:	10624dd3 	.word	0x10624dd3

08002f7c <HAL_RCCEx_PeriphCLKConfig>:
  *         manually disable it.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8002f7c:	b580      	push	{r7, lr}
 8002f7e:	b086      	sub	sp, #24
 8002f80:	af00      	add	r7, sp, #0
 8002f82:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U, temp_reg = 0U;
 8002f84:	2300      	movs	r3, #0
 8002f86:	613b      	str	r3, [r7, #16]
 8002f88:	2300      	movs	r3, #0
 8002f8a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	f003 0301 	and.w	r3, r3, #1
 8002f94:	2b00      	cmp	r3, #0
 8002f96:	d07d      	beq.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x118>
  {
    FlagStatus pwrclkchanged = RESET;
 8002f98:	2300      	movs	r3, #0
 8002f9a:	75fb      	strb	r3, [r7, #23]
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002f9c:	4b4f      	ldr	r3, [pc, #316]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002f9e:	69db      	ldr	r3, [r3, #28]
 8002fa0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d10d      	bne.n	8002fc4 <HAL_RCCEx_PeriphCLKConfig+0x48>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002fa8:	4b4c      	ldr	r3, [pc, #304]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002faa:	69db      	ldr	r3, [r3, #28]
 8002fac:	4a4b      	ldr	r2, [pc, #300]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002fb2:	61d3      	str	r3, [r2, #28]
 8002fb4:	4b49      	ldr	r3, [pc, #292]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8002fb6:	69db      	ldr	r3, [r3, #28]
 8002fb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002fbc:	60bb      	str	r3, [r7, #8]
 8002fbe:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8002fc0:	2301      	movs	r3, #1
 8002fc2:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fc4:	4b46      	ldr	r3, [pc, #280]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fc6:	681b      	ldr	r3, [r3, #0]
 8002fc8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002fcc:	2b00      	cmp	r3, #0
 8002fce:	d118      	bne.n	8003002 <HAL_RCCEx_PeriphCLKConfig+0x86>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8002fd0:	4b43      	ldr	r3, [pc, #268]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	4a42      	ldr	r2, [pc, #264]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002fd6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002fda:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002fdc:	f7ff f896 	bl	800210c <HAL_GetTick>
 8002fe0:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002fe2:	e008      	b.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8002fe4:	f7ff f892 	bl	800210c <HAL_GetTick>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	693b      	ldr	r3, [r7, #16]
 8002fec:	1ad3      	subs	r3, r2, r3
 8002fee:	2b64      	cmp	r3, #100	; 0x64
 8002ff0:	d901      	bls.n	8002ff6 <HAL_RCCEx_PeriphCLKConfig+0x7a>
        {
          return HAL_TIMEOUT;
 8002ff2:	2303      	movs	r3, #3
 8002ff4:	e06d      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002ff6:	4b3a      	ldr	r3, [pc, #232]	; (80030e0 <HAL_RCCEx_PeriphCLKConfig+0x164>)
 8002ff8:	681b      	ldr	r3, [r3, #0]
 8002ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d0f0      	beq.n	8002fe4 <HAL_RCCEx_PeriphCLKConfig+0x68>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8003002:	4b36      	ldr	r3, [pc, #216]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003004:	6a1b      	ldr	r3, [r3, #32]
 8003006:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800300a:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != 0x00000000U) && (temp_reg != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800300c:	68fb      	ldr	r3, [r7, #12]
 800300e:	2b00      	cmp	r3, #0
 8003010:	d02e      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	685b      	ldr	r3, [r3, #4]
 8003016:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800301a:	68fa      	ldr	r2, [r7, #12]
 800301c:	429a      	cmp	r2, r3
 800301e:	d027      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      temp_reg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8003020:	4b2e      	ldr	r3, [pc, #184]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003022:	6a1b      	ldr	r3, [r3, #32]
 8003024:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003028:	60fb      	str	r3, [r7, #12]
      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800302a:	4b2e      	ldr	r3, [pc, #184]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 800302c:	2201      	movs	r2, #1
 800302e:	601a      	str	r2, [r3, #0]
      __HAL_RCC_BACKUPRESET_RELEASE();
 8003030:	4b2c      	ldr	r3, [pc, #176]	; (80030e4 <HAL_RCCEx_PeriphCLKConfig+0x168>)
 8003032:	2200      	movs	r2, #0
 8003034:	601a      	str	r2, [r3, #0]
      /* Restore the Content of BDCR register */
      RCC->BDCR = temp_reg;
 8003036:	4a29      	ldr	r2, [pc, #164]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	6213      	str	r3, [r2, #32]

      /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSEON))
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	f003 0301 	and.w	r3, r3, #1
 8003042:	2b00      	cmp	r3, #0
 8003044:	d014      	beq.n	8003070 <HAL_RCCEx_PeriphCLKConfig+0xf4>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003046:	f7ff f861 	bl	800210c <HAL_GetTick>
 800304a:	6138      	str	r0, [r7, #16]

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800304c:	e00a      	b.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xe8>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800304e:	f7ff f85d 	bl	800210c <HAL_GetTick>
 8003052:	4602      	mov	r2, r0
 8003054:	693b      	ldr	r3, [r7, #16]
 8003056:	1ad3      	subs	r3, r2, r3
 8003058:	f241 3288 	movw	r2, #5000	; 0x1388
 800305c:	4293      	cmp	r3, r2
 800305e:	d901      	bls.n	8003064 <HAL_RCCEx_PeriphCLKConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8003060:	2303      	movs	r3, #3
 8003062:	e036      	b.n	80030d2 <HAL_RCCEx_PeriphCLKConfig+0x156>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003064:	4b1d      	ldr	r3, [pc, #116]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003066:	6a1b      	ldr	r3, [r3, #32]
 8003068:	f003 0302 	and.w	r3, r3, #2
 800306c:	2b00      	cmp	r3, #0
 800306e:	d0ee      	beq.n	800304e <HAL_RCCEx_PeriphCLKConfig+0xd2>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8003070:	4b1a      	ldr	r3, [pc, #104]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 8003072:	6a1b      	ldr	r3, [r3, #32]
 8003074:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8003078:	687b      	ldr	r3, [r7, #4]
 800307a:	685b      	ldr	r3, [r3, #4]
 800307c:	4917      	ldr	r1, [pc, #92]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800307e:	4313      	orrs	r3, r2
 8003080:	620b      	str	r3, [r1, #32]

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003082:	7dfb      	ldrb	r3, [r7, #23]
 8003084:	2b01      	cmp	r3, #1
 8003086:	d105      	bne.n	8003094 <HAL_RCCEx_PeriphCLKConfig+0x118>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003088:	4b14      	ldr	r3, [pc, #80]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308a:	69db      	ldr	r3, [r3, #28]
 800308c:	4a13      	ldr	r2, [pc, #76]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 800308e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8003092:	61d3      	str	r3, [r2, #28]
    }
  }

  /*------------------------------ ADC clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d008      	beq.n	80030b2 <HAL_RCCEx_PeriphCLKConfig+0x136>
  {
    /* Check the parameters */
    assert_param(IS_RCC_ADCPLLCLK_DIV(PeriphClkInit->AdcClockSelection));

    /* Configure the ADC clock source */
    __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 80030a0:	4b0e      	ldr	r3, [pc, #56]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030a2:	685b      	ldr	r3, [r3, #4]
 80030a4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	689b      	ldr	r3, [r3, #8]
 80030ac:	490b      	ldr	r1, [pc, #44]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030ae:	4313      	orrs	r3, r2
 80030b0:	604b      	str	r3, [r1, #4]

#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6)\
 || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)\
 || defined(STM32F105xC) || defined(STM32F107xC)
  /*------------------------------ USB clock Configuration ------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	681b      	ldr	r3, [r3, #0]
 80030b6:	f003 0310 	and.w	r3, r3, #16
 80030ba:	2b00      	cmp	r3, #0
 80030bc:	d008      	beq.n	80030d0 <HAL_RCCEx_PeriphCLKConfig+0x154>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USBPLLCLK_DIV(PeriphClkInit->UsbClockSelection));

    /* Configure the USB clock source */
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80030be:	4b07      	ldr	r3, [pc, #28]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030c0:	685b      	ldr	r3, [r3, #4]
 80030c2:	f423 0280 	bic.w	r2, r3, #4194304	; 0x400000
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	68db      	ldr	r3, [r3, #12]
 80030ca:	4904      	ldr	r1, [pc, #16]	; (80030dc <HAL_RCCEx_PeriphCLKConfig+0x160>)
 80030cc:	4313      	orrs	r3, r2
 80030ce:	604b      	str	r3, [r1, #4]
  }
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG || STM32F105xC || STM32F107xC */

  return HAL_OK;
 80030d0:	2300      	movs	r3, #0
}
 80030d2:	4618      	mov	r0, r3
 80030d4:	3718      	adds	r7, #24
 80030d6:	46bd      	mov	sp, r7
 80030d8:	bd80      	pop	{r7, pc}
 80030da:	bf00      	nop
 80030dc:	40021000 	.word	0x40021000
 80030e0:	40007000 	.word	0x40007000
 80030e4:	42420440 	.word	0x42420440

080030e8 <HAL_RCCEx_GetPeriphCLKFreq>:
  *            @arg @ref RCC_PERIPHCLK_USB  USB peripheral clock
  @endif
  * @retval Frequency in Hz (0: means that no available frequency for the peripheral)
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint32_t PeriphClk)
{
 80030e8:	b590      	push	{r4, r7, lr}
 80030ea:	b08d      	sub	sp, #52	; 0x34
 80030ec:	af00      	add	r7, sp, #0
 80030ee:	6078      	str	r0, [r7, #4]
  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
  uint32_t pll2mul = 0U, pll3mul = 0U, prediv2 = 0U;
#endif /* STM32F105xC || STM32F107xC */
#if defined(STM32F102x6) || defined(STM32F102xB) || defined(STM32F103x6) || \
    defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG)
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 80030f0:	4b5a      	ldr	r3, [pc, #360]	; (800325c <HAL_RCCEx_GetPeriphCLKFreq+0x174>)
 80030f2:	f107 040c 	add.w	r4, r7, #12
 80030f6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80030f8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
  const uint8_t aPredivFactorTable[2] = {1, 2};
 80030fc:	f240 2301 	movw	r3, #513	; 0x201
 8003100:	813b      	strh	r3, [r7, #8]

  uint32_t prediv1 = 0U, pllclk = 0U, pllmul = 0U;
 8003102:	2300      	movs	r3, #0
 8003104:	627b      	str	r3, [r7, #36]	; 0x24
 8003106:	2300      	movs	r3, #0
 8003108:	62fb      	str	r3, [r7, #44]	; 0x2c
 800310a:	2300      	movs	r3, #0
 800310c:	623b      	str	r3, [r7, #32]
#endif /* STM32F102x6 || STM32F102xB || STM32F103x6 || STM32F103xB || STM32F103xE || STM32F103xG */
  uint32_t temp_reg = 0U, frequency = 0U;
 800310e:	2300      	movs	r3, #0
 8003110:	61fb      	str	r3, [r7, #28]
 8003112:	2300      	movs	r3, #0
 8003114:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClk));

  switch (PeriphClk)
 8003116:	687b      	ldr	r3, [r7, #4]
 8003118:	2b10      	cmp	r3, #16
 800311a:	d00a      	beq.n	8003132 <HAL_RCCEx_GetPeriphCLKFreq+0x4a>
 800311c:	687b      	ldr	r3, [r7, #4]
 800311e:	2b10      	cmp	r3, #16
 8003120:	f200 8091 	bhi.w	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	2b01      	cmp	r3, #1
 8003128:	d04c      	beq.n	80031c4 <HAL_RCCEx_GetPeriphCLKFreq+0xdc>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	2b02      	cmp	r3, #2
 800312e:	d07c      	beq.n	800322a <HAL_RCCEx_GetPeriphCLKFreq+0x142>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
      break;
    }
    default:
    {
      break;
 8003130:	e089      	b.n	8003246 <HAL_RCCEx_GetPeriphCLKFreq+0x15e>
      temp_reg = RCC->CFGR;
 8003132:	4b4b      	ldr	r3, [pc, #300]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003134:	685b      	ldr	r3, [r3, #4]
 8003136:	61fb      	str	r3, [r7, #28]
      if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLLON))
 8003138:	4b49      	ldr	r3, [pc, #292]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 800313a:	681b      	ldr	r3, [r3, #0]
 800313c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003140:	2b00      	cmp	r3, #0
 8003142:	f000 8082 	beq.w	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
        pllmul = aPLLMULFactorTable[(uint32_t)(temp_reg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003146:	69fb      	ldr	r3, [r7, #28]
 8003148:	0c9b      	lsrs	r3, r3, #18
 800314a:	f003 030f 	and.w	r3, r3, #15
 800314e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003152:	4413      	add	r3, r2
 8003154:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 8003158:	623b      	str	r3, [r7, #32]
        if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800315a:	69fb      	ldr	r3, [r7, #28]
 800315c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003160:	2b00      	cmp	r3, #0
 8003162:	d018      	beq.n	8003196 <HAL_RCCEx_GetPeriphCLKFreq+0xae>
          prediv1 = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003164:	4b3e      	ldr	r3, [pc, #248]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	0c5b      	lsrs	r3, r3, #17
 800316a:	f003 0301 	and.w	r3, r3, #1
 800316e:	f107 0230 	add.w	r2, r7, #48	; 0x30
 8003172:	4413      	add	r3, r2
 8003174:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 8003178:	627b      	str	r3, [r7, #36]	; 0x24
          if ((temp_reg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	2b00      	cmp	r3, #0
 8003182:	d00d      	beq.n	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
            pllclk = (uint32_t)((HSE_VALUE / prediv1) * pllmul);
 8003184:	4a37      	ldr	r2, [pc, #220]	; (8003264 <HAL_RCCEx_GetPeriphCLKFreq+0x17c>)
 8003186:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003188:	fbb2 f2f3 	udiv	r2, r2, r3
 800318c:	6a3b      	ldr	r3, [r7, #32]
 800318e:	fb02 f303 	mul.w	r3, r2, r3
 8003192:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003194:	e004      	b.n	80031a0 <HAL_RCCEx_GetPeriphCLKFreq+0xb8>
          pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003196:	6a3b      	ldr	r3, [r7, #32]
 8003198:	4a33      	ldr	r2, [pc, #204]	; (8003268 <HAL_RCCEx_GetPeriphCLKFreq+0x180>)
 800319a:	fb02 f303 	mul.w	r3, r2, r3
 800319e:	62fb      	str	r3, [r7, #44]	; 0x2c
        if (__HAL_RCC_GET_USB_SOURCE() == RCC_USBCLKSOURCE_PLL)
 80031a0:	4b2f      	ldr	r3, [pc, #188]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80031a2:	685b      	ldr	r3, [r3, #4]
 80031a4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031a8:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031ac:	d102      	bne.n	80031b4 <HAL_RCCEx_GetPeriphCLKFreq+0xcc>
          frequency = pllclk;
 80031ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031b2:	e04a      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
          frequency = (pllclk * 2) / 3;
 80031b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031b6:	005b      	lsls	r3, r3, #1
 80031b8:	4a2c      	ldr	r2, [pc, #176]	; (800326c <HAL_RCCEx_GetPeriphCLKFreq+0x184>)
 80031ba:	fba2 2303 	umull	r2, r3, r2, r3
 80031be:	085b      	lsrs	r3, r3, #1
 80031c0:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 80031c2:	e042      	b.n	800324a <HAL_RCCEx_GetPeriphCLKFreq+0x162>
      temp_reg = RCC->BDCR;
 80031c4:	4b26      	ldr	r3, [pc, #152]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80031c6:	6a1b      	ldr	r3, [r3, #32]
 80031c8:	61fb      	str	r3, [r7, #28]
      if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSE) && (HAL_IS_BIT_SET(temp_reg, RCC_BDCR_LSERDY)))
 80031ca:	69fb      	ldr	r3, [r7, #28]
 80031cc:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80031d4:	d108      	bne.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
 80031d6:	69fb      	ldr	r3, [r7, #28]
 80031d8:	f003 0302 	and.w	r3, r3, #2
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d003      	beq.n	80031e8 <HAL_RCCEx_GetPeriphCLKFreq+0x100>
        frequency = LSE_VALUE;
 80031e0:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80031e4:	62bb      	str	r3, [r7, #40]	; 0x28
 80031e6:	e01f      	b.n	8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_LSI) && (HAL_IS_BIT_SET(RCC->CSR, RCC_CSR_LSIRDY)))
 80031e8:	69fb      	ldr	r3, [r7, #28]
 80031ea:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80031ee:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80031f2:	d109      	bne.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
 80031f4:	4b1a      	ldr	r3, [pc, #104]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 80031f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80031f8:	f003 0302 	and.w	r3, r3, #2
 80031fc:	2b00      	cmp	r3, #0
 80031fe:	d003      	beq.n	8003208 <HAL_RCCEx_GetPeriphCLKFreq+0x120>
        frequency = LSI_VALUE;
 8003200:	f649 4340 	movw	r3, #40000	; 0x9c40
 8003204:	62bb      	str	r3, [r7, #40]	; 0x28
 8003206:	e00f      	b.n	8003228 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
      else if (((temp_reg & RCC_BDCR_RTCSEL) == RCC_RTCCLKSOURCE_HSE_DIV128) && (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)))
 8003208:	69fb      	ldr	r3, [r7, #28]
 800320a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800320e:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8003212:	d11c      	bne.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003214:	4b12      	ldr	r3, [pc, #72]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003216:	681b      	ldr	r3, [r3, #0]
 8003218:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800321c:	2b00      	cmp	r3, #0
 800321e:	d016      	beq.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
        frequency = HSE_VALUE / 128U;
 8003220:	f24f 4324 	movw	r3, #62500	; 0xf424
 8003224:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003226:	e012      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
 8003228:	e011      	b.n	800324e <HAL_RCCEx_GetPeriphCLKFreq+0x166>
      frequency = HAL_RCC_GetPCLK2Freq() / (((__HAL_RCC_GET_ADC_SOURCE() >> RCC_CFGR_ADCPRE_Pos) + 1) * 2);
 800322a:	f7ff fe75 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 800322e:	4602      	mov	r2, r0
 8003230:	4b0b      	ldr	r3, [pc, #44]	; (8003260 <HAL_RCCEx_GetPeriphCLKFreq+0x178>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	0b9b      	lsrs	r3, r3, #14
 8003236:	f003 0303 	and.w	r3, r3, #3
 800323a:	3301      	adds	r3, #1
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003242:	62bb      	str	r3, [r7, #40]	; 0x28
      break;
 8003244:	e004      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 8003246:	bf00      	nop
 8003248:	e002      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800324a:	bf00      	nop
 800324c:	e000      	b.n	8003250 <HAL_RCCEx_GetPeriphCLKFreq+0x168>
      break;
 800324e:	bf00      	nop
    }
  }
  return (frequency);
 8003250:	6abb      	ldr	r3, [r7, #40]	; 0x28
}
 8003252:	4618      	mov	r0, r3
 8003254:	3734      	adds	r7, #52	; 0x34
 8003256:	46bd      	mov	sp, r7
 8003258:	bd90      	pop	{r4, r7, pc}
 800325a:	bf00      	nop
 800325c:	08007230 	.word	0x08007230
 8003260:	40021000 	.word	0x40021000
 8003264:	007a1200 	.word	0x007a1200
 8003268:	003d0900 	.word	0x003d0900
 800326c:	aaaaaaab 	.word	0xaaaaaaab

08003270 <HAL_RTC_Init>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 8003270:	b580      	push	{r7, lr}
 8003272:	b084      	sub	sp, #16
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
  uint32_t prescaler = 0U;
 8003278:	2300      	movs	r3, #0
 800327a:	60fb      	str	r3, [r7, #12]
  /* Check input parameters */
  if (hrtc == NULL)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2b00      	cmp	r3, #0
 8003280:	d101      	bne.n	8003286 <HAL_RTC_Init+0x16>
  {
    return HAL_ERROR;
 8003282:	2301      	movs	r3, #1
 8003284:	e084      	b.n	8003390 <HAL_RTC_Init+0x120>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	7c5b      	ldrb	r3, [r3, #17]
 800328a:	b2db      	uxtb	r3, r3
 800328c:	2b00      	cmp	r3, #0
 800328e:	d105      	bne.n	800329c <HAL_RTC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 8003290:	687b      	ldr	r3, [r7, #4]
 8003292:	2200      	movs	r2, #0
 8003294:	741a      	strb	r2, [r3, #16]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8003296:	6878      	ldr	r0, [r7, #4]
 8003298:	f7fe fd54 	bl	8001d44 <HAL_RTC_MspInit>
  }
#endif /* (USE_HAL_RTC_REGISTER_CALLBACKS) */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	2202      	movs	r2, #2
 80032a0:	745a      	strb	r2, [r3, #17]

  /* Waiting for synchro */
  if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 80032a2:	6878      	ldr	r0, [r7, #4]
 80032a4:	f000 faf4 	bl	8003890 <HAL_RTC_WaitForSynchro>
 80032a8:	4603      	mov	r3, r0
 80032aa:	2b00      	cmp	r3, #0
 80032ac:	d004      	beq.n	80032b8 <HAL_RTC_Init+0x48>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	2204      	movs	r2, #4
 80032b2:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80032b4:	2301      	movs	r3, #1
 80032b6:	e06b      	b.n	8003390 <HAL_RTC_Init+0x120>
  }

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80032b8:	6878      	ldr	r0, [r7, #4]
 80032ba:	f000 fbad 	bl	8003a18 <RTC_EnterInitMode>
 80032be:	4603      	mov	r3, r0
 80032c0:	2b00      	cmp	r3, #0
 80032c2:	d004      	beq.n	80032ce <HAL_RTC_Init+0x5e>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2204      	movs	r2, #4
 80032c8:	745a      	strb	r2, [r3, #17]

    return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e060      	b.n	8003390 <HAL_RTC_Init+0x120>
  }
  else
  {
    /* Clear Flags Bits */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_OW | RTC_FLAG_ALRAF | RTC_FLAG_SEC));
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	681b      	ldr	r3, [r3, #0]
 80032d2:	685a      	ldr	r2, [r3, #4]
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	681b      	ldr	r3, [r3, #0]
 80032d8:	f022 0207 	bic.w	r2, r2, #7
 80032dc:	605a      	str	r2, [r3, #4]

    if (hrtc->Init.OutPut != RTC_OUTPUTSOURCE_NONE)
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d005      	beq.n	80032f2 <HAL_RTC_Init+0x82>
    {
      /* Disable the selected Tamper pin */
      CLEAR_BIT(BKP->CR, BKP_CR_TPE);
 80032e6:	4b2c      	ldr	r3, [pc, #176]	; (8003398 <HAL_RTC_Init+0x128>)
 80032e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80032ea:	4a2b      	ldr	r2, [pc, #172]	; (8003398 <HAL_RTC_Init+0x128>)
 80032ec:	f023 0301 	bic.w	r3, r3, #1
 80032f0:	6313      	str	r3, [r2, #48]	; 0x30
    }

    /* Set the signal which will be routed to RTC Tamper pin*/
    MODIFY_REG(BKP->RTCCR, (BKP_RTCCR_CCO | BKP_RTCCR_ASOE | BKP_RTCCR_ASOS), hrtc->Init.OutPut);
 80032f2:	4b29      	ldr	r3, [pc, #164]	; (8003398 <HAL_RTC_Init+0x128>)
 80032f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80032f6:	f423 7260 	bic.w	r2, r3, #896	; 0x380
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	689b      	ldr	r3, [r3, #8]
 80032fe:	4926      	ldr	r1, [pc, #152]	; (8003398 <HAL_RTC_Init+0x128>)
 8003300:	4313      	orrs	r3, r2
 8003302:	62cb      	str	r3, [r1, #44]	; 0x2c

    if (hrtc->Init.AsynchPrediv != RTC_AUTO_1_SECOND)
 8003304:	687b      	ldr	r3, [r7, #4]
 8003306:	685b      	ldr	r3, [r3, #4]
 8003308:	f1b3 3fff 	cmp.w	r3, #4294967295
 800330c:	d003      	beq.n	8003316 <HAL_RTC_Init+0xa6>
    {
      /* RTC Prescaler provided directly by end-user*/
      prescaler = hrtc->Init.AsynchPrediv;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	685b      	ldr	r3, [r3, #4]
 8003312:	60fb      	str	r3, [r7, #12]
 8003314:	e00e      	b.n	8003334 <HAL_RTC_Init+0xc4>
    }
    else
    {
      /* RTC Prescaler will be automatically calculated to get 1 second timebase */
      /* Get the RTCCLK frequency */
      prescaler = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_RTC);
 8003316:	2001      	movs	r0, #1
 8003318:	f7ff fee6 	bl	80030e8 <HAL_RCCEx_GetPeriphCLKFreq>
 800331c:	60f8      	str	r0, [r7, #12]

      /* Check that RTC clock is enabled*/
      if (prescaler == 0U)
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	2b00      	cmp	r3, #0
 8003322:	d104      	bne.n	800332e <HAL_RTC_Init+0xbe>
      {
        /* Should not happen. Frequency is not available*/
        hrtc->State = HAL_RTC_STATE_ERROR;
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	2204      	movs	r2, #4
 8003328:	745a      	strb	r2, [r3, #17]
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e030      	b.n	8003390 <HAL_RTC_Init+0x120>
      }
      else
      {
        /* RTC period = RTCCLK/(RTC_PR + 1) */
        prescaler = prescaler - 1U;
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	3b01      	subs	r3, #1
 8003332:	60fb      	str	r3, [r7, #12]
      }
    }

    /* Configure the RTC_PRLH / RTC_PRLL */
    MODIFY_REG(hrtc->Instance->PRLH, RTC_PRLH_PRL, (prescaler >> 16U));
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	681b      	ldr	r3, [r3, #0]
 8003338:	689b      	ldr	r3, [r3, #8]
 800333a:	f023 010f 	bic.w	r1, r3, #15
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	0c1a      	lsrs	r2, r3, #16
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	430a      	orrs	r2, r1
 8003348:	609a      	str	r2, [r3, #8]
    MODIFY_REG(hrtc->Instance->PRLL, RTC_PRLL_PRL, (prescaler & RTC_PRLL_PRL));
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	681b      	ldr	r3, [r3, #0]
 800334e:	68db      	ldr	r3, [r3, #12]
 8003350:	0c1b      	lsrs	r3, r3, #16
 8003352:	041b      	lsls	r3, r3, #16
 8003354:	68fa      	ldr	r2, [r7, #12]
 8003356:	b291      	uxth	r1, r2
 8003358:	687a      	ldr	r2, [r7, #4]
 800335a:	6812      	ldr	r2, [r2, #0]
 800335c:	430b      	orrs	r3, r1
 800335e:	60d3      	str	r3, [r2, #12]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 8003360:	6878      	ldr	r0, [r7, #4]
 8003362:	f000 fb81 	bl	8003a68 <RTC_ExitInitMode>
 8003366:	4603      	mov	r3, r0
 8003368:	2b00      	cmp	r3, #0
 800336a:	d004      	beq.n	8003376 <HAL_RTC_Init+0x106>
    {
      hrtc->State = HAL_RTC_STATE_ERROR;
 800336c:	687b      	ldr	r3, [r7, #4]
 800336e:	2204      	movs	r2, #4
 8003370:	745a      	strb	r2, [r3, #17]

      return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e00c      	b.n	8003390 <HAL_RTC_Init+0x120>
    }

    /* Initialize date to 1st of January 2000 */
    hrtc->DateToUpdate.Year = 0x00U;
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	2200      	movs	r2, #0
 800337a:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_MONTH_JANUARY;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	2201      	movs	r2, #1
 8003380:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date = 0x01U;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	2201      	movs	r2, #1
 8003386:	739a      	strb	r2, [r3, #14]

    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_READY;
 8003388:	687b      	ldr	r3, [r7, #4]
 800338a:	2201      	movs	r2, #1
 800338c:	745a      	strb	r2, [r3, #17]

    return HAL_OK;
 800338e:	2300      	movs	r3, #0
  }
}
 8003390:	4618      	mov	r0, r3
 8003392:	3710      	adds	r7, #16
 8003394:	46bd      	mov	sp, r7
 8003396:	bd80      	pop	{r7, pc}
 8003398:	40006c00 	.word	0x40006c00

0800339c <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 800339c:	b590      	push	{r4, r7, lr}
 800339e:	b087      	sub	sp, #28
 80033a0:	af00      	add	r7, sp, #0
 80033a2:	60f8      	str	r0, [r7, #12]
 80033a4:	60b9      	str	r1, [r7, #8]
 80033a6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U;
 80033a8:	2300      	movs	r3, #0
 80033aa:	617b      	str	r3, [r7, #20]
 80033ac:	2300      	movs	r3, #0
 80033ae:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d002      	beq.n	80033bc <HAL_RTC_SetTime+0x20>
 80033b6:	68bb      	ldr	r3, [r7, #8]
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d101      	bne.n	80033c0 <HAL_RTC_SetTime+0x24>
  {
    return HAL_ERROR;
 80033bc:	2301      	movs	r3, #1
 80033be:	e080      	b.n	80034c2 <HAL_RTC_SetTime+0x126>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	7c1b      	ldrb	r3, [r3, #16]
 80033c4:	2b01      	cmp	r3, #1
 80033c6:	d101      	bne.n	80033cc <HAL_RTC_SetTime+0x30>
 80033c8:	2302      	movs	r3, #2
 80033ca:	e07a      	b.n	80034c2 <HAL_RTC_SetTime+0x126>
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2201      	movs	r2, #1
 80033d0:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80033d2:	68fb      	ldr	r3, [r7, #12]
 80033d4:	2202      	movs	r2, #2
 80033d6:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d113      	bne.n	8003406 <HAL_RTC_SetTime+0x6a>
  {
    assert_param(IS_RTC_HOUR24(sTime->Hours));
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033de:	68bb      	ldr	r3, [r7, #8]
 80033e0:	781b      	ldrb	r3, [r3, #0]
 80033e2:	461a      	mov	r2, r3
 80033e4:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 80033e8:	fb03 f202 	mul.w	r2, r3, r2
                              ((uint32_t)sTime->Minutes * 60U) + \
 80033ec:	68bb      	ldr	r3, [r7, #8]
 80033ee:	785b      	ldrb	r3, [r3, #1]
 80033f0:	4619      	mov	r1, r3
 80033f2:	460b      	mov	r3, r1
 80033f4:	011b      	lsls	r3, r3, #4
 80033f6:	1a5b      	subs	r3, r3, r1
 80033f8:	009b      	lsls	r3, r3, #2
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 80033fa:	4413      	add	r3, r2
                              ((uint32_t)sTime->Seconds));
 80033fc:	68ba      	ldr	r2, [r7, #8]
 80033fe:	7892      	ldrb	r2, [r2, #2]
    counter_time = (uint32_t)(((uint32_t)sTime->Hours * 3600U) + \
 8003400:	4413      	add	r3, r2
 8003402:	617b      	str	r3, [r7, #20]
 8003404:	e01e      	b.n	8003444 <HAL_RTC_SetTime+0xa8>
  {
    assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));

    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003406:	68bb      	ldr	r3, [r7, #8]
 8003408:	781b      	ldrb	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f000 fb71 	bl	8003af2 <RTC_Bcd2ToByte>
 8003410:	4603      	mov	r3, r0
 8003412:	461a      	mov	r2, r3
 8003414:	f44f 6361 	mov.w	r3, #3600	; 0xe10
 8003418:	fb03 f402 	mul.w	r4, r3, r2
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Minutes)) * 60U) + \
 800341c:	68bb      	ldr	r3, [r7, #8]
 800341e:	785b      	ldrb	r3, [r3, #1]
 8003420:	4618      	mov	r0, r3
 8003422:	f000 fb66 	bl	8003af2 <RTC_Bcd2ToByte>
 8003426:	4603      	mov	r3, r0
 8003428:	461a      	mov	r2, r3
 800342a:	4613      	mov	r3, r2
 800342c:	011b      	lsls	r3, r3, #4
 800342e:	1a9b      	subs	r3, r3, r2
 8003430:	009b      	lsls	r3, r3, #2
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003432:	441c      	add	r4, r3
                    ((uint32_t)(RTC_Bcd2ToByte(sTime->Seconds))));
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	789b      	ldrb	r3, [r3, #2]
 8003438:	4618      	mov	r0, r3
 800343a:	f000 fb5a 	bl	8003af2 <RTC_Bcd2ToByte>
 800343e:	4603      	mov	r3, r0
    counter_time = (((uint32_t)(RTC_Bcd2ToByte(sTime->Hours)) * 3600U) + \
 8003440:	4423      	add	r3, r4
 8003442:	617b      	str	r3, [r7, #20]
  }

  /* Write time counter in RTC registers */
  if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003444:	6979      	ldr	r1, [r7, #20]
 8003446:	68f8      	ldr	r0, [r7, #12]
 8003448:	f000 fa7f 	bl	800394a <RTC_WriteTimeCounter>
 800344c:	4603      	mov	r3, r0
 800344e:	2b00      	cmp	r3, #0
 8003450:	d007      	beq.n	8003462 <HAL_RTC_SetTime+0xc6>
  {
    /* Set RTC state */
    hrtc->State = HAL_RTC_STATE_ERROR;
 8003452:	68fb      	ldr	r3, [r7, #12]
 8003454:	2204      	movs	r2, #4
 8003456:	745a      	strb	r2, [r3, #17]

    /* Process Unlocked */
    __HAL_UNLOCK(hrtc);
 8003458:	68fb      	ldr	r3, [r7, #12]
 800345a:	2200      	movs	r2, #0
 800345c:	741a      	strb	r2, [r3, #16]

    return HAL_ERROR;
 800345e:	2301      	movs	r3, #1
 8003460:	e02f      	b.n	80034c2 <HAL_RTC_SetTime+0x126>
  }
  else
  {
    /* Clear Second and overflow flags */
    CLEAR_BIT(hrtc->Instance->CRL, (RTC_FLAG_SEC | RTC_FLAG_OW));
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	685a      	ldr	r2, [r3, #4]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f022 0205 	bic.w	r2, r2, #5
 8003470:	605a      	str	r2, [r3, #4]

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003472:	68f8      	ldr	r0, [r7, #12]
 8003474:	f000 fa90 	bl	8003998 <RTC_ReadAlarmCounter>
 8003478:	6138      	str	r0, [r7, #16]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003480:	d018      	beq.n	80034b4 <HAL_RTC_SetTime+0x118>
    {
      if (counter_alarm < counter_time)
 8003482:	693a      	ldr	r2, [r7, #16]
 8003484:	697b      	ldr	r3, [r7, #20]
 8003486:	429a      	cmp	r2, r3
 8003488:	d214      	bcs.n	80034b4 <HAL_RTC_SetTime+0x118>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800348a:	693b      	ldr	r3, [r7, #16]
 800348c:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 8003490:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 8003494:	613b      	str	r3, [r7, #16]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003496:	6939      	ldr	r1, [r7, #16]
 8003498:	68f8      	ldr	r0, [r7, #12]
 800349a:	f000 fa96 	bl	80039ca <RTC_WriteAlarmCounter>
 800349e:	4603      	mov	r3, r0
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d007      	beq.n	80034b4 <HAL_RTC_SetTime+0x118>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	2204      	movs	r2, #4
 80034a8:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	2200      	movs	r2, #0
 80034ae:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e006      	b.n	80034c2 <HAL_RTC_SetTime+0x126>
        }
      }
    }

    hrtc->State = HAL_RTC_STATE_READY;
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	2201      	movs	r2, #1
 80034b8:	745a      	strb	r2, [r3, #17]

    __HAL_UNLOCK(hrtc);
 80034ba:	68fb      	ldr	r3, [r7, #12]
 80034bc:	2200      	movs	r2, #0
 80034be:	741a      	strb	r2, [r3, #16]

    return HAL_OK;
 80034c0:	2300      	movs	r3, #0
  }
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	371c      	adds	r7, #28
 80034c6:	46bd      	mov	sp, r7
 80034c8:	bd90      	pop	{r4, r7, pc}
	...

080034cc <HAL_RTC_GetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 80034cc:	b580      	push	{r7, lr}
 80034ce:	b088      	sub	sp, #32
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	60f8      	str	r0, [r7, #12]
 80034d4:	60b9      	str	r1, [r7, #8]
 80034d6:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, days_elapsed = 0U, hours = 0U;
 80034d8:	2300      	movs	r3, #0
 80034da:	61bb      	str	r3, [r7, #24]
 80034dc:	2300      	movs	r3, #0
 80034de:	61fb      	str	r3, [r7, #28]
 80034e0:	2300      	movs	r3, #0
 80034e2:	617b      	str	r3, [r7, #20]
 80034e4:	2300      	movs	r3, #0
 80034e6:	613b      	str	r3, [r7, #16]

  /* Check input parameters */
  if ((hrtc == NULL) || (sTime == NULL))
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	2b00      	cmp	r3, #0
 80034ec:	d002      	beq.n	80034f4 <HAL_RTC_GetTime+0x28>
 80034ee:	68bb      	ldr	r3, [r7, #8]
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d101      	bne.n	80034f8 <HAL_RTC_GetTime+0x2c>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e0b5      	b.n	8003664 <HAL_RTC_GetTime+0x198>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Check if counter overflow occurred */
  if (__HAL_RTC_OVERFLOW_GET_FLAG(hrtc, RTC_FLAG_OW))
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	f003 0304 	and.w	r3, r3, #4
 8003502:	2b00      	cmp	r3, #0
 8003504:	d001      	beq.n	800350a <HAL_RTC_GetTime+0x3e>
  {
    return HAL_ERROR;
 8003506:	2301      	movs	r3, #1
 8003508:	e0ac      	b.n	8003664 <HAL_RTC_GetTime+0x198>
  }

  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 800350a:	68f8      	ldr	r0, [r7, #12]
 800350c:	f000 f9ed 	bl	80038ea <RTC_ReadTimeCounter>
 8003510:	61b8      	str	r0, [r7, #24]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 8003512:	69bb      	ldr	r3, [r7, #24]
 8003514:	4a55      	ldr	r2, [pc, #340]	; (800366c <HAL_RTC_GetTime+0x1a0>)
 8003516:	fba2 2303 	umull	r2, r3, r2, r3
 800351a:	0adb      	lsrs	r3, r3, #11
 800351c:	613b      	str	r3, [r7, #16]
  sTime->Minutes  = (uint8_t)((counter_time % 3600U) / 60U);
 800351e:	69ba      	ldr	r2, [r7, #24]
 8003520:	4b52      	ldr	r3, [pc, #328]	; (800366c <HAL_RTC_GetTime+0x1a0>)
 8003522:	fba3 1302 	umull	r1, r3, r3, r2
 8003526:	0adb      	lsrs	r3, r3, #11
 8003528:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800352c:	fb01 f303 	mul.w	r3, r1, r3
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	4a4f      	ldr	r2, [pc, #316]	; (8003670 <HAL_RTC_GetTime+0x1a4>)
 8003534:	fba2 2303 	umull	r2, r3, r2, r3
 8003538:	095b      	lsrs	r3, r3, #5
 800353a:	b2da      	uxtb	r2, r3
 800353c:	68bb      	ldr	r3, [r7, #8]
 800353e:	705a      	strb	r2, [r3, #1]
  sTime->Seconds  = (uint8_t)((counter_time % 3600U) % 60U);
 8003540:	69bb      	ldr	r3, [r7, #24]
 8003542:	4a4a      	ldr	r2, [pc, #296]	; (800366c <HAL_RTC_GetTime+0x1a0>)
 8003544:	fba2 1203 	umull	r1, r2, r2, r3
 8003548:	0ad2      	lsrs	r2, r2, #11
 800354a:	f44f 6161 	mov.w	r1, #3600	; 0xe10
 800354e:	fb01 f202 	mul.w	r2, r1, r2
 8003552:	1a9a      	subs	r2, r3, r2
 8003554:	4b46      	ldr	r3, [pc, #280]	; (8003670 <HAL_RTC_GetTime+0x1a4>)
 8003556:	fba3 1302 	umull	r1, r3, r3, r2
 800355a:	0959      	lsrs	r1, r3, #5
 800355c:	460b      	mov	r3, r1
 800355e:	011b      	lsls	r3, r3, #4
 8003560:	1a5b      	subs	r3, r3, r1
 8003562:	009b      	lsls	r3, r3, #2
 8003564:	1ad1      	subs	r1, r2, r3
 8003566:	b2ca      	uxtb	r2, r1
 8003568:	68bb      	ldr	r3, [r7, #8]
 800356a:	709a      	strb	r2, [r3, #2]

  if (hours >= 24U)
 800356c:	693b      	ldr	r3, [r7, #16]
 800356e:	2b17      	cmp	r3, #23
 8003570:	d955      	bls.n	800361e <HAL_RTC_GetTime+0x152>
  {
    /* Get number of days elapsed from last calculation */
    days_elapsed = (hours / 24U);
 8003572:	693b      	ldr	r3, [r7, #16]
 8003574:	4a3f      	ldr	r2, [pc, #252]	; (8003674 <HAL_RTC_GetTime+0x1a8>)
 8003576:	fba2 2303 	umull	r2, r3, r2, r3
 800357a:	091b      	lsrs	r3, r3, #4
 800357c:	617b      	str	r3, [r7, #20]

    /* Set Hours in RTC_TimeTypeDef structure*/
    sTime->Hours = (hours % 24U);
 800357e:	6939      	ldr	r1, [r7, #16]
 8003580:	4b3c      	ldr	r3, [pc, #240]	; (8003674 <HAL_RTC_GetTime+0x1a8>)
 8003582:	fba3 2301 	umull	r2, r3, r3, r1
 8003586:	091a      	lsrs	r2, r3, #4
 8003588:	4613      	mov	r3, r2
 800358a:	005b      	lsls	r3, r3, #1
 800358c:	4413      	add	r3, r2
 800358e:	00db      	lsls	r3, r3, #3
 8003590:	1aca      	subs	r2, r1, r3
 8003592:	b2d2      	uxtb	r2, r2
 8003594:	68bb      	ldr	r3, [r7, #8]
 8003596:	701a      	strb	r2, [r3, #0]

    /* Read Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f000 f9fd 	bl	8003998 <RTC_ReadAlarmCounter>
 800359e:	61f8      	str	r0, [r7, #28]

    /* Calculate remaining time to reach alarm (only if set and not yet expired)*/
    if ((counter_alarm != RTC_ALARM_RESETVALUE) && (counter_alarm > counter_time))
 80035a0:	69fb      	ldr	r3, [r7, #28]
 80035a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035a6:	d008      	beq.n	80035ba <HAL_RTC_GetTime+0xee>
 80035a8:	69fa      	ldr	r2, [r7, #28]
 80035aa:	69bb      	ldr	r3, [r7, #24]
 80035ac:	429a      	cmp	r2, r3
 80035ae:	d904      	bls.n	80035ba <HAL_RTC_GetTime+0xee>
    {
      counter_alarm -= counter_time;
 80035b0:	69fa      	ldr	r2, [r7, #28]
 80035b2:	69bb      	ldr	r3, [r7, #24]
 80035b4:	1ad3      	subs	r3, r2, r3
 80035b6:	61fb      	str	r3, [r7, #28]
 80035b8:	e002      	b.n	80035c0 <HAL_RTC_GetTime+0xf4>
    }
    else
    {
      /* In case of counter_alarm < counter_time */
      /* Alarm expiration already occurred but alarm not deactivated */
      counter_alarm = RTC_ALARM_RESETVALUE;
 80035ba:	f04f 33ff 	mov.w	r3, #4294967295
 80035be:	61fb      	str	r3, [r7, #28]
    }

    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= (days_elapsed * 24U * 3600U);
 80035c0:	697b      	ldr	r3, [r7, #20]
 80035c2:	4a2d      	ldr	r2, [pc, #180]	; (8003678 <HAL_RTC_GetTime+0x1ac>)
 80035c4:	fb02 f303 	mul.w	r3, r2, r3
 80035c8:	69ba      	ldr	r2, [r7, #24]
 80035ca:	1ad3      	subs	r3, r2, r3
 80035cc:	61bb      	str	r3, [r7, #24]

    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 80035ce:	69b9      	ldr	r1, [r7, #24]
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f000 f9ba 	bl	800394a <RTC_WriteTimeCounter>
 80035d6:	4603      	mov	r3, r0
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d001      	beq.n	80035e0 <HAL_RTC_GetTime+0x114>
    {
      return HAL_ERROR;
 80035dc:	2301      	movs	r3, #1
 80035de:	e041      	b.n	8003664 <HAL_RTC_GetTime+0x198>
    }

    /* Set updated alarm to be set */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 80035e0:	69fb      	ldr	r3, [r7, #28]
 80035e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80035e6:	d00c      	beq.n	8003602 <HAL_RTC_GetTime+0x136>
    {
      counter_alarm += counter_time;
 80035e8:	69fa      	ldr	r2, [r7, #28]
 80035ea:	69bb      	ldr	r3, [r7, #24]
 80035ec:	4413      	add	r3, r2
 80035ee:	61fb      	str	r3, [r7, #28]

      /* Write time counter in RTC registers */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80035f0:	69f9      	ldr	r1, [r7, #28]
 80035f2:	68f8      	ldr	r0, [r7, #12]
 80035f4:	f000 f9e9 	bl	80039ca <RTC_WriteAlarmCounter>
 80035f8:	4603      	mov	r3, r0
 80035fa:	2b00      	cmp	r3, #0
 80035fc:	d00a      	beq.n	8003614 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 80035fe:	2301      	movs	r3, #1
 8003600:	e030      	b.n	8003664 <HAL_RTC_GetTime+0x198>
      }
    }
    else
    {
      /* Alarm already occurred. Set it to reset values to avoid unexpected expiration */
      if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 8003602:	69f9      	ldr	r1, [r7, #28]
 8003604:	68f8      	ldr	r0, [r7, #12]
 8003606:	f000 f9e0 	bl	80039ca <RTC_WriteAlarmCounter>
 800360a:	4603      	mov	r3, r0
 800360c:	2b00      	cmp	r3, #0
 800360e:	d001      	beq.n	8003614 <HAL_RTC_GetTime+0x148>
      {
        return HAL_ERROR;
 8003610:	2301      	movs	r3, #1
 8003612:	e027      	b.n	8003664 <HAL_RTC_GetTime+0x198>
      }
    }

    /* Update date */
    RTC_DateUpdate(hrtc, days_elapsed);
 8003614:	6979      	ldr	r1, [r7, #20]
 8003616:	68f8      	ldr	r0, [r7, #12]
 8003618:	f000 fa88 	bl	8003b2c <RTC_DateUpdate>
 800361c:	e003      	b.n	8003626 <HAL_RTC_GetTime+0x15a>
  }
  else
  {
    sTime->Hours = hours;
 800361e:	693b      	ldr	r3, [r7, #16]
 8003620:	b2da      	uxtb	r2, r3
 8003622:	68bb      	ldr	r3, [r7, #8]
 8003624:	701a      	strb	r2, [r3, #0]
  }

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 8003626:	687b      	ldr	r3, [r7, #4]
 8003628:	2b00      	cmp	r3, #0
 800362a:	d01a      	beq.n	8003662 <HAL_RTC_GetTime+0x196>
  {
    /* Convert the time structure parameters to BCD format */
    sTime->Hours    = (uint8_t)RTC_ByteToBcd2(sTime->Hours);
 800362c:	68bb      	ldr	r3, [r7, #8]
 800362e:	781b      	ldrb	r3, [r3, #0]
 8003630:	4618      	mov	r0, r3
 8003632:	f000 fa41 	bl	8003ab8 <RTC_ByteToBcd2>
 8003636:	4603      	mov	r3, r0
 8003638:	461a      	mov	r2, r3
 800363a:	68bb      	ldr	r3, [r7, #8]
 800363c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes  = (uint8_t)RTC_ByteToBcd2(sTime->Minutes);
 800363e:	68bb      	ldr	r3, [r7, #8]
 8003640:	785b      	ldrb	r3, [r3, #1]
 8003642:	4618      	mov	r0, r3
 8003644:	f000 fa38 	bl	8003ab8 <RTC_ByteToBcd2>
 8003648:	4603      	mov	r3, r0
 800364a:	461a      	mov	r2, r3
 800364c:	68bb      	ldr	r3, [r7, #8]
 800364e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds  = (uint8_t)RTC_ByteToBcd2(sTime->Seconds);
 8003650:	68bb      	ldr	r3, [r7, #8]
 8003652:	789b      	ldrb	r3, [r3, #2]
 8003654:	4618      	mov	r0, r3
 8003656:	f000 fa2f 	bl	8003ab8 <RTC_ByteToBcd2>
 800365a:	4603      	mov	r3, r0
 800365c:	461a      	mov	r2, r3
 800365e:	68bb      	ldr	r3, [r7, #8]
 8003660:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8003662:	2300      	movs	r3, #0
}
 8003664:	4618      	mov	r0, r3
 8003666:	3720      	adds	r7, #32
 8003668:	46bd      	mov	sp, r7
 800366a:	bd80      	pop	{r7, pc}
 800366c:	91a2b3c5 	.word	0x91a2b3c5
 8003670:	88888889 	.word	0x88888889
 8003674:	aaaaaaab 	.word	0xaaaaaaab
 8003678:	00015180 	.word	0x00015180

0800367c <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 800367c:	b580      	push	{r7, lr}
 800367e:	b088      	sub	sp, #32
 8003680:	af00      	add	r7, sp, #0
 8003682:	60f8      	str	r0, [r7, #12]
 8003684:	60b9      	str	r1, [r7, #8]
 8003686:	607a      	str	r2, [r7, #4]
  uint32_t counter_time = 0U, counter_alarm = 0U, hours = 0U;
 8003688:	2300      	movs	r3, #0
 800368a:	61fb      	str	r3, [r7, #28]
 800368c:	2300      	movs	r3, #0
 800368e:	61bb      	str	r3, [r7, #24]
 8003690:	2300      	movs	r3, #0
 8003692:	617b      	str	r3, [r7, #20]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003694:	68fb      	ldr	r3, [r7, #12]
 8003696:	2b00      	cmp	r3, #0
 8003698:	d002      	beq.n	80036a0 <HAL_RTC_SetDate+0x24>
 800369a:	68bb      	ldr	r3, [r7, #8]
 800369c:	2b00      	cmp	r3, #0
 800369e:	d101      	bne.n	80036a4 <HAL_RTC_SetDate+0x28>
  {
    return HAL_ERROR;
 80036a0:	2301      	movs	r3, #1
 80036a2:	e097      	b.n	80037d4 <HAL_RTC_SetDate+0x158>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	7c1b      	ldrb	r3, [r3, #16]
 80036a8:	2b01      	cmp	r3, #1
 80036aa:	d101      	bne.n	80036b0 <HAL_RTC_SetDate+0x34>
 80036ac:	2302      	movs	r3, #2
 80036ae:	e091      	b.n	80037d4 <HAL_RTC_SetDate+0x158>
 80036b0:	68fb      	ldr	r3, [r7, #12]
 80036b2:	2201      	movs	r2, #1
 80036b4:	741a      	strb	r2, [r3, #16]

  hrtc->State = HAL_RTC_STATE_BUSY;
 80036b6:	68fb      	ldr	r3, [r7, #12]
 80036b8:	2202      	movs	r2, #2
 80036ba:	745a      	strb	r2, [r3, #17]

  if (Format == RTC_FORMAT_BIN)
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d10c      	bne.n	80036dc <HAL_RTC_SetDate+0x60>
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = sDate->Year;
 80036c2:	68bb      	ldr	r3, [r7, #8]
 80036c4:	78da      	ldrb	r2, [r3, #3]
 80036c6:	68fb      	ldr	r3, [r7, #12]
 80036c8:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = sDate->Month;
 80036ca:	68bb      	ldr	r3, [r7, #8]
 80036cc:	785a      	ldrb	r2, [r3, #1]
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = sDate->Date;
 80036d2:	68bb      	ldr	r3, [r7, #8]
 80036d4:	789a      	ldrb	r2, [r3, #2]
 80036d6:	68fb      	ldr	r3, [r7, #12]
 80036d8:	739a      	strb	r2, [r3, #14]
 80036da:	e01a      	b.n	8003712 <HAL_RTC_SetDate+0x96>
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    /* Change the current date */
    hrtc->DateToUpdate.Year  = RTC_Bcd2ToByte(sDate->Year);
 80036dc:	68bb      	ldr	r3, [r7, #8]
 80036de:	78db      	ldrb	r3, [r3, #3]
 80036e0:	4618      	mov	r0, r3
 80036e2:	f000 fa06 	bl	8003af2 <RTC_Bcd2ToByte>
 80036e6:	4603      	mov	r3, r0
 80036e8:	461a      	mov	r2, r3
 80036ea:	68fb      	ldr	r3, [r7, #12]
 80036ec:	73da      	strb	r2, [r3, #15]
    hrtc->DateToUpdate.Month = RTC_Bcd2ToByte(sDate->Month);
 80036ee:	68bb      	ldr	r3, [r7, #8]
 80036f0:	785b      	ldrb	r3, [r3, #1]
 80036f2:	4618      	mov	r0, r3
 80036f4:	f000 f9fd 	bl	8003af2 <RTC_Bcd2ToByte>
 80036f8:	4603      	mov	r3, r0
 80036fa:	461a      	mov	r2, r3
 80036fc:	68fb      	ldr	r3, [r7, #12]
 80036fe:	735a      	strb	r2, [r3, #13]
    hrtc->DateToUpdate.Date  = RTC_Bcd2ToByte(sDate->Date);
 8003700:	68bb      	ldr	r3, [r7, #8]
 8003702:	789b      	ldrb	r3, [r3, #2]
 8003704:	4618      	mov	r0, r3
 8003706:	f000 f9f4 	bl	8003af2 <RTC_Bcd2ToByte>
 800370a:	4603      	mov	r3, r0
 800370c:	461a      	mov	r2, r3
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	739a      	strb	r2, [r3, #14]
  }

  /* WeekDay set by user can be ignored because automatically calculated */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(hrtc->DateToUpdate.Year, hrtc->DateToUpdate.Month, hrtc->DateToUpdate.Date);
 8003712:	68fb      	ldr	r3, [r7, #12]
 8003714:	7bdb      	ldrb	r3, [r3, #15]
 8003716:	4618      	mov	r0, r3
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	7b59      	ldrb	r1, [r3, #13]
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	7b9b      	ldrb	r3, [r3, #14]
 8003720:	461a      	mov	r2, r3
 8003722:	f000 fadf 	bl	8003ce4 <RTC_WeekDayNum>
 8003726:	4603      	mov	r3, r0
 8003728:	461a      	mov	r2, r3
 800372a:	68fb      	ldr	r3, [r7, #12]
 800372c:	731a      	strb	r2, [r3, #12]
  sDate->WeekDay = hrtc->DateToUpdate.WeekDay;
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	7b1a      	ldrb	r2, [r3, #12]
 8003732:	68bb      	ldr	r3, [r7, #8]
 8003734:	701a      	strb	r2, [r3, #0]

  /* Reset time to be aligned on the same day */
  /* Read the time counter*/
  counter_time = RTC_ReadTimeCounter(hrtc);
 8003736:	68f8      	ldr	r0, [r7, #12]
 8003738:	f000 f8d7 	bl	80038ea <RTC_ReadTimeCounter>
 800373c:	61f8      	str	r0, [r7, #28]

  /* Fill the structure fields with the read parameters */
  hours = counter_time / 3600U;
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	4a26      	ldr	r2, [pc, #152]	; (80037dc <HAL_RTC_SetDate+0x160>)
 8003742:	fba2 2303 	umull	r2, r3, r2, r3
 8003746:	0adb      	lsrs	r3, r3, #11
 8003748:	617b      	str	r3, [r7, #20]
  if (hours > 24U)
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	2b18      	cmp	r3, #24
 800374e:	d93a      	bls.n	80037c6 <HAL_RTC_SetDate+0x14a>
  {
    /* Set updated time in decreasing counter by number of days elapsed */
    counter_time -= ((hours / 24U) * 24U * 3600U);
 8003750:	697b      	ldr	r3, [r7, #20]
 8003752:	4a23      	ldr	r2, [pc, #140]	; (80037e0 <HAL_RTC_SetDate+0x164>)
 8003754:	fba2 2303 	umull	r2, r3, r2, r3
 8003758:	091b      	lsrs	r3, r3, #4
 800375a:	4a22      	ldr	r2, [pc, #136]	; (80037e4 <HAL_RTC_SetDate+0x168>)
 800375c:	fb02 f303 	mul.w	r3, r2, r3
 8003760:	69fa      	ldr	r2, [r7, #28]
 8003762:	1ad3      	subs	r3, r2, r3
 8003764:	61fb      	str	r3, [r7, #28]
    /* Write time counter in RTC registers */
    if (RTC_WriteTimeCounter(hrtc, counter_time) != HAL_OK)
 8003766:	69f9      	ldr	r1, [r7, #28]
 8003768:	68f8      	ldr	r0, [r7, #12]
 800376a:	f000 f8ee 	bl	800394a <RTC_WriteTimeCounter>
 800376e:	4603      	mov	r3, r0
 8003770:	2b00      	cmp	r3, #0
 8003772:	d007      	beq.n	8003784 <HAL_RTC_SetDate+0x108>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8003774:	68fb      	ldr	r3, [r7, #12]
 8003776:	2204      	movs	r2, #4
 8003778:	745a      	strb	r2, [r3, #17]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	2200      	movs	r2, #0
 800377e:	741a      	strb	r2, [r3, #16]

      return HAL_ERROR;
 8003780:	2301      	movs	r3, #1
 8003782:	e027      	b.n	80037d4 <HAL_RTC_SetDate+0x158>
    }

    /* Read current Alarm counter in RTC registers */
    counter_alarm = RTC_ReadAlarmCounter(hrtc);
 8003784:	68f8      	ldr	r0, [r7, #12]
 8003786:	f000 f907 	bl	8003998 <RTC_ReadAlarmCounter>
 800378a:	61b8      	str	r0, [r7, #24]

    /* Set again alarm to match with new time if enabled */
    if (counter_alarm != RTC_ALARM_RESETVALUE)
 800378c:	69bb      	ldr	r3, [r7, #24]
 800378e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003792:	d018      	beq.n	80037c6 <HAL_RTC_SetDate+0x14a>
    {
      if (counter_alarm < counter_time)
 8003794:	69ba      	ldr	r2, [r7, #24]
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	429a      	cmp	r2, r3
 800379a:	d214      	bcs.n	80037c6 <HAL_RTC_SetDate+0x14a>
      {
        /* Add 1 day to alarm counter*/
        counter_alarm += (uint32_t)(24U * 3600U);
 800379c:	69bb      	ldr	r3, [r7, #24]
 800379e:	f503 33a8 	add.w	r3, r3, #86016	; 0x15000
 80037a2:	f503 73c0 	add.w	r3, r3, #384	; 0x180
 80037a6:	61bb      	str	r3, [r7, #24]

        /* Write new Alarm counter in RTC registers */
        if (RTC_WriteAlarmCounter(hrtc, counter_alarm) != HAL_OK)
 80037a8:	69b9      	ldr	r1, [r7, #24]
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 f90d 	bl	80039ca <RTC_WriteAlarmCounter>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d007      	beq.n	80037c6 <HAL_RTC_SetDate+0x14a>
        {
          /* Set RTC state */
          hrtc->State = HAL_RTC_STATE_ERROR;
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	2204      	movs	r2, #4
 80037ba:	745a      	strb	r2, [r3, #17]

          /* Process Unlocked */
          __HAL_UNLOCK(hrtc);
 80037bc:	68fb      	ldr	r3, [r7, #12]
 80037be:	2200      	movs	r2, #0
 80037c0:	741a      	strb	r2, [r3, #16]

          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e006      	b.n	80037d4 <HAL_RTC_SetDate+0x158>
    }


  }

  hrtc->State = HAL_RTC_STATE_READY ;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	2201      	movs	r2, #1
 80037ca:	745a      	strb	r2, [r3, #17]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	2200      	movs	r2, #0
 80037d0:	741a      	strb	r2, [r3, #16]

  return HAL_OK;
 80037d2:	2300      	movs	r3, #0
}
 80037d4:	4618      	mov	r0, r3
 80037d6:	3720      	adds	r7, #32
 80037d8:	46bd      	mov	sp, r7
 80037da:	bd80      	pop	{r7, pc}
 80037dc:	91a2b3c5 	.word	0x91a2b3c5
 80037e0:	aaaaaaab 	.word	0xaaaaaaab
 80037e4:	00015180 	.word	0x00015180

080037e8 <HAL_RTC_GetDate>:
  *            @arg RTC_FORMAT_BIN:  Binary data format
  *            @arg RTC_FORMAT_BCD:  BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 80037e8:	b580      	push	{r7, lr}
 80037ea:	b086      	sub	sp, #24
 80037ec:	af00      	add	r7, sp, #0
 80037ee:	60f8      	str	r0, [r7, #12]
 80037f0:	60b9      	str	r1, [r7, #8]
 80037f2:	607a      	str	r2, [r7, #4]
  RTC_TimeTypeDef stime = {0U};
 80037f4:	f107 0314 	add.w	r3, r7, #20
 80037f8:	2100      	movs	r1, #0
 80037fa:	460a      	mov	r2, r1
 80037fc:	801a      	strh	r2, [r3, #0]
 80037fe:	460a      	mov	r2, r1
 8003800:	709a      	strb	r2, [r3, #2]

  /* Check input parameters */
  if ((hrtc == NULL) || (sDate == NULL))
 8003802:	68fb      	ldr	r3, [r7, #12]
 8003804:	2b00      	cmp	r3, #0
 8003806:	d002      	beq.n	800380e <HAL_RTC_GetDate+0x26>
 8003808:	68bb      	ldr	r3, [r7, #8]
 800380a:	2b00      	cmp	r3, #0
 800380c:	d101      	bne.n	8003812 <HAL_RTC_GetDate+0x2a>
  {
    return HAL_ERROR;
 800380e:	2301      	movs	r3, #1
 8003810:	e03a      	b.n	8003888 <HAL_RTC_GetDate+0xa0>

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Call HAL_RTC_GetTime function to update date if counter higher than 24 hours */
  if (HAL_RTC_GetTime(hrtc, &stime, RTC_FORMAT_BIN) != HAL_OK)
 8003812:	f107 0314 	add.w	r3, r7, #20
 8003816:	2200      	movs	r2, #0
 8003818:	4619      	mov	r1, r3
 800381a:	68f8      	ldr	r0, [r7, #12]
 800381c:	f7ff fe56 	bl	80034cc <HAL_RTC_GetTime>
 8003820:	4603      	mov	r3, r0
 8003822:	2b00      	cmp	r3, #0
 8003824:	d001      	beq.n	800382a <HAL_RTC_GetDate+0x42>
  {
    return HAL_ERROR;
 8003826:	2301      	movs	r3, #1
 8003828:	e02e      	b.n	8003888 <HAL_RTC_GetDate+0xa0>
  }

  /* Fill the structure fields with the read parameters */
  sDate->WeekDay  = hrtc->DateToUpdate.WeekDay;
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	7b1a      	ldrb	r2, [r3, #12]
 800382e:	68bb      	ldr	r3, [r7, #8]
 8003830:	701a      	strb	r2, [r3, #0]
  sDate->Year     = hrtc->DateToUpdate.Year;
 8003832:	68fb      	ldr	r3, [r7, #12]
 8003834:	7bda      	ldrb	r2, [r3, #15]
 8003836:	68bb      	ldr	r3, [r7, #8]
 8003838:	70da      	strb	r2, [r3, #3]
  sDate->Month    = hrtc->DateToUpdate.Month;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	7b5a      	ldrb	r2, [r3, #13]
 800383e:	68bb      	ldr	r3, [r7, #8]
 8003840:	705a      	strb	r2, [r3, #1]
  sDate->Date     = hrtc->DateToUpdate.Date;
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	7b9a      	ldrb	r2, [r3, #14]
 8003846:	68bb      	ldr	r3, [r7, #8]
 8003848:	709a      	strb	r2, [r3, #2]

  /* Check the input parameters format */
  if (Format != RTC_FORMAT_BIN)
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	2b00      	cmp	r3, #0
 800384e:	d01a      	beq.n	8003886 <HAL_RTC_GetDate+0x9e>
  {
    /* Convert the date structure parameters to BCD format */
    sDate->Year   = (uint8_t)RTC_ByteToBcd2(sDate->Year);
 8003850:	68bb      	ldr	r3, [r7, #8]
 8003852:	78db      	ldrb	r3, [r3, #3]
 8003854:	4618      	mov	r0, r3
 8003856:	f000 f92f 	bl	8003ab8 <RTC_ByteToBcd2>
 800385a:	4603      	mov	r3, r0
 800385c:	461a      	mov	r2, r3
 800385e:	68bb      	ldr	r3, [r7, #8]
 8003860:	70da      	strb	r2, [r3, #3]
    sDate->Month  = (uint8_t)RTC_ByteToBcd2(sDate->Month);
 8003862:	68bb      	ldr	r3, [r7, #8]
 8003864:	785b      	ldrb	r3, [r3, #1]
 8003866:	4618      	mov	r0, r3
 8003868:	f000 f926 	bl	8003ab8 <RTC_ByteToBcd2>
 800386c:	4603      	mov	r3, r0
 800386e:	461a      	mov	r2, r3
 8003870:	68bb      	ldr	r3, [r7, #8]
 8003872:	705a      	strb	r2, [r3, #1]
    sDate->Date   = (uint8_t)RTC_ByteToBcd2(sDate->Date);
 8003874:	68bb      	ldr	r3, [r7, #8]
 8003876:	789b      	ldrb	r3, [r3, #2]
 8003878:	4618      	mov	r0, r3
 800387a:	f000 f91d 	bl	8003ab8 <RTC_ByteToBcd2>
 800387e:	4603      	mov	r3, r0
 8003880:	461a      	mov	r2, r3
 8003882:	68bb      	ldr	r3, [r7, #8]
 8003884:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 8003886:	2300      	movs	r3, #0
}
 8003888:	4618      	mov	r0, r3
 800388a:	3718      	adds	r7, #24
 800388c:	46bd      	mov	sp, r7
 800388e:	bd80      	pop	{r7, pc}

08003890 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	b084      	sub	sp, #16
 8003894:	af00      	add	r7, sp, #0
 8003896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003898:	2300      	movs	r3, #0
 800389a:	60fb      	str	r3, [r7, #12]

  /* Check input parameters */
  if (hrtc == NULL)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d101      	bne.n	80038a6 <HAL_RTC_WaitForSynchro+0x16>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e01d      	b.n	80038e2 <HAL_RTC_WaitForSynchro+0x52>
  }

  /* Clear RSF flag */
  CLEAR_BIT(hrtc->Instance->CRL, RTC_FLAG_RSF);
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	685a      	ldr	r2, [r3, #4]
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	f022 0208 	bic.w	r2, r2, #8
 80038b4:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 80038b6:	f7fe fc29 	bl	800210c <HAL_GetTick>
 80038ba:	60f8      	str	r0, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038bc:	e009      	b.n	80038d2 <HAL_RTC_WaitForSynchro+0x42>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 80038be:	f7fe fc25 	bl	800210c <HAL_GetTick>
 80038c2:	4602      	mov	r2, r0
 80038c4:	68fb      	ldr	r3, [r7, #12]
 80038c6:	1ad3      	subs	r3, r2, r3
 80038c8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80038cc:	d901      	bls.n	80038d2 <HAL_RTC_WaitForSynchro+0x42>
    {
      return HAL_TIMEOUT;
 80038ce:	2303      	movs	r3, #3
 80038d0:	e007      	b.n	80038e2 <HAL_RTC_WaitForSynchro+0x52>
  while ((hrtc->Instance->CRL & RTC_FLAG_RSF) == (uint32_t)RESET)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	685b      	ldr	r3, [r3, #4]
 80038d8:	f003 0308 	and.w	r3, r3, #8
 80038dc:	2b00      	cmp	r3, #0
 80038de:	d0ee      	beq.n	80038be <HAL_RTC_WaitForSynchro+0x2e>
    }
  }

  return HAL_OK;
 80038e0:	2300      	movs	r3, #0
}
 80038e2:	4618      	mov	r0, r3
 80038e4:	3710      	adds	r7, #16
 80038e6:	46bd      	mov	sp, r7
 80038e8:	bd80      	pop	{r7, pc}

080038ea <RTC_ReadTimeCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadTimeCounter(RTC_HandleTypeDef *hrtc)
{
 80038ea:	b480      	push	{r7}
 80038ec:	b087      	sub	sp, #28
 80038ee:	af00      	add	r7, sp, #0
 80038f0:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, high2 = 0U, low = 0U;
 80038f2:	2300      	movs	r3, #0
 80038f4:	827b      	strh	r3, [r7, #18]
 80038f6:	2300      	movs	r3, #0
 80038f8:	823b      	strh	r3, [r7, #16]
 80038fa:	2300      	movs	r3, #0
 80038fc:	81fb      	strh	r3, [r7, #14]
  uint32_t timecounter = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	617b      	str	r3, [r7, #20]

  high1 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	699b      	ldr	r3, [r3, #24]
 8003908:	827b      	strh	r3, [r7, #18]
  low   = READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	69db      	ldr	r3, [r3, #28]
 8003910:	81fb      	strh	r3, [r7, #14]
  high2 = READ_REG(hrtc->Instance->CNTH & RTC_CNTH_RTC_CNT);
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	699b      	ldr	r3, [r3, #24]
 8003918:	823b      	strh	r3, [r7, #16]

  if (high1 != high2)
 800391a:	8a7a      	ldrh	r2, [r7, #18]
 800391c:	8a3b      	ldrh	r3, [r7, #16]
 800391e:	429a      	cmp	r2, r3
 8003920:	d008      	beq.n	8003934 <RTC_ReadTimeCounter+0x4a>
  {
    /* In this case the counter roll over during reading of CNTL and CNTH registers,
       read again CNTL register then return the counter value */
    timecounter = (((uint32_t) high2 << 16U) | READ_REG(hrtc->Instance->CNTL & RTC_CNTL_RTC_CNT));
 8003922:	8a3b      	ldrh	r3, [r7, #16]
 8003924:	041a      	lsls	r2, r3, #16
 8003926:	687b      	ldr	r3, [r7, #4]
 8003928:	681b      	ldr	r3, [r3, #0]
 800392a:	69db      	ldr	r3, [r3, #28]
 800392c:	b29b      	uxth	r3, r3
 800392e:	4313      	orrs	r3, r2
 8003930:	617b      	str	r3, [r7, #20]
 8003932:	e004      	b.n	800393e <RTC_ReadTimeCounter+0x54>
  }
  else
  {
    /* No counter roll over during reading of CNTL and CNTH registers, counter
       value is equal to first value of CNTL and CNTH */
    timecounter = (((uint32_t) high1 << 16U) | low);
 8003934:	8a7b      	ldrh	r3, [r7, #18]
 8003936:	041a      	lsls	r2, r3, #16
 8003938:	89fb      	ldrh	r3, [r7, #14]
 800393a:	4313      	orrs	r3, r2
 800393c:	617b      	str	r3, [r7, #20]
  }

  return timecounter;
 800393e:	697b      	ldr	r3, [r7, #20]
}
 8003940:	4618      	mov	r0, r3
 8003942:	371c      	adds	r7, #28
 8003944:	46bd      	mov	sp, r7
 8003946:	bc80      	pop	{r7}
 8003948:	4770      	bx	lr

0800394a <RTC_WriteTimeCounter>:
  *                the configuration information for RTC.
  * @param  TimeCounter: Counter to write in RTC_CNT registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteTimeCounter(RTC_HandleTypeDef *hrtc, uint32_t TimeCounter)
{
 800394a:	b580      	push	{r7, lr}
 800394c:	b084      	sub	sp, #16
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
 8003952:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003954:	2300      	movs	r3, #0
 8003956:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 8003958:	6878      	ldr	r0, [r7, #4]
 800395a:	f000 f85d 	bl	8003a18 <RTC_EnterInitMode>
 800395e:	4603      	mov	r3, r0
 8003960:	2b00      	cmp	r3, #0
 8003962:	d002      	beq.n	800396a <RTC_WriteTimeCounter+0x20>
  {
    status = HAL_ERROR;
 8003964:	2301      	movs	r3, #1
 8003966:	73fb      	strb	r3, [r7, #15]
 8003968:	e011      	b.n	800398e <RTC_WriteTimeCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->CNTH, (TimeCounter >> 16U));
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	681b      	ldr	r3, [r3, #0]
 800396e:	683a      	ldr	r2, [r7, #0]
 8003970:	0c12      	lsrs	r2, r2, #16
 8003972:	619a      	str	r2, [r3, #24]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->CNTL, (TimeCounter & RTC_CNTL_RTC_CNT));
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	683a      	ldr	r2, [r7, #0]
 800397a:	b292      	uxth	r2, r2
 800397c:	61da      	str	r2, [r3, #28]

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 800397e:	6878      	ldr	r0, [r7, #4]
 8003980:	f000 f872 	bl	8003a68 <RTC_ExitInitMode>
 8003984:	4603      	mov	r3, r0
 8003986:	2b00      	cmp	r3, #0
 8003988:	d001      	beq.n	800398e <RTC_WriteTimeCounter+0x44>
    {
      status = HAL_ERROR;
 800398a:	2301      	movs	r3, #1
 800398c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 800398e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003990:	4618      	mov	r0, r3
 8003992:	3710      	adds	r7, #16
 8003994:	46bd      	mov	sp, r7
 8003996:	bd80      	pop	{r7, pc}

08003998 <RTC_ReadAlarmCounter>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval Time counter
  */
static uint32_t RTC_ReadAlarmCounter(RTC_HandleTypeDef *hrtc)
{
 8003998:	b480      	push	{r7}
 800399a:	b085      	sub	sp, #20
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
  uint16_t high1 = 0U, low = 0U;
 80039a0:	2300      	movs	r3, #0
 80039a2:	81fb      	strh	r3, [r7, #14]
 80039a4:	2300      	movs	r3, #0
 80039a6:	81bb      	strh	r3, [r7, #12]

  high1 = READ_REG(hrtc->Instance->ALRH & RTC_CNTH_RTC_CNT);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	6a1b      	ldr	r3, [r3, #32]
 80039ae:	81fb      	strh	r3, [r7, #14]
  low   = READ_REG(hrtc->Instance->ALRL & RTC_CNTL_RTC_CNT);
 80039b0:	687b      	ldr	r3, [r7, #4]
 80039b2:	681b      	ldr	r3, [r3, #0]
 80039b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039b6:	81bb      	strh	r3, [r7, #12]

  return (((uint32_t) high1 << 16U) | low);
 80039b8:	89fb      	ldrh	r3, [r7, #14]
 80039ba:	041a      	lsls	r2, r3, #16
 80039bc:	89bb      	ldrh	r3, [r7, #12]
 80039be:	4313      	orrs	r3, r2
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	3714      	adds	r7, #20
 80039c4:	46bd      	mov	sp, r7
 80039c6:	bc80      	pop	{r7}
 80039c8:	4770      	bx	lr

080039ca <RTC_WriteAlarmCounter>:
  *                the configuration information for RTC.
  * @param  AlarmCounter: Counter to write in RTC_ALR registers
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_WriteAlarmCounter(RTC_HandleTypeDef *hrtc, uint32_t AlarmCounter)
{
 80039ca:	b580      	push	{r7, lr}
 80039cc:	b084      	sub	sp, #16
 80039ce:	af00      	add	r7, sp, #0
 80039d0:	6078      	str	r0, [r7, #4]
 80039d2:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80039d4:	2300      	movs	r3, #0
 80039d6:	73fb      	strb	r3, [r7, #15]

  /* Set Initialization mode */
  if (RTC_EnterInitMode(hrtc) != HAL_OK)
 80039d8:	6878      	ldr	r0, [r7, #4]
 80039da:	f000 f81d 	bl	8003a18 <RTC_EnterInitMode>
 80039de:	4603      	mov	r3, r0
 80039e0:	2b00      	cmp	r3, #0
 80039e2:	d002      	beq.n	80039ea <RTC_WriteAlarmCounter+0x20>
  {
    status = HAL_ERROR;
 80039e4:	2301      	movs	r3, #1
 80039e6:	73fb      	strb	r3, [r7, #15]
 80039e8:	e011      	b.n	8003a0e <RTC_WriteAlarmCounter+0x44>
  }
  else
  {
    /* Set RTC COUNTER MSB word */
    WRITE_REG(hrtc->Instance->ALRH, (AlarmCounter >> 16U));
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	683a      	ldr	r2, [r7, #0]
 80039f0:	0c12      	lsrs	r2, r2, #16
 80039f2:	621a      	str	r2, [r3, #32]
    /* Set RTC COUNTER LSB word */
    WRITE_REG(hrtc->Instance->ALRL, (AlarmCounter & RTC_ALRL_RTC_ALR));
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	683a      	ldr	r2, [r7, #0]
 80039fa:	b292      	uxth	r2, r2
 80039fc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Wait for synchro */
    if (RTC_ExitInitMode(hrtc) != HAL_OK)
 80039fe:	6878      	ldr	r0, [r7, #4]
 8003a00:	f000 f832 	bl	8003a68 <RTC_ExitInitMode>
 8003a04:	4603      	mov	r3, r0
 8003a06:	2b00      	cmp	r3, #0
 8003a08:	d001      	beq.n	8003a0e <RTC_WriteAlarmCounter+0x44>
    {
      status = HAL_ERROR;
 8003a0a:	2301      	movs	r3, #1
 8003a0c:	73fb      	strb	r3, [r7, #15]
    }
  }

  return status;
 8003a0e:	7bfb      	ldrb	r3, [r7, #15]
}
 8003a10:	4618      	mov	r0, r3
 8003a12:	3710      	adds	r7, #16
 8003a14:	46bd      	mov	sp, r7
 8003a16:	bd80      	pop	{r7, pc}

08003a18 <RTC_EnterInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a18:	b580      	push	{r7, lr}
 8003a1a:	b084      	sub	sp, #16
 8003a1c:	af00      	add	r7, sp, #0
 8003a1e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a20:	2300      	movs	r3, #0
 8003a22:	60fb      	str	r3, [r7, #12]

  tickstart = HAL_GetTick();
 8003a24:	f7fe fb72 	bl	800210c <HAL_GetTick>
 8003a28:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a2a:	e009      	b.n	8003a40 <RTC_EnterInitMode+0x28>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a2c:	f7fe fb6e 	bl	800210c <HAL_GetTick>
 8003a30:	4602      	mov	r2, r0
 8003a32:	68fb      	ldr	r3, [r7, #12]
 8003a34:	1ad3      	subs	r3, r2, r3
 8003a36:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a3a:	d901      	bls.n	8003a40 <RTC_EnterInitMode+0x28>
    {
      return HAL_TIMEOUT;
 8003a3c:	2303      	movs	r3, #3
 8003a3e:	e00f      	b.n	8003a60 <RTC_EnterInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	f003 0320 	and.w	r3, r3, #32
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d0ee      	beq.n	8003a2c <RTC_EnterInitMode+0x14>
    }
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	685a      	ldr	r2, [r3, #4]
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	681b      	ldr	r3, [r3, #0]
 8003a58:	f042 0210 	orr.w	r2, r2, #16
 8003a5c:	605a      	str	r2, [r3, #4]


  return HAL_OK;
 8003a5e:	2300      	movs	r3, #0
}
 8003a60:	4618      	mov	r0, r3
 8003a62:	3710      	adds	r7, #16
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}

08003a68 <RTC_ExitInitMode>:
  * @param  hrtc   pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
static HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	b084      	sub	sp, #16
 8003a6c:	af00      	add	r7, sp, #0
 8003a6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8003a70:	2300      	movs	r3, #0
 8003a72:	60fb      	str	r3, [r7, #12]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	685a      	ldr	r2, [r3, #4]
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f022 0210 	bic.w	r2, r2, #16
 8003a82:	605a      	str	r2, [r3, #4]

  tickstart = HAL_GetTick();
 8003a84:	f7fe fb42 	bl	800210c <HAL_GetTick>
 8003a88:	60f8      	str	r0, [r7, #12]
  /* Wait till RTC is in INIT state and if Time out is reached exit */
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003a8a:	e009      	b.n	8003aa0 <RTC_ExitInitMode+0x38>
  {
    if ((HAL_GetTick() - tickstart) >  RTC_TIMEOUT_VALUE)
 8003a8c:	f7fe fb3e 	bl	800210c <HAL_GetTick>
 8003a90:	4602      	mov	r2, r0
 8003a92:	68fb      	ldr	r3, [r7, #12]
 8003a94:	1ad3      	subs	r3, r2, r3
 8003a96:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003a9a:	d901      	bls.n	8003aa0 <RTC_ExitInitMode+0x38>
    {
      return HAL_TIMEOUT;
 8003a9c:	2303      	movs	r3, #3
 8003a9e:	e007      	b.n	8003ab0 <RTC_ExitInitMode+0x48>
  while ((hrtc->Instance->CRL & RTC_CRL_RTOFF) == (uint32_t)RESET)
 8003aa0:	687b      	ldr	r3, [r7, #4]
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	685b      	ldr	r3, [r3, #4]
 8003aa6:	f003 0320 	and.w	r3, r3, #32
 8003aaa:	2b00      	cmp	r3, #0
 8003aac:	d0ee      	beq.n	8003a8c <RTC_ExitInitMode+0x24>
    }
  }

  return HAL_OK;
 8003aae:	2300      	movs	r3, #0
}
 8003ab0:	4618      	mov	r0, r3
 8003ab2:	3710      	adds	r7, #16
 8003ab4:	46bd      	mov	sp, r7
 8003ab6:	bd80      	pop	{r7, pc}

08003ab8 <RTC_ByteToBcd2>:
  * @brief  Converts a 2 digit decimal to BCD format.
  * @param  Value: Byte to be converted
  * @retval Converted byte
  */
static uint8_t RTC_ByteToBcd2(uint8_t Value)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b085      	sub	sp, #20
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	4603      	mov	r3, r0
 8003ac0:	71fb      	strb	r3, [r7, #7]
  uint32_t bcdhigh = 0U;
 8003ac2:	2300      	movs	r3, #0
 8003ac4:	60fb      	str	r3, [r7, #12]

  while (Value >= 10U)
 8003ac6:	e005      	b.n	8003ad4 <RTC_ByteToBcd2+0x1c>
  {
    bcdhigh++;
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	3301      	adds	r3, #1
 8003acc:	60fb      	str	r3, [r7, #12]
    Value -= 10U;
 8003ace:	79fb      	ldrb	r3, [r7, #7]
 8003ad0:	3b0a      	subs	r3, #10
 8003ad2:	71fb      	strb	r3, [r7, #7]
  while (Value >= 10U)
 8003ad4:	79fb      	ldrb	r3, [r7, #7]
 8003ad6:	2b09      	cmp	r3, #9
 8003ad8:	d8f6      	bhi.n	8003ac8 <RTC_ByteToBcd2+0x10>
  }

  return ((uint8_t)(bcdhigh << 4U) | Value);
 8003ada:	68fb      	ldr	r3, [r7, #12]
 8003adc:	b2db      	uxtb	r3, r3
 8003ade:	011b      	lsls	r3, r3, #4
 8003ae0:	b2da      	uxtb	r2, r3
 8003ae2:	79fb      	ldrb	r3, [r7, #7]
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	b2db      	uxtb	r3, r3
}
 8003ae8:	4618      	mov	r0, r3
 8003aea:	3714      	adds	r7, #20
 8003aec:	46bd      	mov	sp, r7
 8003aee:	bc80      	pop	{r7}
 8003af0:	4770      	bx	lr

08003af2 <RTC_Bcd2ToByte>:
  * @brief  Converts from 2 digit BCD to Binary.
  * @param  Value: BCD value to be converted
  * @retval Converted word
  */
static uint8_t RTC_Bcd2ToByte(uint8_t Value)
{
 8003af2:	b480      	push	{r7}
 8003af4:	b085      	sub	sp, #20
 8003af6:	af00      	add	r7, sp, #0
 8003af8:	4603      	mov	r3, r0
 8003afa:	71fb      	strb	r3, [r7, #7]
  uint32_t tmp = 0U;
 8003afc:	2300      	movs	r3, #0
 8003afe:	60fb      	str	r3, [r7, #12]
  tmp = ((uint8_t)(Value & (uint8_t)0xF0) >> (uint8_t)0x4) * 10U;
 8003b00:	79fb      	ldrb	r3, [r7, #7]
 8003b02:	091b      	lsrs	r3, r3, #4
 8003b04:	b2db      	uxtb	r3, r3
 8003b06:	461a      	mov	r2, r3
 8003b08:	4613      	mov	r3, r2
 8003b0a:	009b      	lsls	r3, r3, #2
 8003b0c:	4413      	add	r3, r2
 8003b0e:	005b      	lsls	r3, r3, #1
 8003b10:	60fb      	str	r3, [r7, #12]
  return (tmp + (Value & (uint8_t)0x0F));
 8003b12:	79fb      	ldrb	r3, [r7, #7]
 8003b14:	f003 030f 	and.w	r3, r3, #15
 8003b18:	b2da      	uxtb	r2, r3
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	b2db      	uxtb	r3, r3
 8003b1e:	4413      	add	r3, r2
 8003b20:	b2db      	uxtb	r3, r3
}
 8003b22:	4618      	mov	r0, r3
 8003b24:	3714      	adds	r7, #20
 8003b26:	46bd      	mov	sp, r7
 8003b28:	bc80      	pop	{r7}
 8003b2a:	4770      	bx	lr

08003b2c <RTC_DateUpdate>:
  *                the configuration information for RTC.
  * @param  DayElapsed: Number of days elapsed from last date update
  * @retval None
  */
static void RTC_DateUpdate(RTC_HandleTypeDef *hrtc, uint32_t DayElapsed)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	b086      	sub	sp, #24
 8003b30:	af00      	add	r7, sp, #0
 8003b32:	6078      	str	r0, [r7, #4]
 8003b34:	6039      	str	r1, [r7, #0]
  uint32_t year = 0U, month = 0U, day = 0U;
 8003b36:	2300      	movs	r3, #0
 8003b38:	617b      	str	r3, [r7, #20]
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	613b      	str	r3, [r7, #16]
 8003b3e:	2300      	movs	r3, #0
 8003b40:	60fb      	str	r3, [r7, #12]
  uint32_t loop = 0U;
 8003b42:	2300      	movs	r3, #0
 8003b44:	60bb      	str	r3, [r7, #8]

  /* Get the current year*/
  year = hrtc->DateToUpdate.Year;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	7bdb      	ldrb	r3, [r3, #15]
 8003b4a:	617b      	str	r3, [r7, #20]

  /* Get the current month and day */
  month = hrtc->DateToUpdate.Month;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	7b5b      	ldrb	r3, [r3, #13]
 8003b50:	613b      	str	r3, [r7, #16]
  day = hrtc->DateToUpdate.Date;
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	7b9b      	ldrb	r3, [r3, #14]
 8003b56:	60fb      	str	r3, [r7, #12]

  for (loop = 0U; loop < DayElapsed; loop++)
 8003b58:	2300      	movs	r3, #0
 8003b5a:	60bb      	str	r3, [r7, #8]
 8003b5c:	e06f      	b.n	8003c3e <RTC_DateUpdate+0x112>
  {
    if ((month == 1U) || (month == 3U) || (month == 5U) || (month == 7U) || \
 8003b5e:	693b      	ldr	r3, [r7, #16]
 8003b60:	2b01      	cmp	r3, #1
 8003b62:	d011      	beq.n	8003b88 <RTC_DateUpdate+0x5c>
 8003b64:	693b      	ldr	r3, [r7, #16]
 8003b66:	2b03      	cmp	r3, #3
 8003b68:	d00e      	beq.n	8003b88 <RTC_DateUpdate+0x5c>
 8003b6a:	693b      	ldr	r3, [r7, #16]
 8003b6c:	2b05      	cmp	r3, #5
 8003b6e:	d00b      	beq.n	8003b88 <RTC_DateUpdate+0x5c>
 8003b70:	693b      	ldr	r3, [r7, #16]
 8003b72:	2b07      	cmp	r3, #7
 8003b74:	d008      	beq.n	8003b88 <RTC_DateUpdate+0x5c>
 8003b76:	693b      	ldr	r3, [r7, #16]
 8003b78:	2b08      	cmp	r3, #8
 8003b7a:	d005      	beq.n	8003b88 <RTC_DateUpdate+0x5c>
        (month == 8U) || (month == 10U) || (month == 12U))
 8003b7c:	693b      	ldr	r3, [r7, #16]
 8003b7e:	2b0a      	cmp	r3, #10
 8003b80:	d002      	beq.n	8003b88 <RTC_DateUpdate+0x5c>
 8003b82:	693b      	ldr	r3, [r7, #16]
 8003b84:	2b0c      	cmp	r3, #12
 8003b86:	d117      	bne.n	8003bb8 <RTC_DateUpdate+0x8c>
    {
      if (day < 31U)
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2b1e      	cmp	r3, #30
 8003b8c:	d803      	bhi.n	8003b96 <RTC_DateUpdate+0x6a>
      {
        day++;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	3301      	adds	r3, #1
 8003b92:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003b94:	e050      	b.n	8003c38 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 31 */
      else
      {
        if (month != 12U)
 8003b96:	693b      	ldr	r3, [r7, #16]
 8003b98:	2b0c      	cmp	r3, #12
 8003b9a:	d005      	beq.n	8003ba8 <RTC_DateUpdate+0x7c>
        {
          month++;
 8003b9c:	693b      	ldr	r3, [r7, #16]
 8003b9e:	3301      	adds	r3, #1
 8003ba0:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	60fb      	str	r3, [r7, #12]
      if (day < 31U)
 8003ba6:	e047      	b.n	8003c38 <RTC_DateUpdate+0x10c>
        }
        /* Date structure member: day = 31 & month =12 */
        else
        {
          month = 1U;
 8003ba8:	2301      	movs	r3, #1
 8003baa:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003bac:	2301      	movs	r3, #1
 8003bae:	60fb      	str	r3, [r7, #12]
          year++;
 8003bb0:	697b      	ldr	r3, [r7, #20]
 8003bb2:	3301      	adds	r3, #1
 8003bb4:	617b      	str	r3, [r7, #20]
      if (day < 31U)
 8003bb6:	e03f      	b.n	8003c38 <RTC_DateUpdate+0x10c>
        }
      }
    }
    else if ((month == 4U) || (month == 6U) || (month == 9U) || (month == 11U))
 8003bb8:	693b      	ldr	r3, [r7, #16]
 8003bba:	2b04      	cmp	r3, #4
 8003bbc:	d008      	beq.n	8003bd0 <RTC_DateUpdate+0xa4>
 8003bbe:	693b      	ldr	r3, [r7, #16]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d005      	beq.n	8003bd0 <RTC_DateUpdate+0xa4>
 8003bc4:	693b      	ldr	r3, [r7, #16]
 8003bc6:	2b09      	cmp	r3, #9
 8003bc8:	d002      	beq.n	8003bd0 <RTC_DateUpdate+0xa4>
 8003bca:	693b      	ldr	r3, [r7, #16]
 8003bcc:	2b0b      	cmp	r3, #11
 8003bce:	d10c      	bne.n	8003bea <RTC_DateUpdate+0xbe>
    {
      if (day < 30U)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	2b1d      	cmp	r3, #29
 8003bd4:	d803      	bhi.n	8003bde <RTC_DateUpdate+0xb2>
      {
        day++;
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	3301      	adds	r3, #1
 8003bda:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003bdc:	e02c      	b.n	8003c38 <RTC_DateUpdate+0x10c>
      }
      /* Date structure member: day = 30 */
      else
      {
        month++;
 8003bde:	693b      	ldr	r3, [r7, #16]
 8003be0:	3301      	adds	r3, #1
 8003be2:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003be4:	2301      	movs	r3, #1
 8003be6:	60fb      	str	r3, [r7, #12]
      if (day < 30U)
 8003be8:	e026      	b.n	8003c38 <RTC_DateUpdate+0x10c>
      }
    }
    else if (month == 2U)
 8003bea:	693b      	ldr	r3, [r7, #16]
 8003bec:	2b02      	cmp	r3, #2
 8003bee:	d123      	bne.n	8003c38 <RTC_DateUpdate+0x10c>
    {
      if (day < 28U)
 8003bf0:	68fb      	ldr	r3, [r7, #12]
 8003bf2:	2b1b      	cmp	r3, #27
 8003bf4:	d803      	bhi.n	8003bfe <RTC_DateUpdate+0xd2>
      {
        day++;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	3301      	adds	r3, #1
 8003bfa:	60fb      	str	r3, [r7, #12]
 8003bfc:	e01c      	b.n	8003c38 <RTC_DateUpdate+0x10c>
      }
      else if (day == 28U)
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	2b1c      	cmp	r3, #28
 8003c02:	d111      	bne.n	8003c28 <RTC_DateUpdate+0xfc>
      {
        /* Leap year */
        if (RTC_IsLeapYear(year))
 8003c04:	697b      	ldr	r3, [r7, #20]
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	4618      	mov	r0, r3
 8003c0a:	f000 f839 	bl	8003c80 <RTC_IsLeapYear>
 8003c0e:	4603      	mov	r3, r0
 8003c10:	2b00      	cmp	r3, #0
 8003c12:	d003      	beq.n	8003c1c <RTC_DateUpdate+0xf0>
        {
          day++;
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	3301      	adds	r3, #1
 8003c18:	60fb      	str	r3, [r7, #12]
 8003c1a:	e00d      	b.n	8003c38 <RTC_DateUpdate+0x10c>
        }
        else
        {
          month++;
 8003c1c:	693b      	ldr	r3, [r7, #16]
 8003c1e:	3301      	adds	r3, #1
 8003c20:	613b      	str	r3, [r7, #16]
          day = 1U;
 8003c22:	2301      	movs	r3, #1
 8003c24:	60fb      	str	r3, [r7, #12]
 8003c26:	e007      	b.n	8003c38 <RTC_DateUpdate+0x10c>
        }
      }
      else if (day == 29U)
 8003c28:	68fb      	ldr	r3, [r7, #12]
 8003c2a:	2b1d      	cmp	r3, #29
 8003c2c:	d104      	bne.n	8003c38 <RTC_DateUpdate+0x10c>
      {
        month++;
 8003c2e:	693b      	ldr	r3, [r7, #16]
 8003c30:	3301      	adds	r3, #1
 8003c32:	613b      	str	r3, [r7, #16]
        day = 1U;
 8003c34:	2301      	movs	r3, #1
 8003c36:	60fb      	str	r3, [r7, #12]
  for (loop = 0U; loop < DayElapsed; loop++)
 8003c38:	68bb      	ldr	r3, [r7, #8]
 8003c3a:	3301      	adds	r3, #1
 8003c3c:	60bb      	str	r3, [r7, #8]
 8003c3e:	68ba      	ldr	r2, [r7, #8]
 8003c40:	683b      	ldr	r3, [r7, #0]
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d38b      	bcc.n	8003b5e <RTC_DateUpdate+0x32>
      }
    }
  }

  /* Update year */
  hrtc->DateToUpdate.Year = year;
 8003c46:	697b      	ldr	r3, [r7, #20]
 8003c48:	b2da      	uxtb	r2, r3
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	73da      	strb	r2, [r3, #15]

  /* Update day and month */
  hrtc->DateToUpdate.Month = month;
 8003c4e:	693b      	ldr	r3, [r7, #16]
 8003c50:	b2da      	uxtb	r2, r3
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	735a      	strb	r2, [r3, #13]
  hrtc->DateToUpdate.Date = day;
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	b2da      	uxtb	r2, r3
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	739a      	strb	r2, [r3, #14]

  /* Update day of the week */
  hrtc->DateToUpdate.WeekDay = RTC_WeekDayNum(year, month, day);
 8003c5e:	693b      	ldr	r3, [r7, #16]
 8003c60:	b2db      	uxtb	r3, r3
 8003c62:	68fa      	ldr	r2, [r7, #12]
 8003c64:	b2d2      	uxtb	r2, r2
 8003c66:	4619      	mov	r1, r3
 8003c68:	6978      	ldr	r0, [r7, #20]
 8003c6a:	f000 f83b 	bl	8003ce4 <RTC_WeekDayNum>
 8003c6e:	4603      	mov	r3, r0
 8003c70:	461a      	mov	r2, r3
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	731a      	strb	r2, [r3, #12]
}
 8003c76:	bf00      	nop
 8003c78:	3718      	adds	r7, #24
 8003c7a:	46bd      	mov	sp, r7
 8003c7c:	bd80      	pop	{r7, pc}
	...

08003c80 <RTC_IsLeapYear>:
  * @param  nYear  year to check
  * @retval 1: leap year
  *         0: not leap year
  */
static uint8_t RTC_IsLeapYear(uint16_t nYear)
{
 8003c80:	b480      	push	{r7}
 8003c82:	b083      	sub	sp, #12
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	4603      	mov	r3, r0
 8003c88:	80fb      	strh	r3, [r7, #6]
  if ((nYear % 4U) != 0U)
 8003c8a:	88fb      	ldrh	r3, [r7, #6]
 8003c8c:	f003 0303 	and.w	r3, r3, #3
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d001      	beq.n	8003c9a <RTC_IsLeapYear+0x1a>
  {
    return 0U;
 8003c96:	2300      	movs	r3, #0
 8003c98:	e01d      	b.n	8003cd6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 100U) != 0U)
 8003c9a:	88fb      	ldrh	r3, [r7, #6]
 8003c9c:	4a10      	ldr	r2, [pc, #64]	; (8003ce0 <RTC_IsLeapYear+0x60>)
 8003c9e:	fba2 1203 	umull	r1, r2, r2, r3
 8003ca2:	0952      	lsrs	r2, r2, #5
 8003ca4:	2164      	movs	r1, #100	; 0x64
 8003ca6:	fb01 f202 	mul.w	r2, r1, r2
 8003caa:	1a9b      	subs	r3, r3, r2
 8003cac:	b29b      	uxth	r3, r3
 8003cae:	2b00      	cmp	r3, #0
 8003cb0:	d001      	beq.n	8003cb6 <RTC_IsLeapYear+0x36>
  {
    return 1U;
 8003cb2:	2301      	movs	r3, #1
 8003cb4:	e00f      	b.n	8003cd6 <RTC_IsLeapYear+0x56>
  }

  if ((nYear % 400U) == 0U)
 8003cb6:	88fb      	ldrh	r3, [r7, #6]
 8003cb8:	4a09      	ldr	r2, [pc, #36]	; (8003ce0 <RTC_IsLeapYear+0x60>)
 8003cba:	fba2 1203 	umull	r1, r2, r2, r3
 8003cbe:	09d2      	lsrs	r2, r2, #7
 8003cc0:	f44f 71c8 	mov.w	r1, #400	; 0x190
 8003cc4:	fb01 f202 	mul.w	r2, r1, r2
 8003cc8:	1a9b      	subs	r3, r3, r2
 8003cca:	b29b      	uxth	r3, r3
 8003ccc:	2b00      	cmp	r3, #0
 8003cce:	d101      	bne.n	8003cd4 <RTC_IsLeapYear+0x54>
  {
    return 1U;
 8003cd0:	2301      	movs	r3, #1
 8003cd2:	e000      	b.n	8003cd6 <RTC_IsLeapYear+0x56>
  }
  else
  {
    return 0U;
 8003cd4:	2300      	movs	r3, #0
  }
}
 8003cd6:	4618      	mov	r0, r3
 8003cd8:	370c      	adds	r7, #12
 8003cda:	46bd      	mov	sp, r7
 8003cdc:	bc80      	pop	{r7}
 8003cde:	4770      	bx	lr
 8003ce0:	51eb851f 	.word	0x51eb851f

08003ce4 <RTC_WeekDayNum>:
  *         @arg RTC_WEEKDAY_FRIDAY
  *         @arg RTC_WEEKDAY_SATURDAY
  *         @arg RTC_WEEKDAY_SUNDAY
  */
static uint8_t RTC_WeekDayNum(uint32_t nYear, uint8_t nMonth, uint8_t nDay)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	b085      	sub	sp, #20
 8003ce8:	af00      	add	r7, sp, #0
 8003cea:	6078      	str	r0, [r7, #4]
 8003cec:	460b      	mov	r3, r1
 8003cee:	70fb      	strb	r3, [r7, #3]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	70bb      	strb	r3, [r7, #2]
  uint32_t year = 0U, weekday = 0U;
 8003cf4:	2300      	movs	r3, #0
 8003cf6:	60bb      	str	r3, [r7, #8]
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	60fb      	str	r3, [r7, #12]

  year = 2000U + nYear;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	f503 63fa 	add.w	r3, r3, #2000	; 0x7d0
 8003d02:	60bb      	str	r3, [r7, #8]

  if (nMonth < 3U)
 8003d04:	78fb      	ldrb	r3, [r7, #3]
 8003d06:	2b02      	cmp	r3, #2
 8003d08:	d82d      	bhi.n	8003d66 <RTC_WeekDayNum+0x82>
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [(year-1)/4] - [(year-1)/100] + [(year-1)/400] } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + ((year - 1U) / 4U) - ((year - 1U) / 100U) + ((year - 1U) / 400U)) % 7U;
 8003d0a:	78fa      	ldrb	r2, [r7, #3]
 8003d0c:	4613      	mov	r3, r2
 8003d0e:	005b      	lsls	r3, r3, #1
 8003d10:	4413      	add	r3, r2
 8003d12:	00db      	lsls	r3, r3, #3
 8003d14:	1a9b      	subs	r3, r3, r2
 8003d16:	4a2c      	ldr	r2, [pc, #176]	; (8003dc8 <RTC_WeekDayNum+0xe4>)
 8003d18:	fba2 2303 	umull	r2, r3, r2, r3
 8003d1c:	085a      	lsrs	r2, r3, #1
 8003d1e:	78bb      	ldrb	r3, [r7, #2]
 8003d20:	441a      	add	r2, r3
 8003d22:	68bb      	ldr	r3, [r7, #8]
 8003d24:	441a      	add	r2, r3
 8003d26:	68bb      	ldr	r3, [r7, #8]
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	089b      	lsrs	r3, r3, #2
 8003d2c:	441a      	add	r2, r3
 8003d2e:	68bb      	ldr	r3, [r7, #8]
 8003d30:	3b01      	subs	r3, #1
 8003d32:	4926      	ldr	r1, [pc, #152]	; (8003dcc <RTC_WeekDayNum+0xe8>)
 8003d34:	fba1 1303 	umull	r1, r3, r1, r3
 8003d38:	095b      	lsrs	r3, r3, #5
 8003d3a:	1ad2      	subs	r2, r2, r3
 8003d3c:	68bb      	ldr	r3, [r7, #8]
 8003d3e:	3b01      	subs	r3, #1
 8003d40:	4922      	ldr	r1, [pc, #136]	; (8003dcc <RTC_WeekDayNum+0xe8>)
 8003d42:	fba1 1303 	umull	r1, r3, r1, r3
 8003d46:	09db      	lsrs	r3, r3, #7
 8003d48:	4413      	add	r3, r2
 8003d4a:	1d1a      	adds	r2, r3, #4
 8003d4c:	4b20      	ldr	r3, [pc, #128]	; (8003dd0 <RTC_WeekDayNum+0xec>)
 8003d4e:	fba3 1302 	umull	r1, r3, r3, r2
 8003d52:	1ad1      	subs	r1, r2, r3
 8003d54:	0849      	lsrs	r1, r1, #1
 8003d56:	440b      	add	r3, r1
 8003d58:	0899      	lsrs	r1, r3, #2
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	00db      	lsls	r3, r3, #3
 8003d5e:	1a5b      	subs	r3, r3, r1
 8003d60:	1ad3      	subs	r3, r2, r3
 8003d62:	60fb      	str	r3, [r7, #12]
 8003d64:	e029      	b.n	8003dba <RTC_WeekDayNum+0xd6>
  }
  else
  {
    /*D = { [(23 x month)/9] + day + 4 + year + [year/4] - [year/100] + [year/400] - 2 } mod 7*/
    weekday = (((23U * nMonth) / 9U) + nDay + 4U + year + (year / 4U) - (year / 100U) + (year / 400U) - 2U) % 7U;
 8003d66:	78fa      	ldrb	r2, [r7, #3]
 8003d68:	4613      	mov	r3, r2
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	4413      	add	r3, r2
 8003d6e:	00db      	lsls	r3, r3, #3
 8003d70:	1a9b      	subs	r3, r3, r2
 8003d72:	4a15      	ldr	r2, [pc, #84]	; (8003dc8 <RTC_WeekDayNum+0xe4>)
 8003d74:	fba2 2303 	umull	r2, r3, r2, r3
 8003d78:	085a      	lsrs	r2, r3, #1
 8003d7a:	78bb      	ldrb	r3, [r7, #2]
 8003d7c:	441a      	add	r2, r3
 8003d7e:	68bb      	ldr	r3, [r7, #8]
 8003d80:	441a      	add	r2, r3
 8003d82:	68bb      	ldr	r3, [r7, #8]
 8003d84:	089b      	lsrs	r3, r3, #2
 8003d86:	441a      	add	r2, r3
 8003d88:	68bb      	ldr	r3, [r7, #8]
 8003d8a:	4910      	ldr	r1, [pc, #64]	; (8003dcc <RTC_WeekDayNum+0xe8>)
 8003d8c:	fba1 1303 	umull	r1, r3, r1, r3
 8003d90:	095b      	lsrs	r3, r3, #5
 8003d92:	1ad2      	subs	r2, r2, r3
 8003d94:	68bb      	ldr	r3, [r7, #8]
 8003d96:	490d      	ldr	r1, [pc, #52]	; (8003dcc <RTC_WeekDayNum+0xe8>)
 8003d98:	fba1 1303 	umull	r1, r3, r1, r3
 8003d9c:	09db      	lsrs	r3, r3, #7
 8003d9e:	4413      	add	r3, r2
 8003da0:	1c9a      	adds	r2, r3, #2
 8003da2:	4b0b      	ldr	r3, [pc, #44]	; (8003dd0 <RTC_WeekDayNum+0xec>)
 8003da4:	fba3 1302 	umull	r1, r3, r3, r2
 8003da8:	1ad1      	subs	r1, r2, r3
 8003daa:	0849      	lsrs	r1, r1, #1
 8003dac:	440b      	add	r3, r1
 8003dae:	0899      	lsrs	r1, r3, #2
 8003db0:	460b      	mov	r3, r1
 8003db2:	00db      	lsls	r3, r3, #3
 8003db4:	1a5b      	subs	r3, r3, r1
 8003db6:	1ad3      	subs	r3, r2, r3
 8003db8:	60fb      	str	r3, [r7, #12]
  }

  return (uint8_t)weekday;
 8003dba:	68fb      	ldr	r3, [r7, #12]
 8003dbc:	b2db      	uxtb	r3, r3
}
 8003dbe:	4618      	mov	r0, r3
 8003dc0:	3714      	adds	r7, #20
 8003dc2:	46bd      	mov	sp, r7
 8003dc4:	bc80      	pop	{r7}
 8003dc6:	4770      	bx	lr
 8003dc8:	38e38e39 	.word	0x38e38e39
 8003dcc:	51eb851f 	.word	0x51eb851f
 8003dd0:	24924925 	.word	0x24924925

08003dd4 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8003dd4:	b580      	push	{r7, lr}
 8003dd6:	b082      	sub	sp, #8
 8003dd8:	af00      	add	r7, sp, #0
 8003dda:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8003ddc:	687b      	ldr	r3, [r7, #4]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	d101      	bne.n	8003de6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8003de2:	2301      	movs	r3, #1
 8003de4:	e03f      	b.n	8003e66 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003dec:	b2db      	uxtb	r3, r3
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	d106      	bne.n	8003e00 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8003df2:	687b      	ldr	r3, [r7, #4]
 8003df4:	2200      	movs	r2, #0
 8003df6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8003dfa:	6878      	ldr	r0, [r7, #4]
 8003dfc:	f7fd ffc6 	bl	8001d8c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2224      	movs	r2, #36	; 0x24
 8003e04:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	681b      	ldr	r3, [r3, #0]
 8003e0c:	68da      	ldr	r2, [r3, #12]
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8003e16:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8003e18:	6878      	ldr	r0, [r7, #4]
 8003e1a:	f000 f9a7 	bl	800416c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8003e1e:	687b      	ldr	r3, [r7, #4]
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	691a      	ldr	r2, [r3, #16]
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	681b      	ldr	r3, [r3, #0]
 8003e28:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8003e2c:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8003e2e:	687b      	ldr	r3, [r7, #4]
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	695a      	ldr	r2, [r3, #20]
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8003e3c:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	68da      	ldr	r2, [r3, #12]
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8003e4c:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2200      	movs	r2, #0
 8003e52:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2220      	movs	r2, #32
 8003e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2220      	movs	r2, #32
 8003e60:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003e64:	2300      	movs	r3, #0
}
 8003e66:	4618      	mov	r0, r3
 8003e68:	3708      	adds	r7, #8
 8003e6a:	46bd      	mov	sp, r7
 8003e6c:	bd80      	pop	{r7, pc}

08003e6e <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003e6e:	b580      	push	{r7, lr}
 8003e70:	b08a      	sub	sp, #40	; 0x28
 8003e72:	af02      	add	r7, sp, #8
 8003e74:	60f8      	str	r0, [r7, #12]
 8003e76:	60b9      	str	r1, [r7, #8]
 8003e78:	603b      	str	r3, [r7, #0]
 8003e7a:	4613      	mov	r3, r2
 8003e7c:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003e7e:	2300      	movs	r3, #0
 8003e80:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b20      	cmp	r3, #32
 8003e8c:	d17c      	bne.n	8003f88 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003e8e:	68bb      	ldr	r3, [r7, #8]
 8003e90:	2b00      	cmp	r3, #0
 8003e92:	d002      	beq.n	8003e9a <HAL_UART_Transmit+0x2c>
 8003e94:	88fb      	ldrh	r3, [r7, #6]
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d101      	bne.n	8003e9e <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8003e9a:	2301      	movs	r3, #1
 8003e9c:	e075      	b.n	8003f8a <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003ea4:	2b01      	cmp	r3, #1
 8003ea6:	d101      	bne.n	8003eac <HAL_UART_Transmit+0x3e>
 8003ea8:	2302      	movs	r3, #2
 8003eaa:	e06e      	b.n	8003f8a <HAL_UART_Transmit+0x11c>
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	2201      	movs	r2, #1
 8003eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	2221      	movs	r2, #33	; 0x21
 8003ebe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003ec2:	f7fe f923 	bl	800210c <HAL_GetTick>
 8003ec6:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	88fa      	ldrh	r2, [r7, #6]
 8003ecc:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8003ece:	68fb      	ldr	r3, [r7, #12]
 8003ed0:	88fa      	ldrh	r2, [r7, #6]
 8003ed2:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	689b      	ldr	r3, [r3, #8]
 8003ed8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8003edc:	d108      	bne.n	8003ef0 <HAL_UART_Transmit+0x82>
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	691b      	ldr	r3, [r3, #16]
 8003ee2:	2b00      	cmp	r3, #0
 8003ee4:	d104      	bne.n	8003ef0 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8003ee6:	2300      	movs	r3, #0
 8003ee8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8003eea:	68bb      	ldr	r3, [r7, #8]
 8003eec:	61bb      	str	r3, [r7, #24]
 8003eee:	e003      	b.n	8003ef8 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8003ef0:	68bb      	ldr	r3, [r7, #8]
 8003ef2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8003ef4:	2300      	movs	r3, #0
 8003ef6:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8003ef8:	68fb      	ldr	r3, [r7, #12]
 8003efa:	2200      	movs	r2, #0
 8003efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8003f00:	e02a      	b.n	8003f58 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8003f02:	683b      	ldr	r3, [r7, #0]
 8003f04:	9300      	str	r3, [sp, #0]
 8003f06:	697b      	ldr	r3, [r7, #20]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	2180      	movs	r1, #128	; 0x80
 8003f0c:	68f8      	ldr	r0, [r7, #12]
 8003f0e:	f000 f8e2 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8003f12:	4603      	mov	r3, r0
 8003f14:	2b00      	cmp	r3, #0
 8003f16:	d001      	beq.n	8003f1c <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8003f18:	2303      	movs	r3, #3
 8003f1a:	e036      	b.n	8003f8a <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8003f1c:	69fb      	ldr	r3, [r7, #28]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d10b      	bne.n	8003f3a <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8003f22:	69bb      	ldr	r3, [r7, #24]
 8003f24:	881b      	ldrh	r3, [r3, #0]
 8003f26:	461a      	mov	r2, r3
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8003f30:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8003f32:	69bb      	ldr	r3, [r7, #24]
 8003f34:	3302      	adds	r3, #2
 8003f36:	61bb      	str	r3, [r7, #24]
 8003f38:	e007      	b.n	8003f4a <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8003f3a:	69fb      	ldr	r3, [r7, #28]
 8003f3c:	781a      	ldrb	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8003f44:	69fb      	ldr	r3, [r7, #28]
 8003f46:	3301      	adds	r3, #1
 8003f48:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8003f4a:	68fb      	ldr	r3, [r7, #12]
 8003f4c:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f4e:	b29b      	uxth	r3, r3
 8003f50:	3b01      	subs	r3, #1
 8003f52:	b29a      	uxth	r2, r3
 8003f54:	68fb      	ldr	r3, [r7, #12]
 8003f56:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8003f5c:	b29b      	uxth	r3, r3
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d1cf      	bne.n	8003f02 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	9300      	str	r3, [sp, #0]
 8003f66:	697b      	ldr	r3, [r7, #20]
 8003f68:	2200      	movs	r2, #0
 8003f6a:	2140      	movs	r1, #64	; 0x40
 8003f6c:	68f8      	ldr	r0, [r7, #12]
 8003f6e:	f000 f8b2 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 8003f72:	4603      	mov	r3, r0
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	d001      	beq.n	8003f7c <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8003f78:	2303      	movs	r3, #3
 8003f7a:	e006      	b.n	8003f8a <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2220      	movs	r2, #32
 8003f80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8003f84:	2300      	movs	r3, #0
 8003f86:	e000      	b.n	8003f8a <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8003f88:	2302      	movs	r3, #2
  }
}
 8003f8a:	4618      	mov	r0, r3
 8003f8c:	3720      	adds	r7, #32
 8003f8e:	46bd      	mov	sp, r7
 8003f90:	bd80      	pop	{r7, pc}

08003f92 <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003f92:	b580      	push	{r7, lr}
 8003f94:	b08a      	sub	sp, #40	; 0x28
 8003f96:	af02      	add	r7, sp, #8
 8003f98:	60f8      	str	r0, [r7, #12]
 8003f9a:	60b9      	str	r1, [r7, #8]
 8003f9c:	603b      	str	r3, [r7, #0]
 8003f9e:	4613      	mov	r3, r2
 8003fa0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8003fa6:	68fb      	ldr	r3, [r7, #12]
 8003fa8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fac:	b2db      	uxtb	r3, r3
 8003fae:	2b20      	cmp	r3, #32
 8003fb0:	f040 808c 	bne.w	80040cc <HAL_UART_Receive+0x13a>
  {
    if ((pData == NULL) || (Size == 0U))
 8003fb4:	68bb      	ldr	r3, [r7, #8]
 8003fb6:	2b00      	cmp	r3, #0
 8003fb8:	d002      	beq.n	8003fc0 <HAL_UART_Receive+0x2e>
 8003fba:	88fb      	ldrh	r3, [r7, #6]
 8003fbc:	2b00      	cmp	r3, #0
 8003fbe:	d101      	bne.n	8003fc4 <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8003fc0:	2301      	movs	r3, #1
 8003fc2:	e084      	b.n	80040ce <HAL_UART_Receive+0x13c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8003fc4:	68fb      	ldr	r3, [r7, #12]
 8003fc6:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003fca:	2b01      	cmp	r3, #1
 8003fcc:	d101      	bne.n	8003fd2 <HAL_UART_Receive+0x40>
 8003fce:	2302      	movs	r3, #2
 8003fd0:	e07d      	b.n	80040ce <HAL_UART_Receive+0x13c>
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	2201      	movs	r2, #1
 8003fd6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8003fda:	68fb      	ldr	r3, [r7, #12]
 8003fdc:	2200      	movs	r2, #0
 8003fde:	641a      	str	r2, [r3, #64]	; 0x40
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	2222      	movs	r2, #34	; 0x22
 8003fe4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	2200      	movs	r2, #0
 8003fec:	631a      	str	r2, [r3, #48]	; 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8003fee:	f7fe f88d 	bl	800210c <HAL_GetTick>
 8003ff2:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	88fa      	ldrh	r2, [r7, #6]
 8003ff8:	859a      	strh	r2, [r3, #44]	; 0x2c
    huart->RxXferCount = Size;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	88fa      	ldrh	r2, [r7, #6]
 8003ffe:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004000:	68fb      	ldr	r3, [r7, #12]
 8004002:	689b      	ldr	r3, [r3, #8]
 8004004:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004008:	d108      	bne.n	800401c <HAL_UART_Receive+0x8a>
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	691b      	ldr	r3, [r3, #16]
 800400e:	2b00      	cmp	r3, #0
 8004010:	d104      	bne.n	800401c <HAL_UART_Receive+0x8a>
    {
      pdata8bits  = NULL;
 8004012:	2300      	movs	r3, #0
 8004014:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8004016:	68bb      	ldr	r3, [r7, #8]
 8004018:	61bb      	str	r3, [r7, #24]
 800401a:	e003      	b.n	8004024 <HAL_UART_Receive+0x92>
    }
    else
    {
      pdata8bits  = pData;
 800401c:	68bb      	ldr	r3, [r7, #8]
 800401e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004020:	2300      	movs	r3, #0
 8004022:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8004024:	68fb      	ldr	r3, [r7, #12]
 8004026:	2200      	movs	r2, #0
 8004028:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 800402c:	e043      	b.n	80040b6 <HAL_UART_Receive+0x124>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 800402e:	683b      	ldr	r3, [r7, #0]
 8004030:	9300      	str	r3, [sp, #0]
 8004032:	697b      	ldr	r3, [r7, #20]
 8004034:	2200      	movs	r2, #0
 8004036:	2120      	movs	r1, #32
 8004038:	68f8      	ldr	r0, [r7, #12]
 800403a:	f000 f84c 	bl	80040d6 <UART_WaitOnFlagUntilTimeout>
 800403e:	4603      	mov	r3, r0
 8004040:	2b00      	cmp	r3, #0
 8004042:	d001      	beq.n	8004048 <HAL_UART_Receive+0xb6>
      {
        return HAL_TIMEOUT;
 8004044:	2303      	movs	r3, #3
 8004046:	e042      	b.n	80040ce <HAL_UART_Receive+0x13c>
      }
      if (pdata8bits == NULL)
 8004048:	69fb      	ldr	r3, [r7, #28]
 800404a:	2b00      	cmp	r3, #0
 800404c:	d10c      	bne.n	8004068 <HAL_UART_Receive+0xd6>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	685b      	ldr	r3, [r3, #4]
 8004054:	b29b      	uxth	r3, r3
 8004056:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800405a:	b29a      	uxth	r2, r3
 800405c:	69bb      	ldr	r3, [r7, #24]
 800405e:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8004060:	69bb      	ldr	r3, [r7, #24]
 8004062:	3302      	adds	r3, #2
 8004064:	61bb      	str	r3, [r7, #24]
 8004066:	e01f      	b.n	80040a8 <HAL_UART_Receive+0x116>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	689b      	ldr	r3, [r3, #8]
 800406c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004070:	d007      	beq.n	8004082 <HAL_UART_Receive+0xf0>
 8004072:	68fb      	ldr	r3, [r7, #12]
 8004074:	689b      	ldr	r3, [r3, #8]
 8004076:	2b00      	cmp	r3, #0
 8004078:	d10a      	bne.n	8004090 <HAL_UART_Receive+0xfe>
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	691b      	ldr	r3, [r3, #16]
 800407e:	2b00      	cmp	r3, #0
 8004080:	d106      	bne.n	8004090 <HAL_UART_Receive+0xfe>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	b2da      	uxtb	r2, r3
 800408a:	69fb      	ldr	r3, [r7, #28]
 800408c:	701a      	strb	r2, [r3, #0]
 800408e:	e008      	b.n	80040a2 <HAL_UART_Receive+0x110>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	685b      	ldr	r3, [r3, #4]
 8004096:	b2db      	uxtb	r3, r3
 8004098:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800409c:	b2da      	uxtb	r2, r3
 800409e:	69fb      	ldr	r3, [r7, #28]
 80040a0:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 80040a2:	69fb      	ldr	r3, [r7, #28]
 80040a4:	3301      	adds	r3, #1
 80040a6:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ac:	b29b      	uxth	r3, r3
 80040ae:	3b01      	subs	r3, #1
 80040b0:	b29a      	uxth	r2, r3
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	85da      	strh	r2, [r3, #46]	; 0x2e
    while (huart->RxXferCount > 0U)
 80040b6:	68fb      	ldr	r3, [r7, #12]
 80040b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80040ba:	b29b      	uxth	r3, r3
 80040bc:	2b00      	cmp	r3, #0
 80040be:	d1b6      	bne.n	800402e <HAL_UART_Receive+0x9c>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	2220      	movs	r2, #32
 80040c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    return HAL_OK;
 80040c8:	2300      	movs	r3, #0
 80040ca:	e000      	b.n	80040ce <HAL_UART_Receive+0x13c>
  }
  else
  {
    return HAL_BUSY;
 80040cc:	2302      	movs	r3, #2
  }
}
 80040ce:	4618      	mov	r0, r3
 80040d0:	3720      	adds	r7, #32
 80040d2:	46bd      	mov	sp, r7
 80040d4:	bd80      	pop	{r7, pc}

080040d6 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 80040d6:	b580      	push	{r7, lr}
 80040d8:	b084      	sub	sp, #16
 80040da:	af00      	add	r7, sp, #0
 80040dc:	60f8      	str	r0, [r7, #12]
 80040de:	60b9      	str	r1, [r7, #8]
 80040e0:	603b      	str	r3, [r7, #0]
 80040e2:	4613      	mov	r3, r2
 80040e4:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80040e6:	e02c      	b.n	8004142 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80040e8:	69bb      	ldr	r3, [r7, #24]
 80040ea:	f1b3 3fff 	cmp.w	r3, #4294967295
 80040ee:	d028      	beq.n	8004142 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80040f0:	69bb      	ldr	r3, [r7, #24]
 80040f2:	2b00      	cmp	r3, #0
 80040f4:	d007      	beq.n	8004106 <UART_WaitOnFlagUntilTimeout+0x30>
 80040f6:	f7fe f809 	bl	800210c <HAL_GetTick>
 80040fa:	4602      	mov	r2, r0
 80040fc:	683b      	ldr	r3, [r7, #0]
 80040fe:	1ad3      	subs	r3, r2, r3
 8004100:	69ba      	ldr	r2, [r7, #24]
 8004102:	429a      	cmp	r2, r3
 8004104:	d21d      	bcs.n	8004142 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8004106:	68fb      	ldr	r3, [r7, #12]
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	68da      	ldr	r2, [r3, #12]
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 8004114:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	695a      	ldr	r2, [r3, #20]
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	f022 0201 	bic.w	r2, r2, #1
 8004124:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	2220      	movs	r2, #32
 800412a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800412e:	68fb      	ldr	r3, [r7, #12]
 8004130:	2220      	movs	r2, #32
 8004132:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8004136:	68fb      	ldr	r3, [r7, #12]
 8004138:	2200      	movs	r2, #0
 800413a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800413e:	2303      	movs	r3, #3
 8004140:	e00f      	b.n	8004162 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	681b      	ldr	r3, [r3, #0]
 8004146:	681a      	ldr	r2, [r3, #0]
 8004148:	68bb      	ldr	r3, [r7, #8]
 800414a:	4013      	ands	r3, r2
 800414c:	68ba      	ldr	r2, [r7, #8]
 800414e:	429a      	cmp	r2, r3
 8004150:	bf0c      	ite	eq
 8004152:	2301      	moveq	r3, #1
 8004154:	2300      	movne	r3, #0
 8004156:	b2db      	uxtb	r3, r3
 8004158:	461a      	mov	r2, r3
 800415a:	79fb      	ldrb	r3, [r7, #7]
 800415c:	429a      	cmp	r2, r3
 800415e:	d0c3      	beq.n	80040e8 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8004160:	2300      	movs	r3, #0
}
 8004162:	4618      	mov	r0, r3
 8004164:	3710      	adds	r7, #16
 8004166:	46bd      	mov	sp, r7
 8004168:	bd80      	pop	{r7, pc}
	...

0800416c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	b084      	sub	sp, #16
 8004170:	af00      	add	r7, sp, #0
 8004172:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	681b      	ldr	r3, [r3, #0]
 8004178:	691b      	ldr	r3, [r3, #16]
 800417a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800417e:	687b      	ldr	r3, [r7, #4]
 8004180:	68da      	ldr	r2, [r3, #12]
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	430a      	orrs	r2, r1
 8004188:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	689a      	ldr	r2, [r3, #8]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	691b      	ldr	r3, [r3, #16]
 8004192:	431a      	orrs	r2, r3
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	695b      	ldr	r3, [r3, #20]
 8004198:	4313      	orrs	r3, r2
 800419a:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	68db      	ldr	r3, [r3, #12]
 80041a2:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 80041a6:	f023 030c 	bic.w	r3, r3, #12
 80041aa:	687a      	ldr	r2, [r7, #4]
 80041ac:	6812      	ldr	r2, [r2, #0]
 80041ae:	68b9      	ldr	r1, [r7, #8]
 80041b0:	430b      	orrs	r3, r1
 80041b2:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80041b4:	687b      	ldr	r3, [r7, #4]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	699a      	ldr	r2, [r3, #24]
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	4a2c      	ldr	r2, [pc, #176]	; (8004280 <UART_SetConfig+0x114>)
 80041d0:	4293      	cmp	r3, r2
 80041d2:	d103      	bne.n	80041dc <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 80041d4:	f7fe fea0 	bl	8002f18 <HAL_RCC_GetPCLK2Freq>
 80041d8:	60f8      	str	r0, [r7, #12]
 80041da:	e002      	b.n	80041e2 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 80041dc:	f7fe fe88 	bl	8002ef0 <HAL_RCC_GetPCLK1Freq>
 80041e0:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80041e2:	68fa      	ldr	r2, [r7, #12]
 80041e4:	4613      	mov	r3, r2
 80041e6:	009b      	lsls	r3, r3, #2
 80041e8:	4413      	add	r3, r2
 80041ea:	009a      	lsls	r2, r3, #2
 80041ec:	441a      	add	r2, r3
 80041ee:	687b      	ldr	r3, [r7, #4]
 80041f0:	685b      	ldr	r3, [r3, #4]
 80041f2:	009b      	lsls	r3, r3, #2
 80041f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80041f8:	4a22      	ldr	r2, [pc, #136]	; (8004284 <UART_SetConfig+0x118>)
 80041fa:	fba2 2303 	umull	r2, r3, r2, r3
 80041fe:	095b      	lsrs	r3, r3, #5
 8004200:	0119      	lsls	r1, r3, #4
 8004202:	68fa      	ldr	r2, [r7, #12]
 8004204:	4613      	mov	r3, r2
 8004206:	009b      	lsls	r3, r3, #2
 8004208:	4413      	add	r3, r2
 800420a:	009a      	lsls	r2, r3, #2
 800420c:	441a      	add	r2, r3
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	685b      	ldr	r3, [r3, #4]
 8004212:	009b      	lsls	r3, r3, #2
 8004214:	fbb2 f2f3 	udiv	r2, r2, r3
 8004218:	4b1a      	ldr	r3, [pc, #104]	; (8004284 <UART_SetConfig+0x118>)
 800421a:	fba3 0302 	umull	r0, r3, r3, r2
 800421e:	095b      	lsrs	r3, r3, #5
 8004220:	2064      	movs	r0, #100	; 0x64
 8004222:	fb00 f303 	mul.w	r3, r0, r3
 8004226:	1ad3      	subs	r3, r2, r3
 8004228:	011b      	lsls	r3, r3, #4
 800422a:	3332      	adds	r3, #50	; 0x32
 800422c:	4a15      	ldr	r2, [pc, #84]	; (8004284 <UART_SetConfig+0x118>)
 800422e:	fba2 2303 	umull	r2, r3, r2, r3
 8004232:	095b      	lsrs	r3, r3, #5
 8004234:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004238:	4419      	add	r1, r3
 800423a:	68fa      	ldr	r2, [r7, #12]
 800423c:	4613      	mov	r3, r2
 800423e:	009b      	lsls	r3, r3, #2
 8004240:	4413      	add	r3, r2
 8004242:	009a      	lsls	r2, r3, #2
 8004244:	441a      	add	r2, r3
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	685b      	ldr	r3, [r3, #4]
 800424a:	009b      	lsls	r3, r3, #2
 800424c:	fbb2 f2f3 	udiv	r2, r2, r3
 8004250:	4b0c      	ldr	r3, [pc, #48]	; (8004284 <UART_SetConfig+0x118>)
 8004252:	fba3 0302 	umull	r0, r3, r3, r2
 8004256:	095b      	lsrs	r3, r3, #5
 8004258:	2064      	movs	r0, #100	; 0x64
 800425a:	fb00 f303 	mul.w	r3, r0, r3
 800425e:	1ad3      	subs	r3, r2, r3
 8004260:	011b      	lsls	r3, r3, #4
 8004262:	3332      	adds	r3, #50	; 0x32
 8004264:	4a07      	ldr	r2, [pc, #28]	; (8004284 <UART_SetConfig+0x118>)
 8004266:	fba2 2303 	umull	r2, r3, r2, r3
 800426a:	095b      	lsrs	r3, r3, #5
 800426c:	f003 020f 	and.w	r2, r3, #15
 8004270:	687b      	ldr	r3, [r7, #4]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	440a      	add	r2, r1
 8004276:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 8004278:	bf00      	nop
 800427a:	3710      	adds	r7, #16
 800427c:	46bd      	mov	sp, r7
 800427e:	bd80      	pop	{r7, pc}
 8004280:	40013800 	.word	0x40013800
 8004284:	51eb851f 	.word	0x51eb851f

08004288 <__errno>:
 8004288:	4b01      	ldr	r3, [pc, #4]	; (8004290 <__errno+0x8>)
 800428a:	6818      	ldr	r0, [r3, #0]
 800428c:	4770      	bx	lr
 800428e:	bf00      	nop
 8004290:	20000014 	.word	0x20000014

08004294 <__libc_init_array>:
 8004294:	b570      	push	{r4, r5, r6, lr}
 8004296:	2600      	movs	r6, #0
 8004298:	4d0c      	ldr	r5, [pc, #48]	; (80042cc <__libc_init_array+0x38>)
 800429a:	4c0d      	ldr	r4, [pc, #52]	; (80042d0 <__libc_init_array+0x3c>)
 800429c:	1b64      	subs	r4, r4, r5
 800429e:	10a4      	asrs	r4, r4, #2
 80042a0:	42a6      	cmp	r6, r4
 80042a2:	d109      	bne.n	80042b8 <__libc_init_array+0x24>
 80042a4:	f002 fef4 	bl	8007090 <_init>
 80042a8:	2600      	movs	r6, #0
 80042aa:	4d0a      	ldr	r5, [pc, #40]	; (80042d4 <__libc_init_array+0x40>)
 80042ac:	4c0a      	ldr	r4, [pc, #40]	; (80042d8 <__libc_init_array+0x44>)
 80042ae:	1b64      	subs	r4, r4, r5
 80042b0:	10a4      	asrs	r4, r4, #2
 80042b2:	42a6      	cmp	r6, r4
 80042b4:	d105      	bne.n	80042c2 <__libc_init_array+0x2e>
 80042b6:	bd70      	pop	{r4, r5, r6, pc}
 80042b8:	f855 3b04 	ldr.w	r3, [r5], #4
 80042bc:	4798      	blx	r3
 80042be:	3601      	adds	r6, #1
 80042c0:	e7ee      	b.n	80042a0 <__libc_init_array+0xc>
 80042c2:	f855 3b04 	ldr.w	r3, [r5], #4
 80042c6:	4798      	blx	r3
 80042c8:	3601      	adds	r6, #1
 80042ca:	e7f2      	b.n	80042b2 <__libc_init_array+0x1e>
 80042cc:	0800763c 	.word	0x0800763c
 80042d0:	0800763c 	.word	0x0800763c
 80042d4:	0800763c 	.word	0x0800763c
 80042d8:	08007640 	.word	0x08007640

080042dc <memcpy>:
 80042dc:	440a      	add	r2, r1
 80042de:	4291      	cmp	r1, r2
 80042e0:	f100 33ff 	add.w	r3, r0, #4294967295
 80042e4:	d100      	bne.n	80042e8 <memcpy+0xc>
 80042e6:	4770      	bx	lr
 80042e8:	b510      	push	{r4, lr}
 80042ea:	f811 4b01 	ldrb.w	r4, [r1], #1
 80042ee:	4291      	cmp	r1, r2
 80042f0:	f803 4f01 	strb.w	r4, [r3, #1]!
 80042f4:	d1f9      	bne.n	80042ea <memcpy+0xe>
 80042f6:	bd10      	pop	{r4, pc}

080042f8 <memset>:
 80042f8:	4603      	mov	r3, r0
 80042fa:	4402      	add	r2, r0
 80042fc:	4293      	cmp	r3, r2
 80042fe:	d100      	bne.n	8004302 <memset+0xa>
 8004300:	4770      	bx	lr
 8004302:	f803 1b01 	strb.w	r1, [r3], #1
 8004306:	e7f9      	b.n	80042fc <memset+0x4>

08004308 <__cvt>:
 8004308:	2b00      	cmp	r3, #0
 800430a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800430e:	461f      	mov	r7, r3
 8004310:	bfbb      	ittet	lt
 8004312:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 8004316:	461f      	movlt	r7, r3
 8004318:	2300      	movge	r3, #0
 800431a:	232d      	movlt	r3, #45	; 0x2d
 800431c:	b088      	sub	sp, #32
 800431e:	4614      	mov	r4, r2
 8004320:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8004322:	9d10      	ldr	r5, [sp, #64]	; 0x40
 8004324:	7013      	strb	r3, [r2, #0]
 8004326:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004328:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 800432c:	f023 0820 	bic.w	r8, r3, #32
 8004330:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004334:	d005      	beq.n	8004342 <__cvt+0x3a>
 8004336:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800433a:	d100      	bne.n	800433e <__cvt+0x36>
 800433c:	3501      	adds	r5, #1
 800433e:	2302      	movs	r3, #2
 8004340:	e000      	b.n	8004344 <__cvt+0x3c>
 8004342:	2303      	movs	r3, #3
 8004344:	aa07      	add	r2, sp, #28
 8004346:	9204      	str	r2, [sp, #16]
 8004348:	aa06      	add	r2, sp, #24
 800434a:	e9cd a202 	strd	sl, r2, [sp, #8]
 800434e:	e9cd 3500 	strd	r3, r5, [sp]
 8004352:	4622      	mov	r2, r4
 8004354:	463b      	mov	r3, r7
 8004356:	f000 fd1f 	bl	8004d98 <_dtoa_r>
 800435a:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800435e:	4606      	mov	r6, r0
 8004360:	d102      	bne.n	8004368 <__cvt+0x60>
 8004362:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8004364:	07db      	lsls	r3, r3, #31
 8004366:	d522      	bpl.n	80043ae <__cvt+0xa6>
 8004368:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800436c:	eb06 0905 	add.w	r9, r6, r5
 8004370:	d110      	bne.n	8004394 <__cvt+0x8c>
 8004372:	7833      	ldrb	r3, [r6, #0]
 8004374:	2b30      	cmp	r3, #48	; 0x30
 8004376:	d10a      	bne.n	800438e <__cvt+0x86>
 8004378:	2200      	movs	r2, #0
 800437a:	2300      	movs	r3, #0
 800437c:	4620      	mov	r0, r4
 800437e:	4639      	mov	r1, r7
 8004380:	f7fc fb12 	bl	80009a8 <__aeabi_dcmpeq>
 8004384:	b918      	cbnz	r0, 800438e <__cvt+0x86>
 8004386:	f1c5 0501 	rsb	r5, r5, #1
 800438a:	f8ca 5000 	str.w	r5, [sl]
 800438e:	f8da 3000 	ldr.w	r3, [sl]
 8004392:	4499      	add	r9, r3
 8004394:	2200      	movs	r2, #0
 8004396:	2300      	movs	r3, #0
 8004398:	4620      	mov	r0, r4
 800439a:	4639      	mov	r1, r7
 800439c:	f7fc fb04 	bl	80009a8 <__aeabi_dcmpeq>
 80043a0:	b108      	cbz	r0, 80043a6 <__cvt+0x9e>
 80043a2:	f8cd 901c 	str.w	r9, [sp, #28]
 80043a6:	2230      	movs	r2, #48	; 0x30
 80043a8:	9b07      	ldr	r3, [sp, #28]
 80043aa:	454b      	cmp	r3, r9
 80043ac:	d307      	bcc.n	80043be <__cvt+0xb6>
 80043ae:	4630      	mov	r0, r6
 80043b0:	9b07      	ldr	r3, [sp, #28]
 80043b2:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80043b4:	1b9b      	subs	r3, r3, r6
 80043b6:	6013      	str	r3, [r2, #0]
 80043b8:	b008      	add	sp, #32
 80043ba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80043be:	1c59      	adds	r1, r3, #1
 80043c0:	9107      	str	r1, [sp, #28]
 80043c2:	701a      	strb	r2, [r3, #0]
 80043c4:	e7f0      	b.n	80043a8 <__cvt+0xa0>

080043c6 <__exponent>:
 80043c6:	4603      	mov	r3, r0
 80043c8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80043ca:	2900      	cmp	r1, #0
 80043cc:	f803 2b02 	strb.w	r2, [r3], #2
 80043d0:	bfb6      	itet	lt
 80043d2:	222d      	movlt	r2, #45	; 0x2d
 80043d4:	222b      	movge	r2, #43	; 0x2b
 80043d6:	4249      	neglt	r1, r1
 80043d8:	2909      	cmp	r1, #9
 80043da:	7042      	strb	r2, [r0, #1]
 80043dc:	dd2b      	ble.n	8004436 <__exponent+0x70>
 80043de:	f10d 0407 	add.w	r4, sp, #7
 80043e2:	46a4      	mov	ip, r4
 80043e4:	270a      	movs	r7, #10
 80043e6:	fb91 f6f7 	sdiv	r6, r1, r7
 80043ea:	460a      	mov	r2, r1
 80043ec:	46a6      	mov	lr, r4
 80043ee:	fb07 1516 	mls	r5, r7, r6, r1
 80043f2:	2a63      	cmp	r2, #99	; 0x63
 80043f4:	f105 0530 	add.w	r5, r5, #48	; 0x30
 80043f8:	4631      	mov	r1, r6
 80043fa:	f104 34ff 	add.w	r4, r4, #4294967295
 80043fe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8004402:	dcf0      	bgt.n	80043e6 <__exponent+0x20>
 8004404:	3130      	adds	r1, #48	; 0x30
 8004406:	f1ae 0502 	sub.w	r5, lr, #2
 800440a:	f804 1c01 	strb.w	r1, [r4, #-1]
 800440e:	4629      	mov	r1, r5
 8004410:	1c44      	adds	r4, r0, #1
 8004412:	4561      	cmp	r1, ip
 8004414:	d30a      	bcc.n	800442c <__exponent+0x66>
 8004416:	f10d 0209 	add.w	r2, sp, #9
 800441a:	eba2 020e 	sub.w	r2, r2, lr
 800441e:	4565      	cmp	r5, ip
 8004420:	bf88      	it	hi
 8004422:	2200      	movhi	r2, #0
 8004424:	4413      	add	r3, r2
 8004426:	1a18      	subs	r0, r3, r0
 8004428:	b003      	add	sp, #12
 800442a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800442c:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004430:	f804 2f01 	strb.w	r2, [r4, #1]!
 8004434:	e7ed      	b.n	8004412 <__exponent+0x4c>
 8004436:	2330      	movs	r3, #48	; 0x30
 8004438:	3130      	adds	r1, #48	; 0x30
 800443a:	7083      	strb	r3, [r0, #2]
 800443c:	70c1      	strb	r1, [r0, #3]
 800443e:	1d03      	adds	r3, r0, #4
 8004440:	e7f1      	b.n	8004426 <__exponent+0x60>
	...

08004444 <_printf_float>:
 8004444:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004448:	b091      	sub	sp, #68	; 0x44
 800444a:	460c      	mov	r4, r1
 800444c:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004450:	4616      	mov	r6, r2
 8004452:	461f      	mov	r7, r3
 8004454:	4605      	mov	r5, r0
 8004456:	f001 fa8d 	bl	8005974 <_localeconv_r>
 800445a:	6803      	ldr	r3, [r0, #0]
 800445c:	4618      	mov	r0, r3
 800445e:	9309      	str	r3, [sp, #36]	; 0x24
 8004460:	f7fb fe76 	bl	8000150 <strlen>
 8004464:	2300      	movs	r3, #0
 8004466:	930e      	str	r3, [sp, #56]	; 0x38
 8004468:	f8d8 3000 	ldr.w	r3, [r8]
 800446c:	900a      	str	r0, [sp, #40]	; 0x28
 800446e:	3307      	adds	r3, #7
 8004470:	f023 0307 	bic.w	r3, r3, #7
 8004474:	f103 0208 	add.w	r2, r3, #8
 8004478:	f894 9018 	ldrb.w	r9, [r4, #24]
 800447c:	f8d4 b000 	ldr.w	fp, [r4]
 8004480:	f8c8 2000 	str.w	r2, [r8]
 8004484:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004488:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800448c:	e9d4 8a12 	ldrd	r8, sl, [r4, #72]	; 0x48
 8004490:	f02a 4300 	bic.w	r3, sl, #2147483648	; 0x80000000
 8004494:	930b      	str	r3, [sp, #44]	; 0x2c
 8004496:	f04f 32ff 	mov.w	r2, #4294967295
 800449a:	4640      	mov	r0, r8
 800449c:	4b9c      	ldr	r3, [pc, #624]	; (8004710 <_printf_float+0x2cc>)
 800449e:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044a0:	f7fc fab4 	bl	8000a0c <__aeabi_dcmpun>
 80044a4:	bb70      	cbnz	r0, 8004504 <_printf_float+0xc0>
 80044a6:	f04f 32ff 	mov.w	r2, #4294967295
 80044aa:	4640      	mov	r0, r8
 80044ac:	4b98      	ldr	r3, [pc, #608]	; (8004710 <_printf_float+0x2cc>)
 80044ae:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80044b0:	f7fc fa8e 	bl	80009d0 <__aeabi_dcmple>
 80044b4:	bb30      	cbnz	r0, 8004504 <_printf_float+0xc0>
 80044b6:	2200      	movs	r2, #0
 80044b8:	2300      	movs	r3, #0
 80044ba:	4640      	mov	r0, r8
 80044bc:	4651      	mov	r1, sl
 80044be:	f7fc fa7d 	bl	80009bc <__aeabi_dcmplt>
 80044c2:	b110      	cbz	r0, 80044ca <_printf_float+0x86>
 80044c4:	232d      	movs	r3, #45	; 0x2d
 80044c6:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80044ca:	4b92      	ldr	r3, [pc, #584]	; (8004714 <_printf_float+0x2d0>)
 80044cc:	4892      	ldr	r0, [pc, #584]	; (8004718 <_printf_float+0x2d4>)
 80044ce:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80044d2:	bf94      	ite	ls
 80044d4:	4698      	movls	r8, r3
 80044d6:	4680      	movhi	r8, r0
 80044d8:	2303      	movs	r3, #3
 80044da:	f04f 0a00 	mov.w	sl, #0
 80044de:	6123      	str	r3, [r4, #16]
 80044e0:	f02b 0304 	bic.w	r3, fp, #4
 80044e4:	6023      	str	r3, [r4, #0]
 80044e6:	4633      	mov	r3, r6
 80044e8:	4621      	mov	r1, r4
 80044ea:	4628      	mov	r0, r5
 80044ec:	9700      	str	r7, [sp, #0]
 80044ee:	aa0f      	add	r2, sp, #60	; 0x3c
 80044f0:	f000 f9d4 	bl	800489c <_printf_common>
 80044f4:	3001      	adds	r0, #1
 80044f6:	f040 8090 	bne.w	800461a <_printf_float+0x1d6>
 80044fa:	f04f 30ff 	mov.w	r0, #4294967295
 80044fe:	b011      	add	sp, #68	; 0x44
 8004500:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004504:	4642      	mov	r2, r8
 8004506:	4653      	mov	r3, sl
 8004508:	4640      	mov	r0, r8
 800450a:	4651      	mov	r1, sl
 800450c:	f7fc fa7e 	bl	8000a0c <__aeabi_dcmpun>
 8004510:	b148      	cbz	r0, 8004526 <_printf_float+0xe2>
 8004512:	f1ba 0f00 	cmp.w	sl, #0
 8004516:	bfb8      	it	lt
 8004518:	232d      	movlt	r3, #45	; 0x2d
 800451a:	4880      	ldr	r0, [pc, #512]	; (800471c <_printf_float+0x2d8>)
 800451c:	bfb8      	it	lt
 800451e:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004522:	4b7f      	ldr	r3, [pc, #508]	; (8004720 <_printf_float+0x2dc>)
 8004524:	e7d3      	b.n	80044ce <_printf_float+0x8a>
 8004526:	6863      	ldr	r3, [r4, #4]
 8004528:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 800452c:	1c5a      	adds	r2, r3, #1
 800452e:	d142      	bne.n	80045b6 <_printf_float+0x172>
 8004530:	2306      	movs	r3, #6
 8004532:	6063      	str	r3, [r4, #4]
 8004534:	2200      	movs	r2, #0
 8004536:	9206      	str	r2, [sp, #24]
 8004538:	aa0e      	add	r2, sp, #56	; 0x38
 800453a:	e9cd 9204 	strd	r9, r2, [sp, #16]
 800453e:	aa0d      	add	r2, sp, #52	; 0x34
 8004540:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004544:	9203      	str	r2, [sp, #12]
 8004546:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800454a:	e9cd 3201 	strd	r3, r2, [sp, #4]
 800454e:	6023      	str	r3, [r4, #0]
 8004550:	6863      	ldr	r3, [r4, #4]
 8004552:	4642      	mov	r2, r8
 8004554:	9300      	str	r3, [sp, #0]
 8004556:	4628      	mov	r0, r5
 8004558:	4653      	mov	r3, sl
 800455a:	910b      	str	r1, [sp, #44]	; 0x2c
 800455c:	f7ff fed4 	bl	8004308 <__cvt>
 8004560:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004562:	4680      	mov	r8, r0
 8004564:	2947      	cmp	r1, #71	; 0x47
 8004566:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004568:	d108      	bne.n	800457c <_printf_float+0x138>
 800456a:	1cc8      	adds	r0, r1, #3
 800456c:	db02      	blt.n	8004574 <_printf_float+0x130>
 800456e:	6863      	ldr	r3, [r4, #4]
 8004570:	4299      	cmp	r1, r3
 8004572:	dd40      	ble.n	80045f6 <_printf_float+0x1b2>
 8004574:	f1a9 0902 	sub.w	r9, r9, #2
 8004578:	fa5f f989 	uxtb.w	r9, r9
 800457c:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004580:	d81f      	bhi.n	80045c2 <_printf_float+0x17e>
 8004582:	464a      	mov	r2, r9
 8004584:	3901      	subs	r1, #1
 8004586:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800458a:	910d      	str	r1, [sp, #52]	; 0x34
 800458c:	f7ff ff1b 	bl	80043c6 <__exponent>
 8004590:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004592:	4682      	mov	sl, r0
 8004594:	1813      	adds	r3, r2, r0
 8004596:	2a01      	cmp	r2, #1
 8004598:	6123      	str	r3, [r4, #16]
 800459a:	dc02      	bgt.n	80045a2 <_printf_float+0x15e>
 800459c:	6822      	ldr	r2, [r4, #0]
 800459e:	07d2      	lsls	r2, r2, #31
 80045a0:	d501      	bpl.n	80045a6 <_printf_float+0x162>
 80045a2:	3301      	adds	r3, #1
 80045a4:	6123      	str	r3, [r4, #16]
 80045a6:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d09b      	beq.n	80044e6 <_printf_float+0xa2>
 80045ae:	232d      	movs	r3, #45	; 0x2d
 80045b0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80045b4:	e797      	b.n	80044e6 <_printf_float+0xa2>
 80045b6:	2947      	cmp	r1, #71	; 0x47
 80045b8:	d1bc      	bne.n	8004534 <_printf_float+0xf0>
 80045ba:	2b00      	cmp	r3, #0
 80045bc:	d1ba      	bne.n	8004534 <_printf_float+0xf0>
 80045be:	2301      	movs	r3, #1
 80045c0:	e7b7      	b.n	8004532 <_printf_float+0xee>
 80045c2:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80045c6:	d118      	bne.n	80045fa <_printf_float+0x1b6>
 80045c8:	2900      	cmp	r1, #0
 80045ca:	6863      	ldr	r3, [r4, #4]
 80045cc:	dd0b      	ble.n	80045e6 <_printf_float+0x1a2>
 80045ce:	6121      	str	r1, [r4, #16]
 80045d0:	b913      	cbnz	r3, 80045d8 <_printf_float+0x194>
 80045d2:	6822      	ldr	r2, [r4, #0]
 80045d4:	07d0      	lsls	r0, r2, #31
 80045d6:	d502      	bpl.n	80045de <_printf_float+0x19a>
 80045d8:	3301      	adds	r3, #1
 80045da:	440b      	add	r3, r1
 80045dc:	6123      	str	r3, [r4, #16]
 80045de:	f04f 0a00 	mov.w	sl, #0
 80045e2:	65a1      	str	r1, [r4, #88]	; 0x58
 80045e4:	e7df      	b.n	80045a6 <_printf_float+0x162>
 80045e6:	b913      	cbnz	r3, 80045ee <_printf_float+0x1aa>
 80045e8:	6822      	ldr	r2, [r4, #0]
 80045ea:	07d2      	lsls	r2, r2, #31
 80045ec:	d501      	bpl.n	80045f2 <_printf_float+0x1ae>
 80045ee:	3302      	adds	r3, #2
 80045f0:	e7f4      	b.n	80045dc <_printf_float+0x198>
 80045f2:	2301      	movs	r3, #1
 80045f4:	e7f2      	b.n	80045dc <_printf_float+0x198>
 80045f6:	f04f 0967 	mov.w	r9, #103	; 0x67
 80045fa:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80045fc:	4299      	cmp	r1, r3
 80045fe:	db05      	blt.n	800460c <_printf_float+0x1c8>
 8004600:	6823      	ldr	r3, [r4, #0]
 8004602:	6121      	str	r1, [r4, #16]
 8004604:	07d8      	lsls	r0, r3, #31
 8004606:	d5ea      	bpl.n	80045de <_printf_float+0x19a>
 8004608:	1c4b      	adds	r3, r1, #1
 800460a:	e7e7      	b.n	80045dc <_printf_float+0x198>
 800460c:	2900      	cmp	r1, #0
 800460e:	bfcc      	ite	gt
 8004610:	2201      	movgt	r2, #1
 8004612:	f1c1 0202 	rsble	r2, r1, #2
 8004616:	4413      	add	r3, r2
 8004618:	e7e0      	b.n	80045dc <_printf_float+0x198>
 800461a:	6823      	ldr	r3, [r4, #0]
 800461c:	055a      	lsls	r2, r3, #21
 800461e:	d407      	bmi.n	8004630 <_printf_float+0x1ec>
 8004620:	6923      	ldr	r3, [r4, #16]
 8004622:	4642      	mov	r2, r8
 8004624:	4631      	mov	r1, r6
 8004626:	4628      	mov	r0, r5
 8004628:	47b8      	blx	r7
 800462a:	3001      	adds	r0, #1
 800462c:	d12b      	bne.n	8004686 <_printf_float+0x242>
 800462e:	e764      	b.n	80044fa <_printf_float+0xb6>
 8004630:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004634:	f240 80dd 	bls.w	80047f2 <_printf_float+0x3ae>
 8004638:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800463c:	2200      	movs	r2, #0
 800463e:	2300      	movs	r3, #0
 8004640:	f7fc f9b2 	bl	80009a8 <__aeabi_dcmpeq>
 8004644:	2800      	cmp	r0, #0
 8004646:	d033      	beq.n	80046b0 <_printf_float+0x26c>
 8004648:	2301      	movs	r3, #1
 800464a:	4631      	mov	r1, r6
 800464c:	4628      	mov	r0, r5
 800464e:	4a35      	ldr	r2, [pc, #212]	; (8004724 <_printf_float+0x2e0>)
 8004650:	47b8      	blx	r7
 8004652:	3001      	adds	r0, #1
 8004654:	f43f af51 	beq.w	80044fa <_printf_float+0xb6>
 8004658:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 800465c:	429a      	cmp	r2, r3
 800465e:	db02      	blt.n	8004666 <_printf_float+0x222>
 8004660:	6823      	ldr	r3, [r4, #0]
 8004662:	07d8      	lsls	r0, r3, #31
 8004664:	d50f      	bpl.n	8004686 <_printf_float+0x242>
 8004666:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800466a:	4631      	mov	r1, r6
 800466c:	4628      	mov	r0, r5
 800466e:	47b8      	blx	r7
 8004670:	3001      	adds	r0, #1
 8004672:	f43f af42 	beq.w	80044fa <_printf_float+0xb6>
 8004676:	f04f 0800 	mov.w	r8, #0
 800467a:	f104 091a 	add.w	r9, r4, #26
 800467e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004680:	3b01      	subs	r3, #1
 8004682:	4543      	cmp	r3, r8
 8004684:	dc09      	bgt.n	800469a <_printf_float+0x256>
 8004686:	6823      	ldr	r3, [r4, #0]
 8004688:	079b      	lsls	r3, r3, #30
 800468a:	f100 8102 	bmi.w	8004892 <_printf_float+0x44e>
 800468e:	68e0      	ldr	r0, [r4, #12]
 8004690:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8004692:	4298      	cmp	r0, r3
 8004694:	bfb8      	it	lt
 8004696:	4618      	movlt	r0, r3
 8004698:	e731      	b.n	80044fe <_printf_float+0xba>
 800469a:	2301      	movs	r3, #1
 800469c:	464a      	mov	r2, r9
 800469e:	4631      	mov	r1, r6
 80046a0:	4628      	mov	r0, r5
 80046a2:	47b8      	blx	r7
 80046a4:	3001      	adds	r0, #1
 80046a6:	f43f af28 	beq.w	80044fa <_printf_float+0xb6>
 80046aa:	f108 0801 	add.w	r8, r8, #1
 80046ae:	e7e6      	b.n	800467e <_printf_float+0x23a>
 80046b0:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046b2:	2b00      	cmp	r3, #0
 80046b4:	dc38      	bgt.n	8004728 <_printf_float+0x2e4>
 80046b6:	2301      	movs	r3, #1
 80046b8:	4631      	mov	r1, r6
 80046ba:	4628      	mov	r0, r5
 80046bc:	4a19      	ldr	r2, [pc, #100]	; (8004724 <_printf_float+0x2e0>)
 80046be:	47b8      	blx	r7
 80046c0:	3001      	adds	r0, #1
 80046c2:	f43f af1a 	beq.w	80044fa <_printf_float+0xb6>
 80046c6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80046ca:	4313      	orrs	r3, r2
 80046cc:	d102      	bne.n	80046d4 <_printf_float+0x290>
 80046ce:	6823      	ldr	r3, [r4, #0]
 80046d0:	07d9      	lsls	r1, r3, #31
 80046d2:	d5d8      	bpl.n	8004686 <_printf_float+0x242>
 80046d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80046d8:	4631      	mov	r1, r6
 80046da:	4628      	mov	r0, r5
 80046dc:	47b8      	blx	r7
 80046de:	3001      	adds	r0, #1
 80046e0:	f43f af0b 	beq.w	80044fa <_printf_float+0xb6>
 80046e4:	f04f 0900 	mov.w	r9, #0
 80046e8:	f104 0a1a 	add.w	sl, r4, #26
 80046ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80046ee:	425b      	negs	r3, r3
 80046f0:	454b      	cmp	r3, r9
 80046f2:	dc01      	bgt.n	80046f8 <_printf_float+0x2b4>
 80046f4:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80046f6:	e794      	b.n	8004622 <_printf_float+0x1de>
 80046f8:	2301      	movs	r3, #1
 80046fa:	4652      	mov	r2, sl
 80046fc:	4631      	mov	r1, r6
 80046fe:	4628      	mov	r0, r5
 8004700:	47b8      	blx	r7
 8004702:	3001      	adds	r0, #1
 8004704:	f43f aef9 	beq.w	80044fa <_printf_float+0xb6>
 8004708:	f109 0901 	add.w	r9, r9, #1
 800470c:	e7ee      	b.n	80046ec <_printf_float+0x2a8>
 800470e:	bf00      	nop
 8004710:	7fefffff 	.word	0x7fefffff
 8004714:	0800725c 	.word	0x0800725c
 8004718:	08007260 	.word	0x08007260
 800471c:	08007268 	.word	0x08007268
 8004720:	08007264 	.word	0x08007264
 8004724:	0800726c 	.word	0x0800726c
 8004728:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800472a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800472c:	429a      	cmp	r2, r3
 800472e:	bfa8      	it	ge
 8004730:	461a      	movge	r2, r3
 8004732:	2a00      	cmp	r2, #0
 8004734:	4691      	mov	r9, r2
 8004736:	dc37      	bgt.n	80047a8 <_printf_float+0x364>
 8004738:	f04f 0b00 	mov.w	fp, #0
 800473c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004740:	f104 021a 	add.w	r2, r4, #26
 8004744:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 8004748:	ebaa 0309 	sub.w	r3, sl, r9
 800474c:	455b      	cmp	r3, fp
 800474e:	dc33      	bgt.n	80047b8 <_printf_float+0x374>
 8004750:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004754:	429a      	cmp	r2, r3
 8004756:	db3b      	blt.n	80047d0 <_printf_float+0x38c>
 8004758:	6823      	ldr	r3, [r4, #0]
 800475a:	07da      	lsls	r2, r3, #31
 800475c:	d438      	bmi.n	80047d0 <_printf_float+0x38c>
 800475e:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004760:	990d      	ldr	r1, [sp, #52]	; 0x34
 8004762:	eba2 030a 	sub.w	r3, r2, sl
 8004766:	eba2 0901 	sub.w	r9, r2, r1
 800476a:	4599      	cmp	r9, r3
 800476c:	bfa8      	it	ge
 800476e:	4699      	movge	r9, r3
 8004770:	f1b9 0f00 	cmp.w	r9, #0
 8004774:	dc34      	bgt.n	80047e0 <_printf_float+0x39c>
 8004776:	f04f 0800 	mov.w	r8, #0
 800477a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800477e:	f104 0a1a 	add.w	sl, r4, #26
 8004782:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004786:	1a9b      	subs	r3, r3, r2
 8004788:	eba3 0309 	sub.w	r3, r3, r9
 800478c:	4543      	cmp	r3, r8
 800478e:	f77f af7a 	ble.w	8004686 <_printf_float+0x242>
 8004792:	2301      	movs	r3, #1
 8004794:	4652      	mov	r2, sl
 8004796:	4631      	mov	r1, r6
 8004798:	4628      	mov	r0, r5
 800479a:	47b8      	blx	r7
 800479c:	3001      	adds	r0, #1
 800479e:	f43f aeac 	beq.w	80044fa <_printf_float+0xb6>
 80047a2:	f108 0801 	add.w	r8, r8, #1
 80047a6:	e7ec      	b.n	8004782 <_printf_float+0x33e>
 80047a8:	4613      	mov	r3, r2
 80047aa:	4631      	mov	r1, r6
 80047ac:	4642      	mov	r2, r8
 80047ae:	4628      	mov	r0, r5
 80047b0:	47b8      	blx	r7
 80047b2:	3001      	adds	r0, #1
 80047b4:	d1c0      	bne.n	8004738 <_printf_float+0x2f4>
 80047b6:	e6a0      	b.n	80044fa <_printf_float+0xb6>
 80047b8:	2301      	movs	r3, #1
 80047ba:	4631      	mov	r1, r6
 80047bc:	4628      	mov	r0, r5
 80047be:	920b      	str	r2, [sp, #44]	; 0x2c
 80047c0:	47b8      	blx	r7
 80047c2:	3001      	adds	r0, #1
 80047c4:	f43f ae99 	beq.w	80044fa <_printf_float+0xb6>
 80047c8:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80047ca:	f10b 0b01 	add.w	fp, fp, #1
 80047ce:	e7b9      	b.n	8004744 <_printf_float+0x300>
 80047d0:	4631      	mov	r1, r6
 80047d2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80047d6:	4628      	mov	r0, r5
 80047d8:	47b8      	blx	r7
 80047da:	3001      	adds	r0, #1
 80047dc:	d1bf      	bne.n	800475e <_printf_float+0x31a>
 80047de:	e68c      	b.n	80044fa <_printf_float+0xb6>
 80047e0:	464b      	mov	r3, r9
 80047e2:	4631      	mov	r1, r6
 80047e4:	4628      	mov	r0, r5
 80047e6:	eb08 020a 	add.w	r2, r8, sl
 80047ea:	47b8      	blx	r7
 80047ec:	3001      	adds	r0, #1
 80047ee:	d1c2      	bne.n	8004776 <_printf_float+0x332>
 80047f0:	e683      	b.n	80044fa <_printf_float+0xb6>
 80047f2:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047f4:	2a01      	cmp	r2, #1
 80047f6:	dc01      	bgt.n	80047fc <_printf_float+0x3b8>
 80047f8:	07db      	lsls	r3, r3, #31
 80047fa:	d537      	bpl.n	800486c <_printf_float+0x428>
 80047fc:	2301      	movs	r3, #1
 80047fe:	4642      	mov	r2, r8
 8004800:	4631      	mov	r1, r6
 8004802:	4628      	mov	r0, r5
 8004804:	47b8      	blx	r7
 8004806:	3001      	adds	r0, #1
 8004808:	f43f ae77 	beq.w	80044fa <_printf_float+0xb6>
 800480c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004810:	4631      	mov	r1, r6
 8004812:	4628      	mov	r0, r5
 8004814:	47b8      	blx	r7
 8004816:	3001      	adds	r0, #1
 8004818:	f43f ae6f 	beq.w	80044fa <_printf_float+0xb6>
 800481c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004820:	2200      	movs	r2, #0
 8004822:	2300      	movs	r3, #0
 8004824:	f7fc f8c0 	bl	80009a8 <__aeabi_dcmpeq>
 8004828:	b9d8      	cbnz	r0, 8004862 <_printf_float+0x41e>
 800482a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800482c:	f108 0201 	add.w	r2, r8, #1
 8004830:	3b01      	subs	r3, #1
 8004832:	4631      	mov	r1, r6
 8004834:	4628      	mov	r0, r5
 8004836:	47b8      	blx	r7
 8004838:	3001      	adds	r0, #1
 800483a:	d10e      	bne.n	800485a <_printf_float+0x416>
 800483c:	e65d      	b.n	80044fa <_printf_float+0xb6>
 800483e:	2301      	movs	r3, #1
 8004840:	464a      	mov	r2, r9
 8004842:	4631      	mov	r1, r6
 8004844:	4628      	mov	r0, r5
 8004846:	47b8      	blx	r7
 8004848:	3001      	adds	r0, #1
 800484a:	f43f ae56 	beq.w	80044fa <_printf_float+0xb6>
 800484e:	f108 0801 	add.w	r8, r8, #1
 8004852:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004854:	3b01      	subs	r3, #1
 8004856:	4543      	cmp	r3, r8
 8004858:	dcf1      	bgt.n	800483e <_printf_float+0x3fa>
 800485a:	4653      	mov	r3, sl
 800485c:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004860:	e6e0      	b.n	8004624 <_printf_float+0x1e0>
 8004862:	f04f 0800 	mov.w	r8, #0
 8004866:	f104 091a 	add.w	r9, r4, #26
 800486a:	e7f2      	b.n	8004852 <_printf_float+0x40e>
 800486c:	2301      	movs	r3, #1
 800486e:	4642      	mov	r2, r8
 8004870:	e7df      	b.n	8004832 <_printf_float+0x3ee>
 8004872:	2301      	movs	r3, #1
 8004874:	464a      	mov	r2, r9
 8004876:	4631      	mov	r1, r6
 8004878:	4628      	mov	r0, r5
 800487a:	47b8      	blx	r7
 800487c:	3001      	adds	r0, #1
 800487e:	f43f ae3c 	beq.w	80044fa <_printf_float+0xb6>
 8004882:	f108 0801 	add.w	r8, r8, #1
 8004886:	68e3      	ldr	r3, [r4, #12]
 8004888:	990f      	ldr	r1, [sp, #60]	; 0x3c
 800488a:	1a5b      	subs	r3, r3, r1
 800488c:	4543      	cmp	r3, r8
 800488e:	dcf0      	bgt.n	8004872 <_printf_float+0x42e>
 8004890:	e6fd      	b.n	800468e <_printf_float+0x24a>
 8004892:	f04f 0800 	mov.w	r8, #0
 8004896:	f104 0919 	add.w	r9, r4, #25
 800489a:	e7f4      	b.n	8004886 <_printf_float+0x442>

0800489c <_printf_common>:
 800489c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80048a0:	4616      	mov	r6, r2
 80048a2:	4699      	mov	r9, r3
 80048a4:	688a      	ldr	r2, [r1, #8]
 80048a6:	690b      	ldr	r3, [r1, #16]
 80048a8:	4607      	mov	r7, r0
 80048aa:	4293      	cmp	r3, r2
 80048ac:	bfb8      	it	lt
 80048ae:	4613      	movlt	r3, r2
 80048b0:	6033      	str	r3, [r6, #0]
 80048b2:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 80048b6:	460c      	mov	r4, r1
 80048b8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80048bc:	b10a      	cbz	r2, 80048c2 <_printf_common+0x26>
 80048be:	3301      	adds	r3, #1
 80048c0:	6033      	str	r3, [r6, #0]
 80048c2:	6823      	ldr	r3, [r4, #0]
 80048c4:	0699      	lsls	r1, r3, #26
 80048c6:	bf42      	ittt	mi
 80048c8:	6833      	ldrmi	r3, [r6, #0]
 80048ca:	3302      	addmi	r3, #2
 80048cc:	6033      	strmi	r3, [r6, #0]
 80048ce:	6825      	ldr	r5, [r4, #0]
 80048d0:	f015 0506 	ands.w	r5, r5, #6
 80048d4:	d106      	bne.n	80048e4 <_printf_common+0x48>
 80048d6:	f104 0a19 	add.w	sl, r4, #25
 80048da:	68e3      	ldr	r3, [r4, #12]
 80048dc:	6832      	ldr	r2, [r6, #0]
 80048de:	1a9b      	subs	r3, r3, r2
 80048e0:	42ab      	cmp	r3, r5
 80048e2:	dc28      	bgt.n	8004936 <_printf_common+0x9a>
 80048e4:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80048e8:	1e13      	subs	r3, r2, #0
 80048ea:	6822      	ldr	r2, [r4, #0]
 80048ec:	bf18      	it	ne
 80048ee:	2301      	movne	r3, #1
 80048f0:	0692      	lsls	r2, r2, #26
 80048f2:	d42d      	bmi.n	8004950 <_printf_common+0xb4>
 80048f4:	4649      	mov	r1, r9
 80048f6:	4638      	mov	r0, r7
 80048f8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80048fc:	47c0      	blx	r8
 80048fe:	3001      	adds	r0, #1
 8004900:	d020      	beq.n	8004944 <_printf_common+0xa8>
 8004902:	6823      	ldr	r3, [r4, #0]
 8004904:	68e5      	ldr	r5, [r4, #12]
 8004906:	f003 0306 	and.w	r3, r3, #6
 800490a:	2b04      	cmp	r3, #4
 800490c:	bf18      	it	ne
 800490e:	2500      	movne	r5, #0
 8004910:	6832      	ldr	r2, [r6, #0]
 8004912:	f04f 0600 	mov.w	r6, #0
 8004916:	68a3      	ldr	r3, [r4, #8]
 8004918:	bf08      	it	eq
 800491a:	1aad      	subeq	r5, r5, r2
 800491c:	6922      	ldr	r2, [r4, #16]
 800491e:	bf08      	it	eq
 8004920:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004924:	4293      	cmp	r3, r2
 8004926:	bfc4      	itt	gt
 8004928:	1a9b      	subgt	r3, r3, r2
 800492a:	18ed      	addgt	r5, r5, r3
 800492c:	341a      	adds	r4, #26
 800492e:	42b5      	cmp	r5, r6
 8004930:	d11a      	bne.n	8004968 <_printf_common+0xcc>
 8004932:	2000      	movs	r0, #0
 8004934:	e008      	b.n	8004948 <_printf_common+0xac>
 8004936:	2301      	movs	r3, #1
 8004938:	4652      	mov	r2, sl
 800493a:	4649      	mov	r1, r9
 800493c:	4638      	mov	r0, r7
 800493e:	47c0      	blx	r8
 8004940:	3001      	adds	r0, #1
 8004942:	d103      	bne.n	800494c <_printf_common+0xb0>
 8004944:	f04f 30ff 	mov.w	r0, #4294967295
 8004948:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800494c:	3501      	adds	r5, #1
 800494e:	e7c4      	b.n	80048da <_printf_common+0x3e>
 8004950:	2030      	movs	r0, #48	; 0x30
 8004952:	18e1      	adds	r1, r4, r3
 8004954:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004958:	1c5a      	adds	r2, r3, #1
 800495a:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800495e:	4422      	add	r2, r4
 8004960:	3302      	adds	r3, #2
 8004962:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004966:	e7c5      	b.n	80048f4 <_printf_common+0x58>
 8004968:	2301      	movs	r3, #1
 800496a:	4622      	mov	r2, r4
 800496c:	4649      	mov	r1, r9
 800496e:	4638      	mov	r0, r7
 8004970:	47c0      	blx	r8
 8004972:	3001      	adds	r0, #1
 8004974:	d0e6      	beq.n	8004944 <_printf_common+0xa8>
 8004976:	3601      	adds	r6, #1
 8004978:	e7d9      	b.n	800492e <_printf_common+0x92>
	...

0800497c <_printf_i>:
 800497c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004980:	460c      	mov	r4, r1
 8004982:	7e27      	ldrb	r7, [r4, #24]
 8004984:	4691      	mov	r9, r2
 8004986:	2f78      	cmp	r7, #120	; 0x78
 8004988:	4680      	mov	r8, r0
 800498a:	469a      	mov	sl, r3
 800498c:	990c      	ldr	r1, [sp, #48]	; 0x30
 800498e:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004992:	d807      	bhi.n	80049a4 <_printf_i+0x28>
 8004994:	2f62      	cmp	r7, #98	; 0x62
 8004996:	d80a      	bhi.n	80049ae <_printf_i+0x32>
 8004998:	2f00      	cmp	r7, #0
 800499a:	f000 80d9 	beq.w	8004b50 <_printf_i+0x1d4>
 800499e:	2f58      	cmp	r7, #88	; 0x58
 80049a0:	f000 80a4 	beq.w	8004aec <_printf_i+0x170>
 80049a4:	f104 0642 	add.w	r6, r4, #66	; 0x42
 80049a8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80049ac:	e03a      	b.n	8004a24 <_printf_i+0xa8>
 80049ae:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80049b2:	2b15      	cmp	r3, #21
 80049b4:	d8f6      	bhi.n	80049a4 <_printf_i+0x28>
 80049b6:	a001      	add	r0, pc, #4	; (adr r0, 80049bc <_printf_i+0x40>)
 80049b8:	f850 f023 	ldr.w	pc, [r0, r3, lsl #2]
 80049bc:	08004a15 	.word	0x08004a15
 80049c0:	08004a29 	.word	0x08004a29
 80049c4:	080049a5 	.word	0x080049a5
 80049c8:	080049a5 	.word	0x080049a5
 80049cc:	080049a5 	.word	0x080049a5
 80049d0:	080049a5 	.word	0x080049a5
 80049d4:	08004a29 	.word	0x08004a29
 80049d8:	080049a5 	.word	0x080049a5
 80049dc:	080049a5 	.word	0x080049a5
 80049e0:	080049a5 	.word	0x080049a5
 80049e4:	080049a5 	.word	0x080049a5
 80049e8:	08004b37 	.word	0x08004b37
 80049ec:	08004a59 	.word	0x08004a59
 80049f0:	08004b19 	.word	0x08004b19
 80049f4:	080049a5 	.word	0x080049a5
 80049f8:	080049a5 	.word	0x080049a5
 80049fc:	08004b59 	.word	0x08004b59
 8004a00:	080049a5 	.word	0x080049a5
 8004a04:	08004a59 	.word	0x08004a59
 8004a08:	080049a5 	.word	0x080049a5
 8004a0c:	080049a5 	.word	0x080049a5
 8004a10:	08004b21 	.word	0x08004b21
 8004a14:	680b      	ldr	r3, [r1, #0]
 8004a16:	f104 0642 	add.w	r6, r4, #66	; 0x42
 8004a1a:	1d1a      	adds	r2, r3, #4
 8004a1c:	681b      	ldr	r3, [r3, #0]
 8004a1e:	600a      	str	r2, [r1, #0]
 8004a20:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004a24:	2301      	movs	r3, #1
 8004a26:	e0a4      	b.n	8004b72 <_printf_i+0x1f6>
 8004a28:	6825      	ldr	r5, [r4, #0]
 8004a2a:	6808      	ldr	r0, [r1, #0]
 8004a2c:	062e      	lsls	r6, r5, #24
 8004a2e:	f100 0304 	add.w	r3, r0, #4
 8004a32:	d50a      	bpl.n	8004a4a <_printf_i+0xce>
 8004a34:	6805      	ldr	r5, [r0, #0]
 8004a36:	600b      	str	r3, [r1, #0]
 8004a38:	2d00      	cmp	r5, #0
 8004a3a:	da03      	bge.n	8004a44 <_printf_i+0xc8>
 8004a3c:	232d      	movs	r3, #45	; 0x2d
 8004a3e:	426d      	negs	r5, r5
 8004a40:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004a44:	230a      	movs	r3, #10
 8004a46:	485e      	ldr	r0, [pc, #376]	; (8004bc0 <_printf_i+0x244>)
 8004a48:	e019      	b.n	8004a7e <_printf_i+0x102>
 8004a4a:	f015 0f40 	tst.w	r5, #64	; 0x40
 8004a4e:	6805      	ldr	r5, [r0, #0]
 8004a50:	600b      	str	r3, [r1, #0]
 8004a52:	bf18      	it	ne
 8004a54:	b22d      	sxthne	r5, r5
 8004a56:	e7ef      	b.n	8004a38 <_printf_i+0xbc>
 8004a58:	680b      	ldr	r3, [r1, #0]
 8004a5a:	6825      	ldr	r5, [r4, #0]
 8004a5c:	1d18      	adds	r0, r3, #4
 8004a5e:	6008      	str	r0, [r1, #0]
 8004a60:	0628      	lsls	r0, r5, #24
 8004a62:	d501      	bpl.n	8004a68 <_printf_i+0xec>
 8004a64:	681d      	ldr	r5, [r3, #0]
 8004a66:	e002      	b.n	8004a6e <_printf_i+0xf2>
 8004a68:	0669      	lsls	r1, r5, #25
 8004a6a:	d5fb      	bpl.n	8004a64 <_printf_i+0xe8>
 8004a6c:	881d      	ldrh	r5, [r3, #0]
 8004a6e:	2f6f      	cmp	r7, #111	; 0x6f
 8004a70:	bf0c      	ite	eq
 8004a72:	2308      	moveq	r3, #8
 8004a74:	230a      	movne	r3, #10
 8004a76:	4852      	ldr	r0, [pc, #328]	; (8004bc0 <_printf_i+0x244>)
 8004a78:	2100      	movs	r1, #0
 8004a7a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004a7e:	6866      	ldr	r6, [r4, #4]
 8004a80:	2e00      	cmp	r6, #0
 8004a82:	bfa8      	it	ge
 8004a84:	6821      	ldrge	r1, [r4, #0]
 8004a86:	60a6      	str	r6, [r4, #8]
 8004a88:	bfa4      	itt	ge
 8004a8a:	f021 0104 	bicge.w	r1, r1, #4
 8004a8e:	6021      	strge	r1, [r4, #0]
 8004a90:	b90d      	cbnz	r5, 8004a96 <_printf_i+0x11a>
 8004a92:	2e00      	cmp	r6, #0
 8004a94:	d04d      	beq.n	8004b32 <_printf_i+0x1b6>
 8004a96:	4616      	mov	r6, r2
 8004a98:	fbb5 f1f3 	udiv	r1, r5, r3
 8004a9c:	fb03 5711 	mls	r7, r3, r1, r5
 8004aa0:	5dc7      	ldrb	r7, [r0, r7]
 8004aa2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8004aa6:	462f      	mov	r7, r5
 8004aa8:	42bb      	cmp	r3, r7
 8004aaa:	460d      	mov	r5, r1
 8004aac:	d9f4      	bls.n	8004a98 <_printf_i+0x11c>
 8004aae:	2b08      	cmp	r3, #8
 8004ab0:	d10b      	bne.n	8004aca <_printf_i+0x14e>
 8004ab2:	6823      	ldr	r3, [r4, #0]
 8004ab4:	07df      	lsls	r7, r3, #31
 8004ab6:	d508      	bpl.n	8004aca <_printf_i+0x14e>
 8004ab8:	6923      	ldr	r3, [r4, #16]
 8004aba:	6861      	ldr	r1, [r4, #4]
 8004abc:	4299      	cmp	r1, r3
 8004abe:	bfde      	ittt	le
 8004ac0:	2330      	movle	r3, #48	; 0x30
 8004ac2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8004ac6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8004aca:	1b92      	subs	r2, r2, r6
 8004acc:	6122      	str	r2, [r4, #16]
 8004ace:	464b      	mov	r3, r9
 8004ad0:	4621      	mov	r1, r4
 8004ad2:	4640      	mov	r0, r8
 8004ad4:	f8cd a000 	str.w	sl, [sp]
 8004ad8:	aa03      	add	r2, sp, #12
 8004ada:	f7ff fedf 	bl	800489c <_printf_common>
 8004ade:	3001      	adds	r0, #1
 8004ae0:	d14c      	bne.n	8004b7c <_printf_i+0x200>
 8004ae2:	f04f 30ff 	mov.w	r0, #4294967295
 8004ae6:	b004      	add	sp, #16
 8004ae8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004aec:	4834      	ldr	r0, [pc, #208]	; (8004bc0 <_printf_i+0x244>)
 8004aee:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004af2:	680e      	ldr	r6, [r1, #0]
 8004af4:	6823      	ldr	r3, [r4, #0]
 8004af6:	f856 5b04 	ldr.w	r5, [r6], #4
 8004afa:	061f      	lsls	r7, r3, #24
 8004afc:	600e      	str	r6, [r1, #0]
 8004afe:	d514      	bpl.n	8004b2a <_printf_i+0x1ae>
 8004b00:	07d9      	lsls	r1, r3, #31
 8004b02:	bf44      	itt	mi
 8004b04:	f043 0320 	orrmi.w	r3, r3, #32
 8004b08:	6023      	strmi	r3, [r4, #0]
 8004b0a:	b91d      	cbnz	r5, 8004b14 <_printf_i+0x198>
 8004b0c:	6823      	ldr	r3, [r4, #0]
 8004b0e:	f023 0320 	bic.w	r3, r3, #32
 8004b12:	6023      	str	r3, [r4, #0]
 8004b14:	2310      	movs	r3, #16
 8004b16:	e7af      	b.n	8004a78 <_printf_i+0xfc>
 8004b18:	6823      	ldr	r3, [r4, #0]
 8004b1a:	f043 0320 	orr.w	r3, r3, #32
 8004b1e:	6023      	str	r3, [r4, #0]
 8004b20:	2378      	movs	r3, #120	; 0x78
 8004b22:	4828      	ldr	r0, [pc, #160]	; (8004bc4 <_printf_i+0x248>)
 8004b24:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8004b28:	e7e3      	b.n	8004af2 <_printf_i+0x176>
 8004b2a:	065e      	lsls	r6, r3, #25
 8004b2c:	bf48      	it	mi
 8004b2e:	b2ad      	uxthmi	r5, r5
 8004b30:	e7e6      	b.n	8004b00 <_printf_i+0x184>
 8004b32:	4616      	mov	r6, r2
 8004b34:	e7bb      	b.n	8004aae <_printf_i+0x132>
 8004b36:	680b      	ldr	r3, [r1, #0]
 8004b38:	6826      	ldr	r6, [r4, #0]
 8004b3a:	1d1d      	adds	r5, r3, #4
 8004b3c:	6960      	ldr	r0, [r4, #20]
 8004b3e:	600d      	str	r5, [r1, #0]
 8004b40:	0635      	lsls	r5, r6, #24
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	d501      	bpl.n	8004b4a <_printf_i+0x1ce>
 8004b46:	6018      	str	r0, [r3, #0]
 8004b48:	e002      	b.n	8004b50 <_printf_i+0x1d4>
 8004b4a:	0671      	lsls	r1, r6, #25
 8004b4c:	d5fb      	bpl.n	8004b46 <_printf_i+0x1ca>
 8004b4e:	8018      	strh	r0, [r3, #0]
 8004b50:	2300      	movs	r3, #0
 8004b52:	4616      	mov	r6, r2
 8004b54:	6123      	str	r3, [r4, #16]
 8004b56:	e7ba      	b.n	8004ace <_printf_i+0x152>
 8004b58:	680b      	ldr	r3, [r1, #0]
 8004b5a:	1d1a      	adds	r2, r3, #4
 8004b5c:	600a      	str	r2, [r1, #0]
 8004b5e:	681e      	ldr	r6, [r3, #0]
 8004b60:	2100      	movs	r1, #0
 8004b62:	4630      	mov	r0, r6
 8004b64:	6862      	ldr	r2, [r4, #4]
 8004b66:	f000 ff11 	bl	800598c <memchr>
 8004b6a:	b108      	cbz	r0, 8004b70 <_printf_i+0x1f4>
 8004b6c:	1b80      	subs	r0, r0, r6
 8004b6e:	6060      	str	r0, [r4, #4]
 8004b70:	6863      	ldr	r3, [r4, #4]
 8004b72:	6123      	str	r3, [r4, #16]
 8004b74:	2300      	movs	r3, #0
 8004b76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004b7a:	e7a8      	b.n	8004ace <_printf_i+0x152>
 8004b7c:	4632      	mov	r2, r6
 8004b7e:	4649      	mov	r1, r9
 8004b80:	4640      	mov	r0, r8
 8004b82:	6923      	ldr	r3, [r4, #16]
 8004b84:	47d0      	blx	sl
 8004b86:	3001      	adds	r0, #1
 8004b88:	d0ab      	beq.n	8004ae2 <_printf_i+0x166>
 8004b8a:	6823      	ldr	r3, [r4, #0]
 8004b8c:	079b      	lsls	r3, r3, #30
 8004b8e:	d413      	bmi.n	8004bb8 <_printf_i+0x23c>
 8004b90:	68e0      	ldr	r0, [r4, #12]
 8004b92:	9b03      	ldr	r3, [sp, #12]
 8004b94:	4298      	cmp	r0, r3
 8004b96:	bfb8      	it	lt
 8004b98:	4618      	movlt	r0, r3
 8004b9a:	e7a4      	b.n	8004ae6 <_printf_i+0x16a>
 8004b9c:	2301      	movs	r3, #1
 8004b9e:	4632      	mov	r2, r6
 8004ba0:	4649      	mov	r1, r9
 8004ba2:	4640      	mov	r0, r8
 8004ba4:	47d0      	blx	sl
 8004ba6:	3001      	adds	r0, #1
 8004ba8:	d09b      	beq.n	8004ae2 <_printf_i+0x166>
 8004baa:	3501      	adds	r5, #1
 8004bac:	68e3      	ldr	r3, [r4, #12]
 8004bae:	9903      	ldr	r1, [sp, #12]
 8004bb0:	1a5b      	subs	r3, r3, r1
 8004bb2:	42ab      	cmp	r3, r5
 8004bb4:	dcf2      	bgt.n	8004b9c <_printf_i+0x220>
 8004bb6:	e7eb      	b.n	8004b90 <_printf_i+0x214>
 8004bb8:	2500      	movs	r5, #0
 8004bba:	f104 0619 	add.w	r6, r4, #25
 8004bbe:	e7f5      	b.n	8004bac <_printf_i+0x230>
 8004bc0:	0800726e 	.word	0x0800726e
 8004bc4:	0800727f 	.word	0x0800727f

08004bc8 <siprintf>:
 8004bc8:	b40e      	push	{r1, r2, r3}
 8004bca:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004bce:	b500      	push	{lr}
 8004bd0:	b09c      	sub	sp, #112	; 0x70
 8004bd2:	ab1d      	add	r3, sp, #116	; 0x74
 8004bd4:	9002      	str	r0, [sp, #8]
 8004bd6:	9006      	str	r0, [sp, #24]
 8004bd8:	9107      	str	r1, [sp, #28]
 8004bda:	9104      	str	r1, [sp, #16]
 8004bdc:	4808      	ldr	r0, [pc, #32]	; (8004c00 <siprintf+0x38>)
 8004bde:	4909      	ldr	r1, [pc, #36]	; (8004c04 <siprintf+0x3c>)
 8004be0:	f853 2b04 	ldr.w	r2, [r3], #4
 8004be4:	9105      	str	r1, [sp, #20]
 8004be6:	6800      	ldr	r0, [r0, #0]
 8004be8:	a902      	add	r1, sp, #8
 8004bea:	9301      	str	r3, [sp, #4]
 8004bec:	f001 fb6e 	bl	80062cc <_svfiprintf_r>
 8004bf0:	2200      	movs	r2, #0
 8004bf2:	9b02      	ldr	r3, [sp, #8]
 8004bf4:	701a      	strb	r2, [r3, #0]
 8004bf6:	b01c      	add	sp, #112	; 0x70
 8004bf8:	f85d eb04 	ldr.w	lr, [sp], #4
 8004bfc:	b003      	add	sp, #12
 8004bfe:	4770      	bx	lr
 8004c00:	20000014 	.word	0x20000014
 8004c04:	ffff0208 	.word	0xffff0208

08004c08 <strcat>:
 8004c08:	4602      	mov	r2, r0
 8004c0a:	b510      	push	{r4, lr}
 8004c0c:	7814      	ldrb	r4, [r2, #0]
 8004c0e:	4613      	mov	r3, r2
 8004c10:	3201      	adds	r2, #1
 8004c12:	2c00      	cmp	r4, #0
 8004c14:	d1fa      	bne.n	8004c0c <strcat+0x4>
 8004c16:	3b01      	subs	r3, #1
 8004c18:	f811 2b01 	ldrb.w	r2, [r1], #1
 8004c1c:	f803 2f01 	strb.w	r2, [r3, #1]!
 8004c20:	2a00      	cmp	r2, #0
 8004c22:	d1f9      	bne.n	8004c18 <strcat+0x10>
 8004c24:	bd10      	pop	{r4, pc}

08004c26 <strncmp>:
 8004c26:	b510      	push	{r4, lr}
 8004c28:	b16a      	cbz	r2, 8004c46 <strncmp+0x20>
 8004c2a:	3901      	subs	r1, #1
 8004c2c:	1884      	adds	r4, r0, r2
 8004c2e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8004c32:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 8004c36:	4293      	cmp	r3, r2
 8004c38:	d103      	bne.n	8004c42 <strncmp+0x1c>
 8004c3a:	42a0      	cmp	r0, r4
 8004c3c:	d001      	beq.n	8004c42 <strncmp+0x1c>
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1f5      	bne.n	8004c2e <strncmp+0x8>
 8004c42:	1a98      	subs	r0, r3, r2
 8004c44:	bd10      	pop	{r4, pc}
 8004c46:	4610      	mov	r0, r2
 8004c48:	e7fc      	b.n	8004c44 <strncmp+0x1e>

08004c4a <strstr>:
 8004c4a:	b5f0      	push	{r4, r5, r6, r7, lr}
 8004c4c:	780c      	ldrb	r4, [r1, #0]
 8004c4e:	b164      	cbz	r4, 8004c6a <strstr+0x20>
 8004c50:	4603      	mov	r3, r0
 8004c52:	781a      	ldrb	r2, [r3, #0]
 8004c54:	4618      	mov	r0, r3
 8004c56:	1c5e      	adds	r6, r3, #1
 8004c58:	b90a      	cbnz	r2, 8004c5e <strstr+0x14>
 8004c5a:	4610      	mov	r0, r2
 8004c5c:	e005      	b.n	8004c6a <strstr+0x20>
 8004c5e:	4294      	cmp	r4, r2
 8004c60:	d108      	bne.n	8004c74 <strstr+0x2a>
 8004c62:	460d      	mov	r5, r1
 8004c64:	f815 2f01 	ldrb.w	r2, [r5, #1]!
 8004c68:	b902      	cbnz	r2, 8004c6c <strstr+0x22>
 8004c6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004c6c:	f813 7f01 	ldrb.w	r7, [r3, #1]!
 8004c70:	4297      	cmp	r7, r2
 8004c72:	d0f7      	beq.n	8004c64 <strstr+0x1a>
 8004c74:	4633      	mov	r3, r6
 8004c76:	e7ec      	b.n	8004c52 <strstr+0x8>

08004c78 <quorem>:
 8004c78:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c7c:	6903      	ldr	r3, [r0, #16]
 8004c7e:	690c      	ldr	r4, [r1, #16]
 8004c80:	4607      	mov	r7, r0
 8004c82:	42a3      	cmp	r3, r4
 8004c84:	f2c0 8083 	blt.w	8004d8e <quorem+0x116>
 8004c88:	3c01      	subs	r4, #1
 8004c8a:	f100 0514 	add.w	r5, r0, #20
 8004c8e:	f101 0814 	add.w	r8, r1, #20
 8004c92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004c96:	9301      	str	r3, [sp, #4]
 8004c98:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8004c9c:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004ca0:	3301      	adds	r3, #1
 8004ca2:	429a      	cmp	r2, r3
 8004ca4:	fbb2 f6f3 	udiv	r6, r2, r3
 8004ca8:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8004cac:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8004cb0:	d332      	bcc.n	8004d18 <quorem+0xa0>
 8004cb2:	f04f 0e00 	mov.w	lr, #0
 8004cb6:	4640      	mov	r0, r8
 8004cb8:	46ac      	mov	ip, r5
 8004cba:	46f2      	mov	sl, lr
 8004cbc:	f850 2b04 	ldr.w	r2, [r0], #4
 8004cc0:	b293      	uxth	r3, r2
 8004cc2:	fb06 e303 	mla	r3, r6, r3, lr
 8004cc6:	0c12      	lsrs	r2, r2, #16
 8004cc8:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 8004ccc:	fb06 e202 	mla	r2, r6, r2, lr
 8004cd0:	b29b      	uxth	r3, r3
 8004cd2:	ebaa 0303 	sub.w	r3, sl, r3
 8004cd6:	f8dc a000 	ldr.w	sl, [ip]
 8004cda:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8004cde:	fa1f fa8a 	uxth.w	sl, sl
 8004ce2:	4453      	add	r3, sl
 8004ce4:	fa1f fa82 	uxth.w	sl, r2
 8004ce8:	f8dc 2000 	ldr.w	r2, [ip]
 8004cec:	4581      	cmp	r9, r0
 8004cee:	ebca 4212 	rsb	r2, sl, r2, lsr #16
 8004cf2:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004cf6:	b29b      	uxth	r3, r3
 8004cf8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004cfc:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8004d00:	f84c 3b04 	str.w	r3, [ip], #4
 8004d04:	d2da      	bcs.n	8004cbc <quorem+0x44>
 8004d06:	f855 300b 	ldr.w	r3, [r5, fp]
 8004d0a:	b92b      	cbnz	r3, 8004d18 <quorem+0xa0>
 8004d0c:	9b01      	ldr	r3, [sp, #4]
 8004d0e:	3b04      	subs	r3, #4
 8004d10:	429d      	cmp	r5, r3
 8004d12:	461a      	mov	r2, r3
 8004d14:	d32f      	bcc.n	8004d76 <quorem+0xfe>
 8004d16:	613c      	str	r4, [r7, #16]
 8004d18:	4638      	mov	r0, r7
 8004d1a:	f001 f8bf 	bl	8005e9c <__mcmp>
 8004d1e:	2800      	cmp	r0, #0
 8004d20:	db25      	blt.n	8004d6e <quorem+0xf6>
 8004d22:	4628      	mov	r0, r5
 8004d24:	f04f 0c00 	mov.w	ip, #0
 8004d28:	3601      	adds	r6, #1
 8004d2a:	f858 1b04 	ldr.w	r1, [r8], #4
 8004d2e:	f8d0 e000 	ldr.w	lr, [r0]
 8004d32:	b28b      	uxth	r3, r1
 8004d34:	ebac 0303 	sub.w	r3, ip, r3
 8004d38:	fa1f f28e 	uxth.w	r2, lr
 8004d3c:	4413      	add	r3, r2
 8004d3e:	0c0a      	lsrs	r2, r1, #16
 8004d40:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 8004d44:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8004d48:	b29b      	uxth	r3, r3
 8004d4a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8004d4e:	45c1      	cmp	r9, r8
 8004d50:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8004d54:	f840 3b04 	str.w	r3, [r0], #4
 8004d58:	d2e7      	bcs.n	8004d2a <quorem+0xb2>
 8004d5a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8004d5e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8004d62:	b922      	cbnz	r2, 8004d6e <quorem+0xf6>
 8004d64:	3b04      	subs	r3, #4
 8004d66:	429d      	cmp	r5, r3
 8004d68:	461a      	mov	r2, r3
 8004d6a:	d30a      	bcc.n	8004d82 <quorem+0x10a>
 8004d6c:	613c      	str	r4, [r7, #16]
 8004d6e:	4630      	mov	r0, r6
 8004d70:	b003      	add	sp, #12
 8004d72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d76:	6812      	ldr	r2, [r2, #0]
 8004d78:	3b04      	subs	r3, #4
 8004d7a:	2a00      	cmp	r2, #0
 8004d7c:	d1cb      	bne.n	8004d16 <quorem+0x9e>
 8004d7e:	3c01      	subs	r4, #1
 8004d80:	e7c6      	b.n	8004d10 <quorem+0x98>
 8004d82:	6812      	ldr	r2, [r2, #0]
 8004d84:	3b04      	subs	r3, #4
 8004d86:	2a00      	cmp	r2, #0
 8004d88:	d1f0      	bne.n	8004d6c <quorem+0xf4>
 8004d8a:	3c01      	subs	r4, #1
 8004d8c:	e7eb      	b.n	8004d66 <quorem+0xee>
 8004d8e:	2000      	movs	r0, #0
 8004d90:	e7ee      	b.n	8004d70 <quorem+0xf8>
 8004d92:	0000      	movs	r0, r0
 8004d94:	0000      	movs	r0, r0
	...

08004d98 <_dtoa_r>:
 8004d98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d9c:	4616      	mov	r6, r2
 8004d9e:	461f      	mov	r7, r3
 8004da0:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8004da2:	b099      	sub	sp, #100	; 0x64
 8004da4:	4605      	mov	r5, r0
 8004da6:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8004daa:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8004dae:	b974      	cbnz	r4, 8004dce <_dtoa_r+0x36>
 8004db0:	2010      	movs	r0, #16
 8004db2:	f000 fde3 	bl	800597c <malloc>
 8004db6:	4602      	mov	r2, r0
 8004db8:	6268      	str	r0, [r5, #36]	; 0x24
 8004dba:	b920      	cbnz	r0, 8004dc6 <_dtoa_r+0x2e>
 8004dbc:	21ea      	movs	r1, #234	; 0xea
 8004dbe:	4bae      	ldr	r3, [pc, #696]	; (8005078 <_dtoa_r+0x2e0>)
 8004dc0:	48ae      	ldr	r0, [pc, #696]	; (800507c <_dtoa_r+0x2e4>)
 8004dc2:	f001 fb93 	bl	80064ec <__assert_func>
 8004dc6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8004dca:	6004      	str	r4, [r0, #0]
 8004dcc:	60c4      	str	r4, [r0, #12]
 8004dce:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004dd0:	6819      	ldr	r1, [r3, #0]
 8004dd2:	b151      	cbz	r1, 8004dea <_dtoa_r+0x52>
 8004dd4:	685a      	ldr	r2, [r3, #4]
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	4093      	lsls	r3, r2
 8004dda:	604a      	str	r2, [r1, #4]
 8004ddc:	608b      	str	r3, [r1, #8]
 8004dde:	4628      	mov	r0, r5
 8004de0:	f000 fe22 	bl	8005a28 <_Bfree>
 8004de4:	2200      	movs	r2, #0
 8004de6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8004de8:	601a      	str	r2, [r3, #0]
 8004dea:	1e3b      	subs	r3, r7, #0
 8004dec:	bfaf      	iteee	ge
 8004dee:	2300      	movge	r3, #0
 8004df0:	2201      	movlt	r2, #1
 8004df2:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 8004df6:	9305      	strlt	r3, [sp, #20]
 8004df8:	bfa8      	it	ge
 8004dfa:	f8c8 3000 	strge.w	r3, [r8]
 8004dfe:	f8dd 9014 	ldr.w	r9, [sp, #20]
 8004e02:	4b9f      	ldr	r3, [pc, #636]	; (8005080 <_dtoa_r+0x2e8>)
 8004e04:	bfb8      	it	lt
 8004e06:	f8c8 2000 	strlt.w	r2, [r8]
 8004e0a:	ea33 0309 	bics.w	r3, r3, r9
 8004e0e:	d119      	bne.n	8004e44 <_dtoa_r+0xac>
 8004e10:	f242 730f 	movw	r3, #9999	; 0x270f
 8004e14:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e16:	6013      	str	r3, [r2, #0]
 8004e18:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8004e1c:	4333      	orrs	r3, r6
 8004e1e:	f000 8580 	beq.w	8005922 <_dtoa_r+0xb8a>
 8004e22:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e24:	b953      	cbnz	r3, 8004e3c <_dtoa_r+0xa4>
 8004e26:	4b97      	ldr	r3, [pc, #604]	; (8005084 <_dtoa_r+0x2ec>)
 8004e28:	e022      	b.n	8004e70 <_dtoa_r+0xd8>
 8004e2a:	4b97      	ldr	r3, [pc, #604]	; (8005088 <_dtoa_r+0x2f0>)
 8004e2c:	9308      	str	r3, [sp, #32]
 8004e2e:	3308      	adds	r3, #8
 8004e30:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8004e32:	6013      	str	r3, [r2, #0]
 8004e34:	9808      	ldr	r0, [sp, #32]
 8004e36:	b019      	add	sp, #100	; 0x64
 8004e38:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3c:	4b91      	ldr	r3, [pc, #580]	; (8005084 <_dtoa_r+0x2ec>)
 8004e3e:	9308      	str	r3, [sp, #32]
 8004e40:	3303      	adds	r3, #3
 8004e42:	e7f5      	b.n	8004e30 <_dtoa_r+0x98>
 8004e44:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 8004e48:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 8004e4c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e50:	2200      	movs	r2, #0
 8004e52:	2300      	movs	r3, #0
 8004e54:	f7fb fda8 	bl	80009a8 <__aeabi_dcmpeq>
 8004e58:	4680      	mov	r8, r0
 8004e5a:	b158      	cbz	r0, 8004e74 <_dtoa_r+0xdc>
 8004e5c:	2301      	movs	r3, #1
 8004e5e:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8004e60:	6013      	str	r3, [r2, #0]
 8004e62:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8004e64:	2b00      	cmp	r3, #0
 8004e66:	f000 8559 	beq.w	800591c <_dtoa_r+0xb84>
 8004e6a:	4888      	ldr	r0, [pc, #544]	; (800508c <_dtoa_r+0x2f4>)
 8004e6c:	6018      	str	r0, [r3, #0]
 8004e6e:	1e43      	subs	r3, r0, #1
 8004e70:	9308      	str	r3, [sp, #32]
 8004e72:	e7df      	b.n	8004e34 <_dtoa_r+0x9c>
 8004e74:	ab16      	add	r3, sp, #88	; 0x58
 8004e76:	9301      	str	r3, [sp, #4]
 8004e78:	ab17      	add	r3, sp, #92	; 0x5c
 8004e7a:	9300      	str	r3, [sp, #0]
 8004e7c:	4628      	mov	r0, r5
 8004e7e:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 8004e82:	f001 f8b7 	bl	8005ff4 <__d2b>
 8004e86:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8004e8a:	4682      	mov	sl, r0
 8004e8c:	2c00      	cmp	r4, #0
 8004e8e:	d07e      	beq.n	8004f8e <_dtoa_r+0x1f6>
 8004e90:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004e94:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004e96:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8004e9a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8004e9e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
 8004ea2:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
 8004ea6:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8004eaa:	2200      	movs	r2, #0
 8004eac:	4b78      	ldr	r3, [pc, #480]	; (8005090 <_dtoa_r+0x2f8>)
 8004eae:	f7fb f95b 	bl	8000168 <__aeabi_dsub>
 8004eb2:	a36b      	add	r3, pc, #428	; (adr r3, 8005060 <_dtoa_r+0x2c8>)
 8004eb4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eb8:	f7fb fb0e 	bl	80004d8 <__aeabi_dmul>
 8004ebc:	a36a      	add	r3, pc, #424	; (adr r3, 8005068 <_dtoa_r+0x2d0>)
 8004ebe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec2:	f7fb f953 	bl	800016c <__adddf3>
 8004ec6:	4606      	mov	r6, r0
 8004ec8:	4620      	mov	r0, r4
 8004eca:	460f      	mov	r7, r1
 8004ecc:	f7fb fa9a 	bl	8000404 <__aeabi_i2d>
 8004ed0:	a367      	add	r3, pc, #412	; (adr r3, 8005070 <_dtoa_r+0x2d8>)
 8004ed2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ed6:	f7fb faff 	bl	80004d8 <__aeabi_dmul>
 8004eda:	4602      	mov	r2, r0
 8004edc:	460b      	mov	r3, r1
 8004ede:	4630      	mov	r0, r6
 8004ee0:	4639      	mov	r1, r7
 8004ee2:	f7fb f943 	bl	800016c <__adddf3>
 8004ee6:	4606      	mov	r6, r0
 8004ee8:	460f      	mov	r7, r1
 8004eea:	f7fb fda5 	bl	8000a38 <__aeabi_d2iz>
 8004eee:	2200      	movs	r2, #0
 8004ef0:	4681      	mov	r9, r0
 8004ef2:	2300      	movs	r3, #0
 8004ef4:	4630      	mov	r0, r6
 8004ef6:	4639      	mov	r1, r7
 8004ef8:	f7fb fd60 	bl	80009bc <__aeabi_dcmplt>
 8004efc:	b148      	cbz	r0, 8004f12 <_dtoa_r+0x17a>
 8004efe:	4648      	mov	r0, r9
 8004f00:	f7fb fa80 	bl	8000404 <__aeabi_i2d>
 8004f04:	4632      	mov	r2, r6
 8004f06:	463b      	mov	r3, r7
 8004f08:	f7fb fd4e 	bl	80009a8 <__aeabi_dcmpeq>
 8004f0c:	b908      	cbnz	r0, 8004f12 <_dtoa_r+0x17a>
 8004f0e:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f12:	f1b9 0f16 	cmp.w	r9, #22
 8004f16:	d857      	bhi.n	8004fc8 <_dtoa_r+0x230>
 8004f18:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8004f1c:	4b5d      	ldr	r3, [pc, #372]	; (8005094 <_dtoa_r+0x2fc>)
 8004f1e:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 8004f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f26:	f7fb fd49 	bl	80009bc <__aeabi_dcmplt>
 8004f2a:	2800      	cmp	r0, #0
 8004f2c:	d04e      	beq.n	8004fcc <_dtoa_r+0x234>
 8004f2e:	2300      	movs	r3, #0
 8004f30:	f109 39ff 	add.w	r9, r9, #4294967295
 8004f34:	930f      	str	r3, [sp, #60]	; 0x3c
 8004f36:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8004f38:	1b1c      	subs	r4, r3, r4
 8004f3a:	1e63      	subs	r3, r4, #1
 8004f3c:	9309      	str	r3, [sp, #36]	; 0x24
 8004f3e:	bf49      	itett	mi
 8004f40:	f1c4 0301 	rsbmi	r3, r4, #1
 8004f44:	2300      	movpl	r3, #0
 8004f46:	9306      	strmi	r3, [sp, #24]
 8004f48:	2300      	movmi	r3, #0
 8004f4a:	bf54      	ite	pl
 8004f4c:	9306      	strpl	r3, [sp, #24]
 8004f4e:	9309      	strmi	r3, [sp, #36]	; 0x24
 8004f50:	f1b9 0f00 	cmp.w	r9, #0
 8004f54:	db3c      	blt.n	8004fd0 <_dtoa_r+0x238>
 8004f56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8004f58:	f8cd 9038 	str.w	r9, [sp, #56]	; 0x38
 8004f5c:	444b      	add	r3, r9
 8004f5e:	9309      	str	r3, [sp, #36]	; 0x24
 8004f60:	2300      	movs	r3, #0
 8004f62:	930a      	str	r3, [sp, #40]	; 0x28
 8004f64:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f66:	2b09      	cmp	r3, #9
 8004f68:	d86c      	bhi.n	8005044 <_dtoa_r+0x2ac>
 8004f6a:	2b05      	cmp	r3, #5
 8004f6c:	bfc4      	itt	gt
 8004f6e:	3b04      	subgt	r3, #4
 8004f70:	9322      	strgt	r3, [sp, #136]	; 0x88
 8004f72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8004f74:	bfc8      	it	gt
 8004f76:	2400      	movgt	r4, #0
 8004f78:	f1a3 0302 	sub.w	r3, r3, #2
 8004f7c:	bfd8      	it	le
 8004f7e:	2401      	movle	r4, #1
 8004f80:	2b03      	cmp	r3, #3
 8004f82:	f200 808b 	bhi.w	800509c <_dtoa_r+0x304>
 8004f86:	e8df f003 	tbb	[pc, r3]
 8004f8a:	4f2d      	.short	0x4f2d
 8004f8c:	5b4d      	.short	0x5b4d
 8004f8e:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 8004f92:	441c      	add	r4, r3
 8004f94:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8004f98:	2b20      	cmp	r3, #32
 8004f9a:	bfc3      	ittte	gt
 8004f9c:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8004fa0:	f204 4012 	addwgt	r0, r4, #1042	; 0x412
 8004fa4:	fa09 f303 	lslgt.w	r3, r9, r3
 8004fa8:	f1c3 0320 	rsble	r3, r3, #32
 8004fac:	bfc6      	itte	gt
 8004fae:	fa26 f000 	lsrgt.w	r0, r6, r0
 8004fb2:	4318      	orrgt	r0, r3
 8004fb4:	fa06 f003 	lslle.w	r0, r6, r3
 8004fb8:	f7fb fa14 	bl	80003e4 <__aeabi_ui2d>
 8004fbc:	2301      	movs	r3, #1
 8004fbe:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
 8004fc2:	3c01      	subs	r4, #1
 8004fc4:	9313      	str	r3, [sp, #76]	; 0x4c
 8004fc6:	e770      	b.n	8004eaa <_dtoa_r+0x112>
 8004fc8:	2301      	movs	r3, #1
 8004fca:	e7b3      	b.n	8004f34 <_dtoa_r+0x19c>
 8004fcc:	900f      	str	r0, [sp, #60]	; 0x3c
 8004fce:	e7b2      	b.n	8004f36 <_dtoa_r+0x19e>
 8004fd0:	9b06      	ldr	r3, [sp, #24]
 8004fd2:	eba3 0309 	sub.w	r3, r3, r9
 8004fd6:	9306      	str	r3, [sp, #24]
 8004fd8:	f1c9 0300 	rsb	r3, r9, #0
 8004fdc:	930a      	str	r3, [sp, #40]	; 0x28
 8004fde:	2300      	movs	r3, #0
 8004fe0:	930e      	str	r3, [sp, #56]	; 0x38
 8004fe2:	e7bf      	b.n	8004f64 <_dtoa_r+0x1cc>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	930b      	str	r3, [sp, #44]	; 0x2c
 8004fe8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	dc59      	bgt.n	80050a2 <_dtoa_r+0x30a>
 8004fee:	f04f 0b01 	mov.w	fp, #1
 8004ff2:	465b      	mov	r3, fp
 8004ff4:	f8cd b008 	str.w	fp, [sp, #8]
 8004ff8:	f8cd b08c 	str.w	fp, [sp, #140]	; 0x8c
 8004ffc:	2200      	movs	r2, #0
 8004ffe:	6a68      	ldr	r0, [r5, #36]	; 0x24
 8005000:	6042      	str	r2, [r0, #4]
 8005002:	2204      	movs	r2, #4
 8005004:	f102 0614 	add.w	r6, r2, #20
 8005008:	429e      	cmp	r6, r3
 800500a:	6841      	ldr	r1, [r0, #4]
 800500c:	d94f      	bls.n	80050ae <_dtoa_r+0x316>
 800500e:	4628      	mov	r0, r5
 8005010:	f000 fcca 	bl	80059a8 <_Balloc>
 8005014:	9008      	str	r0, [sp, #32]
 8005016:	2800      	cmp	r0, #0
 8005018:	d14d      	bne.n	80050b6 <_dtoa_r+0x31e>
 800501a:	4602      	mov	r2, r0
 800501c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8005020:	4b1d      	ldr	r3, [pc, #116]	; (8005098 <_dtoa_r+0x300>)
 8005022:	e6cd      	b.n	8004dc0 <_dtoa_r+0x28>
 8005024:	2301      	movs	r3, #1
 8005026:	e7de      	b.n	8004fe6 <_dtoa_r+0x24e>
 8005028:	2300      	movs	r3, #0
 800502a:	930b      	str	r3, [sp, #44]	; 0x2c
 800502c:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 800502e:	eb09 0b03 	add.w	fp, r9, r3
 8005032:	f10b 0301 	add.w	r3, fp, #1
 8005036:	2b01      	cmp	r3, #1
 8005038:	9302      	str	r3, [sp, #8]
 800503a:	bfb8      	it	lt
 800503c:	2301      	movlt	r3, #1
 800503e:	e7dd      	b.n	8004ffc <_dtoa_r+0x264>
 8005040:	2301      	movs	r3, #1
 8005042:	e7f2      	b.n	800502a <_dtoa_r+0x292>
 8005044:	2401      	movs	r4, #1
 8005046:	2300      	movs	r3, #0
 8005048:	940b      	str	r4, [sp, #44]	; 0x2c
 800504a:	9322      	str	r3, [sp, #136]	; 0x88
 800504c:	f04f 3bff 	mov.w	fp, #4294967295
 8005050:	2200      	movs	r2, #0
 8005052:	2312      	movs	r3, #18
 8005054:	f8cd b008 	str.w	fp, [sp, #8]
 8005058:	9223      	str	r2, [sp, #140]	; 0x8c
 800505a:	e7cf      	b.n	8004ffc <_dtoa_r+0x264>
 800505c:	f3af 8000 	nop.w
 8005060:	636f4361 	.word	0x636f4361
 8005064:	3fd287a7 	.word	0x3fd287a7
 8005068:	8b60c8b3 	.word	0x8b60c8b3
 800506c:	3fc68a28 	.word	0x3fc68a28
 8005070:	509f79fb 	.word	0x509f79fb
 8005074:	3fd34413 	.word	0x3fd34413
 8005078:	0800729d 	.word	0x0800729d
 800507c:	080072b4 	.word	0x080072b4
 8005080:	7ff00000 	.word	0x7ff00000
 8005084:	08007299 	.word	0x08007299
 8005088:	08007290 	.word	0x08007290
 800508c:	0800726d 	.word	0x0800726d
 8005090:	3ff80000 	.word	0x3ff80000
 8005094:	080073b0 	.word	0x080073b0
 8005098:	08007313 	.word	0x08007313
 800509c:	2301      	movs	r3, #1
 800509e:	930b      	str	r3, [sp, #44]	; 0x2c
 80050a0:	e7d4      	b.n	800504c <_dtoa_r+0x2b4>
 80050a2:	f8dd b08c 	ldr.w	fp, [sp, #140]	; 0x8c
 80050a6:	465b      	mov	r3, fp
 80050a8:	f8cd b008 	str.w	fp, [sp, #8]
 80050ac:	e7a6      	b.n	8004ffc <_dtoa_r+0x264>
 80050ae:	3101      	adds	r1, #1
 80050b0:	6041      	str	r1, [r0, #4]
 80050b2:	0052      	lsls	r2, r2, #1
 80050b4:	e7a6      	b.n	8005004 <_dtoa_r+0x26c>
 80050b6:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 80050b8:	9a08      	ldr	r2, [sp, #32]
 80050ba:	601a      	str	r2, [r3, #0]
 80050bc:	9b02      	ldr	r3, [sp, #8]
 80050be:	2b0e      	cmp	r3, #14
 80050c0:	f200 80a8 	bhi.w	8005214 <_dtoa_r+0x47c>
 80050c4:	2c00      	cmp	r4, #0
 80050c6:	f000 80a5 	beq.w	8005214 <_dtoa_r+0x47c>
 80050ca:	f1b9 0f00 	cmp.w	r9, #0
 80050ce:	dd34      	ble.n	800513a <_dtoa_r+0x3a2>
 80050d0:	4a9a      	ldr	r2, [pc, #616]	; (800533c <_dtoa_r+0x5a4>)
 80050d2:	f009 030f 	and.w	r3, r9, #15
 80050d6:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80050da:	f419 7f80 	tst.w	r9, #256	; 0x100
 80050de:	e9d3 3400 	ldrd	r3, r4, [r3]
 80050e2:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 80050e6:	ea4f 1429 	mov.w	r4, r9, asr #4
 80050ea:	d016      	beq.n	800511a <_dtoa_r+0x382>
 80050ec:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80050f0:	4b93      	ldr	r3, [pc, #588]	; (8005340 <_dtoa_r+0x5a8>)
 80050f2:	2703      	movs	r7, #3
 80050f4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80050f8:	f7fb fb18 	bl	800072c <__aeabi_ddiv>
 80050fc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005100:	f004 040f 	and.w	r4, r4, #15
 8005104:	4e8e      	ldr	r6, [pc, #568]	; (8005340 <_dtoa_r+0x5a8>)
 8005106:	b954      	cbnz	r4, 800511e <_dtoa_r+0x386>
 8005108:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800510c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005110:	f7fb fb0c 	bl	800072c <__aeabi_ddiv>
 8005114:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005118:	e029      	b.n	800516e <_dtoa_r+0x3d6>
 800511a:	2702      	movs	r7, #2
 800511c:	e7f2      	b.n	8005104 <_dtoa_r+0x36c>
 800511e:	07e1      	lsls	r1, r4, #31
 8005120:	d508      	bpl.n	8005134 <_dtoa_r+0x39c>
 8005122:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005126:	e9d6 2300 	ldrd	r2, r3, [r6]
 800512a:	f7fb f9d5 	bl	80004d8 <__aeabi_dmul>
 800512e:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005132:	3701      	adds	r7, #1
 8005134:	1064      	asrs	r4, r4, #1
 8005136:	3608      	adds	r6, #8
 8005138:	e7e5      	b.n	8005106 <_dtoa_r+0x36e>
 800513a:	f000 80a5 	beq.w	8005288 <_dtoa_r+0x4f0>
 800513e:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 8005142:	f1c9 0400 	rsb	r4, r9, #0
 8005146:	4b7d      	ldr	r3, [pc, #500]	; (800533c <_dtoa_r+0x5a4>)
 8005148:	f004 020f 	and.w	r2, r4, #15
 800514c:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f7fb f9c0 	bl	80004d8 <__aeabi_dmul>
 8005158:	2702      	movs	r7, #2
 800515a:	2300      	movs	r3, #0
 800515c:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005160:	4e77      	ldr	r6, [pc, #476]	; (8005340 <_dtoa_r+0x5a8>)
 8005162:	1124      	asrs	r4, r4, #4
 8005164:	2c00      	cmp	r4, #0
 8005166:	f040 8084 	bne.w	8005272 <_dtoa_r+0x4da>
 800516a:	2b00      	cmp	r3, #0
 800516c:	d1d2      	bne.n	8005114 <_dtoa_r+0x37c>
 800516e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005170:	2b00      	cmp	r3, #0
 8005172:	f000 808b 	beq.w	800528c <_dtoa_r+0x4f4>
 8005176:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800517a:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 800517e:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005182:	2200      	movs	r2, #0
 8005184:	4b6f      	ldr	r3, [pc, #444]	; (8005344 <_dtoa_r+0x5ac>)
 8005186:	f7fb fc19 	bl	80009bc <__aeabi_dcmplt>
 800518a:	2800      	cmp	r0, #0
 800518c:	d07e      	beq.n	800528c <_dtoa_r+0x4f4>
 800518e:	9b02      	ldr	r3, [sp, #8]
 8005190:	2b00      	cmp	r3, #0
 8005192:	d07b      	beq.n	800528c <_dtoa_r+0x4f4>
 8005194:	f1bb 0f00 	cmp.w	fp, #0
 8005198:	dd38      	ble.n	800520c <_dtoa_r+0x474>
 800519a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800519e:	2200      	movs	r2, #0
 80051a0:	4b69      	ldr	r3, [pc, #420]	; (8005348 <_dtoa_r+0x5b0>)
 80051a2:	f7fb f999 	bl	80004d8 <__aeabi_dmul>
 80051a6:	465c      	mov	r4, fp
 80051a8:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80051ac:	f109 38ff 	add.w	r8, r9, #4294967295
 80051b0:	3701      	adds	r7, #1
 80051b2:	4638      	mov	r0, r7
 80051b4:	f7fb f926 	bl	8000404 <__aeabi_i2d>
 80051b8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051bc:	f7fb f98c 	bl	80004d8 <__aeabi_dmul>
 80051c0:	2200      	movs	r2, #0
 80051c2:	4b62      	ldr	r3, [pc, #392]	; (800534c <_dtoa_r+0x5b4>)
 80051c4:	f7fa ffd2 	bl	800016c <__adddf3>
 80051c8:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 80051cc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80051d0:	9611      	str	r6, [sp, #68]	; 0x44
 80051d2:	2c00      	cmp	r4, #0
 80051d4:	d15d      	bne.n	8005292 <_dtoa_r+0x4fa>
 80051d6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051da:	2200      	movs	r2, #0
 80051dc:	4b5c      	ldr	r3, [pc, #368]	; (8005350 <_dtoa_r+0x5b8>)
 80051de:	f7fa ffc3 	bl	8000168 <__aeabi_dsub>
 80051e2:	4602      	mov	r2, r0
 80051e4:	460b      	mov	r3, r1
 80051e6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051ea:	4633      	mov	r3, r6
 80051ec:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051ee:	f7fb fc03 	bl	80009f8 <__aeabi_dcmpgt>
 80051f2:	2800      	cmp	r0, #0
 80051f4:	f040 829e 	bne.w	8005734 <_dtoa_r+0x99c>
 80051f8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051fc:	9a10      	ldr	r2, [sp, #64]	; 0x40
 80051fe:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 8005202:	f7fb fbdb 	bl	80009bc <__aeabi_dcmplt>
 8005206:	2800      	cmp	r0, #0
 8005208:	f040 8292 	bne.w	8005730 <_dtoa_r+0x998>
 800520c:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 8005210:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005214:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8005216:	2b00      	cmp	r3, #0
 8005218:	f2c0 8153 	blt.w	80054c2 <_dtoa_r+0x72a>
 800521c:	f1b9 0f0e 	cmp.w	r9, #14
 8005220:	f300 814f 	bgt.w	80054c2 <_dtoa_r+0x72a>
 8005224:	4b45      	ldr	r3, [pc, #276]	; (800533c <_dtoa_r+0x5a4>)
 8005226:	eb03 03c9 	add.w	r3, r3, r9, lsl #3
 800522a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800522e:	e9cd 3406 	strd	r3, r4, [sp, #24]
 8005232:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005234:	2b00      	cmp	r3, #0
 8005236:	f280 80db 	bge.w	80053f0 <_dtoa_r+0x658>
 800523a:	9b02      	ldr	r3, [sp, #8]
 800523c:	2b00      	cmp	r3, #0
 800523e:	f300 80d7 	bgt.w	80053f0 <_dtoa_r+0x658>
 8005242:	f040 8274 	bne.w	800572e <_dtoa_r+0x996>
 8005246:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800524a:	2200      	movs	r2, #0
 800524c:	4b40      	ldr	r3, [pc, #256]	; (8005350 <_dtoa_r+0x5b8>)
 800524e:	f7fb f943 	bl	80004d8 <__aeabi_dmul>
 8005252:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005256:	f7fb fbc5 	bl	80009e4 <__aeabi_dcmpge>
 800525a:	9c02      	ldr	r4, [sp, #8]
 800525c:	4626      	mov	r6, r4
 800525e:	2800      	cmp	r0, #0
 8005260:	f040 824a 	bne.w	80056f8 <_dtoa_r+0x960>
 8005264:	2331      	movs	r3, #49	; 0x31
 8005266:	9f08      	ldr	r7, [sp, #32]
 8005268:	f109 0901 	add.w	r9, r9, #1
 800526c:	f807 3b01 	strb.w	r3, [r7], #1
 8005270:	e246      	b.n	8005700 <_dtoa_r+0x968>
 8005272:	07e2      	lsls	r2, r4, #31
 8005274:	d505      	bpl.n	8005282 <_dtoa_r+0x4ea>
 8005276:	e9d6 2300 	ldrd	r2, r3, [r6]
 800527a:	f7fb f92d 	bl	80004d8 <__aeabi_dmul>
 800527e:	2301      	movs	r3, #1
 8005280:	3701      	adds	r7, #1
 8005282:	1064      	asrs	r4, r4, #1
 8005284:	3608      	adds	r6, #8
 8005286:	e76d      	b.n	8005164 <_dtoa_r+0x3cc>
 8005288:	2702      	movs	r7, #2
 800528a:	e770      	b.n	800516e <_dtoa_r+0x3d6>
 800528c:	46c8      	mov	r8, r9
 800528e:	9c02      	ldr	r4, [sp, #8]
 8005290:	e78f      	b.n	80051b2 <_dtoa_r+0x41a>
 8005292:	9908      	ldr	r1, [sp, #32]
 8005294:	4b29      	ldr	r3, [pc, #164]	; (800533c <_dtoa_r+0x5a4>)
 8005296:	4421      	add	r1, r4
 8005298:	9112      	str	r1, [sp, #72]	; 0x48
 800529a:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800529c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80052a0:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 80052a4:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80052a8:	2900      	cmp	r1, #0
 80052aa:	d055      	beq.n	8005358 <_dtoa_r+0x5c0>
 80052ac:	2000      	movs	r0, #0
 80052ae:	4929      	ldr	r1, [pc, #164]	; (8005354 <_dtoa_r+0x5bc>)
 80052b0:	f7fb fa3c 	bl	800072c <__aeabi_ddiv>
 80052b4:	463b      	mov	r3, r7
 80052b6:	4632      	mov	r2, r6
 80052b8:	f7fa ff56 	bl	8000168 <__aeabi_dsub>
 80052bc:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80052c0:	9f08      	ldr	r7, [sp, #32]
 80052c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052c6:	f7fb fbb7 	bl	8000a38 <__aeabi_d2iz>
 80052ca:	4604      	mov	r4, r0
 80052cc:	f7fb f89a 	bl	8000404 <__aeabi_i2d>
 80052d0:	4602      	mov	r2, r0
 80052d2:	460b      	mov	r3, r1
 80052d4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80052d8:	f7fa ff46 	bl	8000168 <__aeabi_dsub>
 80052dc:	4602      	mov	r2, r0
 80052de:	460b      	mov	r3, r1
 80052e0:	3430      	adds	r4, #48	; 0x30
 80052e2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80052e6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80052ea:	f807 4b01 	strb.w	r4, [r7], #1
 80052ee:	f7fb fb65 	bl	80009bc <__aeabi_dcmplt>
 80052f2:	2800      	cmp	r0, #0
 80052f4:	d174      	bne.n	80053e0 <_dtoa_r+0x648>
 80052f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80052fa:	2000      	movs	r0, #0
 80052fc:	4911      	ldr	r1, [pc, #68]	; (8005344 <_dtoa_r+0x5ac>)
 80052fe:	f7fa ff33 	bl	8000168 <__aeabi_dsub>
 8005302:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005306:	f7fb fb59 	bl	80009bc <__aeabi_dcmplt>
 800530a:	2800      	cmp	r0, #0
 800530c:	f040 80b6 	bne.w	800547c <_dtoa_r+0x6e4>
 8005310:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005312:	429f      	cmp	r7, r3
 8005314:	f43f af7a 	beq.w	800520c <_dtoa_r+0x474>
 8005318:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800531c:	2200      	movs	r2, #0
 800531e:	4b0a      	ldr	r3, [pc, #40]	; (8005348 <_dtoa_r+0x5b0>)
 8005320:	f7fb f8da 	bl	80004d8 <__aeabi_dmul>
 8005324:	2200      	movs	r2, #0
 8005326:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800532a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800532e:	4b06      	ldr	r3, [pc, #24]	; (8005348 <_dtoa_r+0x5b0>)
 8005330:	f7fb f8d2 	bl	80004d8 <__aeabi_dmul>
 8005334:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005338:	e7c3      	b.n	80052c2 <_dtoa_r+0x52a>
 800533a:	bf00      	nop
 800533c:	080073b0 	.word	0x080073b0
 8005340:	08007388 	.word	0x08007388
 8005344:	3ff00000 	.word	0x3ff00000
 8005348:	40240000 	.word	0x40240000
 800534c:	401c0000 	.word	0x401c0000
 8005350:	40140000 	.word	0x40140000
 8005354:	3fe00000 	.word	0x3fe00000
 8005358:	4630      	mov	r0, r6
 800535a:	4639      	mov	r1, r7
 800535c:	f7fb f8bc 	bl	80004d8 <__aeabi_dmul>
 8005360:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005362:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 8005366:	9c08      	ldr	r4, [sp, #32]
 8005368:	9314      	str	r3, [sp, #80]	; 0x50
 800536a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800536e:	f7fb fb63 	bl	8000a38 <__aeabi_d2iz>
 8005372:	9015      	str	r0, [sp, #84]	; 0x54
 8005374:	f7fb f846 	bl	8000404 <__aeabi_i2d>
 8005378:	4602      	mov	r2, r0
 800537a:	460b      	mov	r3, r1
 800537c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005380:	f7fa fef2 	bl	8000168 <__aeabi_dsub>
 8005384:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8005386:	4606      	mov	r6, r0
 8005388:	3330      	adds	r3, #48	; 0x30
 800538a:	f804 3b01 	strb.w	r3, [r4], #1
 800538e:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005390:	460f      	mov	r7, r1
 8005392:	429c      	cmp	r4, r3
 8005394:	f04f 0200 	mov.w	r2, #0
 8005398:	d124      	bne.n	80053e4 <_dtoa_r+0x64c>
 800539a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800539e:	4bb3      	ldr	r3, [pc, #716]	; (800566c <_dtoa_r+0x8d4>)
 80053a0:	f7fa fee4 	bl	800016c <__adddf3>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4630      	mov	r0, r6
 80053aa:	4639      	mov	r1, r7
 80053ac:	f7fb fb24 	bl	80009f8 <__aeabi_dcmpgt>
 80053b0:	2800      	cmp	r0, #0
 80053b2:	d162      	bne.n	800547a <_dtoa_r+0x6e2>
 80053b4:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80053b8:	2000      	movs	r0, #0
 80053ba:	49ac      	ldr	r1, [pc, #688]	; (800566c <_dtoa_r+0x8d4>)
 80053bc:	f7fa fed4 	bl	8000168 <__aeabi_dsub>
 80053c0:	4602      	mov	r2, r0
 80053c2:	460b      	mov	r3, r1
 80053c4:	4630      	mov	r0, r6
 80053c6:	4639      	mov	r1, r7
 80053c8:	f7fb faf8 	bl	80009bc <__aeabi_dcmplt>
 80053cc:	2800      	cmp	r0, #0
 80053ce:	f43f af1d 	beq.w	800520c <_dtoa_r+0x474>
 80053d2:	9f14      	ldr	r7, [sp, #80]	; 0x50
 80053d4:	1e7b      	subs	r3, r7, #1
 80053d6:	9314      	str	r3, [sp, #80]	; 0x50
 80053d8:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 80053dc:	2b30      	cmp	r3, #48	; 0x30
 80053de:	d0f8      	beq.n	80053d2 <_dtoa_r+0x63a>
 80053e0:	46c1      	mov	r9, r8
 80053e2:	e03a      	b.n	800545a <_dtoa_r+0x6c2>
 80053e4:	4ba2      	ldr	r3, [pc, #648]	; (8005670 <_dtoa_r+0x8d8>)
 80053e6:	f7fb f877 	bl	80004d8 <__aeabi_dmul>
 80053ea:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80053ee:	e7bc      	b.n	800536a <_dtoa_r+0x5d2>
 80053f0:	9f08      	ldr	r7, [sp, #32]
 80053f2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80053f6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80053fa:	f7fb f997 	bl	800072c <__aeabi_ddiv>
 80053fe:	f7fb fb1b 	bl	8000a38 <__aeabi_d2iz>
 8005402:	4604      	mov	r4, r0
 8005404:	f7fa fffe 	bl	8000404 <__aeabi_i2d>
 8005408:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800540c:	f7fb f864 	bl	80004d8 <__aeabi_dmul>
 8005410:	f104 0630 	add.w	r6, r4, #48	; 0x30
 8005414:	460b      	mov	r3, r1
 8005416:	4602      	mov	r2, r0
 8005418:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800541c:	f7fa fea4 	bl	8000168 <__aeabi_dsub>
 8005420:	f807 6b01 	strb.w	r6, [r7], #1
 8005424:	9e08      	ldr	r6, [sp, #32]
 8005426:	9b02      	ldr	r3, [sp, #8]
 8005428:	1bbe      	subs	r6, r7, r6
 800542a:	42b3      	cmp	r3, r6
 800542c:	d13a      	bne.n	80054a4 <_dtoa_r+0x70c>
 800542e:	4602      	mov	r2, r0
 8005430:	460b      	mov	r3, r1
 8005432:	f7fa fe9b 	bl	800016c <__adddf3>
 8005436:	4602      	mov	r2, r0
 8005438:	460b      	mov	r3, r1
 800543a:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800543e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005442:	f7fb fad9 	bl	80009f8 <__aeabi_dcmpgt>
 8005446:	bb58      	cbnz	r0, 80054a0 <_dtoa_r+0x708>
 8005448:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800544c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005450:	f7fb faaa 	bl	80009a8 <__aeabi_dcmpeq>
 8005454:	b108      	cbz	r0, 800545a <_dtoa_r+0x6c2>
 8005456:	07e1      	lsls	r1, r4, #31
 8005458:	d422      	bmi.n	80054a0 <_dtoa_r+0x708>
 800545a:	4628      	mov	r0, r5
 800545c:	4651      	mov	r1, sl
 800545e:	f000 fae3 	bl	8005a28 <_Bfree>
 8005462:	2300      	movs	r3, #0
 8005464:	703b      	strb	r3, [r7, #0]
 8005466:	9b24      	ldr	r3, [sp, #144]	; 0x90
 8005468:	f109 0001 	add.w	r0, r9, #1
 800546c:	6018      	str	r0, [r3, #0]
 800546e:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005470:	2b00      	cmp	r3, #0
 8005472:	f43f acdf 	beq.w	8004e34 <_dtoa_r+0x9c>
 8005476:	601f      	str	r7, [r3, #0]
 8005478:	e4dc      	b.n	8004e34 <_dtoa_r+0x9c>
 800547a:	4627      	mov	r7, r4
 800547c:	463b      	mov	r3, r7
 800547e:	461f      	mov	r7, r3
 8005480:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005484:	2a39      	cmp	r2, #57	; 0x39
 8005486:	d107      	bne.n	8005498 <_dtoa_r+0x700>
 8005488:	9a08      	ldr	r2, [sp, #32]
 800548a:	429a      	cmp	r2, r3
 800548c:	d1f7      	bne.n	800547e <_dtoa_r+0x6e6>
 800548e:	2230      	movs	r2, #48	; 0x30
 8005490:	9908      	ldr	r1, [sp, #32]
 8005492:	f108 0801 	add.w	r8, r8, #1
 8005496:	700a      	strb	r2, [r1, #0]
 8005498:	781a      	ldrb	r2, [r3, #0]
 800549a:	3201      	adds	r2, #1
 800549c:	701a      	strb	r2, [r3, #0]
 800549e:	e79f      	b.n	80053e0 <_dtoa_r+0x648>
 80054a0:	46c8      	mov	r8, r9
 80054a2:	e7eb      	b.n	800547c <_dtoa_r+0x6e4>
 80054a4:	2200      	movs	r2, #0
 80054a6:	4b72      	ldr	r3, [pc, #456]	; (8005670 <_dtoa_r+0x8d8>)
 80054a8:	f7fb f816 	bl	80004d8 <__aeabi_dmul>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80054b4:	2200      	movs	r2, #0
 80054b6:	2300      	movs	r3, #0
 80054b8:	f7fb fa76 	bl	80009a8 <__aeabi_dcmpeq>
 80054bc:	2800      	cmp	r0, #0
 80054be:	d098      	beq.n	80053f2 <_dtoa_r+0x65a>
 80054c0:	e7cb      	b.n	800545a <_dtoa_r+0x6c2>
 80054c2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80054c4:	2a00      	cmp	r2, #0
 80054c6:	f000 80cd 	beq.w	8005664 <_dtoa_r+0x8cc>
 80054ca:	9a22      	ldr	r2, [sp, #136]	; 0x88
 80054cc:	2a01      	cmp	r2, #1
 80054ce:	f300 80af 	bgt.w	8005630 <_dtoa_r+0x898>
 80054d2:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80054d4:	2a00      	cmp	r2, #0
 80054d6:	f000 80a7 	beq.w	8005628 <_dtoa_r+0x890>
 80054da:	f203 4333 	addw	r3, r3, #1075	; 0x433
 80054de:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 80054e0:	9f06      	ldr	r7, [sp, #24]
 80054e2:	9a06      	ldr	r2, [sp, #24]
 80054e4:	2101      	movs	r1, #1
 80054e6:	441a      	add	r2, r3
 80054e8:	9206      	str	r2, [sp, #24]
 80054ea:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80054ec:	4628      	mov	r0, r5
 80054ee:	441a      	add	r2, r3
 80054f0:	9209      	str	r2, [sp, #36]	; 0x24
 80054f2:	f000 fb53 	bl	8005b9c <__i2b>
 80054f6:	4606      	mov	r6, r0
 80054f8:	2f00      	cmp	r7, #0
 80054fa:	dd0c      	ble.n	8005516 <_dtoa_r+0x77e>
 80054fc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80054fe:	2b00      	cmp	r3, #0
 8005500:	dd09      	ble.n	8005516 <_dtoa_r+0x77e>
 8005502:	42bb      	cmp	r3, r7
 8005504:	bfa8      	it	ge
 8005506:	463b      	movge	r3, r7
 8005508:	9a06      	ldr	r2, [sp, #24]
 800550a:	1aff      	subs	r7, r7, r3
 800550c:	1ad2      	subs	r2, r2, r3
 800550e:	9206      	str	r2, [sp, #24]
 8005510:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005512:	1ad3      	subs	r3, r2, r3
 8005514:	9309      	str	r3, [sp, #36]	; 0x24
 8005516:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005518:	b1f3      	cbz	r3, 8005558 <_dtoa_r+0x7c0>
 800551a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800551c:	2b00      	cmp	r3, #0
 800551e:	f000 80a9 	beq.w	8005674 <_dtoa_r+0x8dc>
 8005522:	2c00      	cmp	r4, #0
 8005524:	dd10      	ble.n	8005548 <_dtoa_r+0x7b0>
 8005526:	4631      	mov	r1, r6
 8005528:	4622      	mov	r2, r4
 800552a:	4628      	mov	r0, r5
 800552c:	f000 fbf0 	bl	8005d10 <__pow5mult>
 8005530:	4652      	mov	r2, sl
 8005532:	4601      	mov	r1, r0
 8005534:	4606      	mov	r6, r0
 8005536:	4628      	mov	r0, r5
 8005538:	f000 fb46 	bl	8005bc8 <__multiply>
 800553c:	4680      	mov	r8, r0
 800553e:	4651      	mov	r1, sl
 8005540:	4628      	mov	r0, r5
 8005542:	f000 fa71 	bl	8005a28 <_Bfree>
 8005546:	46c2      	mov	sl, r8
 8005548:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800554a:	1b1a      	subs	r2, r3, r4
 800554c:	d004      	beq.n	8005558 <_dtoa_r+0x7c0>
 800554e:	4651      	mov	r1, sl
 8005550:	4628      	mov	r0, r5
 8005552:	f000 fbdd 	bl	8005d10 <__pow5mult>
 8005556:	4682      	mov	sl, r0
 8005558:	2101      	movs	r1, #1
 800555a:	4628      	mov	r0, r5
 800555c:	f000 fb1e 	bl	8005b9c <__i2b>
 8005560:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005562:	4604      	mov	r4, r0
 8005564:	2b00      	cmp	r3, #0
 8005566:	f340 8087 	ble.w	8005678 <_dtoa_r+0x8e0>
 800556a:	461a      	mov	r2, r3
 800556c:	4601      	mov	r1, r0
 800556e:	4628      	mov	r0, r5
 8005570:	f000 fbce 	bl	8005d10 <__pow5mult>
 8005574:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005576:	4604      	mov	r4, r0
 8005578:	2b01      	cmp	r3, #1
 800557a:	f340 8080 	ble.w	800567e <_dtoa_r+0x8e6>
 800557e:	f04f 0800 	mov.w	r8, #0
 8005582:	6923      	ldr	r3, [r4, #16]
 8005584:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005588:	6918      	ldr	r0, [r3, #16]
 800558a:	f000 fab9 	bl	8005b00 <__hi0bits>
 800558e:	f1c0 0020 	rsb	r0, r0, #32
 8005592:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005594:	4418      	add	r0, r3
 8005596:	f010 001f 	ands.w	r0, r0, #31
 800559a:	f000 8092 	beq.w	80056c2 <_dtoa_r+0x92a>
 800559e:	f1c0 0320 	rsb	r3, r0, #32
 80055a2:	2b04      	cmp	r3, #4
 80055a4:	f340 808a 	ble.w	80056bc <_dtoa_r+0x924>
 80055a8:	f1c0 001c 	rsb	r0, r0, #28
 80055ac:	9b06      	ldr	r3, [sp, #24]
 80055ae:	4407      	add	r7, r0
 80055b0:	4403      	add	r3, r0
 80055b2:	9306      	str	r3, [sp, #24]
 80055b4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055b6:	4403      	add	r3, r0
 80055b8:	9309      	str	r3, [sp, #36]	; 0x24
 80055ba:	9b06      	ldr	r3, [sp, #24]
 80055bc:	2b00      	cmp	r3, #0
 80055be:	dd05      	ble.n	80055cc <_dtoa_r+0x834>
 80055c0:	4651      	mov	r1, sl
 80055c2:	461a      	mov	r2, r3
 80055c4:	4628      	mov	r0, r5
 80055c6:	f000 fbfd 	bl	8005dc4 <__lshift>
 80055ca:	4682      	mov	sl, r0
 80055cc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80055ce:	2b00      	cmp	r3, #0
 80055d0:	dd05      	ble.n	80055de <_dtoa_r+0x846>
 80055d2:	4621      	mov	r1, r4
 80055d4:	461a      	mov	r2, r3
 80055d6:	4628      	mov	r0, r5
 80055d8:	f000 fbf4 	bl	8005dc4 <__lshift>
 80055dc:	4604      	mov	r4, r0
 80055de:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80055e0:	2b00      	cmp	r3, #0
 80055e2:	d070      	beq.n	80056c6 <_dtoa_r+0x92e>
 80055e4:	4621      	mov	r1, r4
 80055e6:	4650      	mov	r0, sl
 80055e8:	f000 fc58 	bl	8005e9c <__mcmp>
 80055ec:	2800      	cmp	r0, #0
 80055ee:	da6a      	bge.n	80056c6 <_dtoa_r+0x92e>
 80055f0:	2300      	movs	r3, #0
 80055f2:	4651      	mov	r1, sl
 80055f4:	220a      	movs	r2, #10
 80055f6:	4628      	mov	r0, r5
 80055f8:	f000 fa38 	bl	8005a6c <__multadd>
 80055fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80055fe:	4682      	mov	sl, r0
 8005600:	f109 39ff 	add.w	r9, r9, #4294967295
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 8193 	beq.w	8005930 <_dtoa_r+0xb98>
 800560a:	4631      	mov	r1, r6
 800560c:	2300      	movs	r3, #0
 800560e:	220a      	movs	r2, #10
 8005610:	4628      	mov	r0, r5
 8005612:	f000 fa2b 	bl	8005a6c <__multadd>
 8005616:	f1bb 0f00 	cmp.w	fp, #0
 800561a:	4606      	mov	r6, r0
 800561c:	f300 8093 	bgt.w	8005746 <_dtoa_r+0x9ae>
 8005620:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005622:	2b02      	cmp	r3, #2
 8005624:	dc57      	bgt.n	80056d6 <_dtoa_r+0x93e>
 8005626:	e08e      	b.n	8005746 <_dtoa_r+0x9ae>
 8005628:	9b16      	ldr	r3, [sp, #88]	; 0x58
 800562a:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800562e:	e756      	b.n	80054de <_dtoa_r+0x746>
 8005630:	9b02      	ldr	r3, [sp, #8]
 8005632:	1e5c      	subs	r4, r3, #1
 8005634:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005636:	42a3      	cmp	r3, r4
 8005638:	bfb7      	itett	lt
 800563a:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800563c:	1b1c      	subge	r4, r3, r4
 800563e:	1ae2      	sublt	r2, r4, r3
 8005640:	9b0e      	ldrlt	r3, [sp, #56]	; 0x38
 8005642:	bfbe      	ittt	lt
 8005644:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005646:	189b      	addlt	r3, r3, r2
 8005648:	930e      	strlt	r3, [sp, #56]	; 0x38
 800564a:	9b02      	ldr	r3, [sp, #8]
 800564c:	bfb8      	it	lt
 800564e:	2400      	movlt	r4, #0
 8005650:	2b00      	cmp	r3, #0
 8005652:	bfbb      	ittet	lt
 8005654:	9b06      	ldrlt	r3, [sp, #24]
 8005656:	9a02      	ldrlt	r2, [sp, #8]
 8005658:	9f06      	ldrge	r7, [sp, #24]
 800565a:	1a9f      	sublt	r7, r3, r2
 800565c:	bfac      	ite	ge
 800565e:	9b02      	ldrge	r3, [sp, #8]
 8005660:	2300      	movlt	r3, #0
 8005662:	e73e      	b.n	80054e2 <_dtoa_r+0x74a>
 8005664:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005666:	9f06      	ldr	r7, [sp, #24]
 8005668:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 800566a:	e745      	b.n	80054f8 <_dtoa_r+0x760>
 800566c:	3fe00000 	.word	0x3fe00000
 8005670:	40240000 	.word	0x40240000
 8005674:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005676:	e76a      	b.n	800554e <_dtoa_r+0x7b6>
 8005678:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800567a:	2b01      	cmp	r3, #1
 800567c:	dc19      	bgt.n	80056b2 <_dtoa_r+0x91a>
 800567e:	9b04      	ldr	r3, [sp, #16]
 8005680:	b9bb      	cbnz	r3, 80056b2 <_dtoa_r+0x91a>
 8005682:	9b05      	ldr	r3, [sp, #20]
 8005684:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005688:	b99b      	cbnz	r3, 80056b2 <_dtoa_r+0x91a>
 800568a:	9b05      	ldr	r3, [sp, #20]
 800568c:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005690:	0d1b      	lsrs	r3, r3, #20
 8005692:	051b      	lsls	r3, r3, #20
 8005694:	b183      	cbz	r3, 80056b8 <_dtoa_r+0x920>
 8005696:	f04f 0801 	mov.w	r8, #1
 800569a:	9b06      	ldr	r3, [sp, #24]
 800569c:	3301      	adds	r3, #1
 800569e:	9306      	str	r3, [sp, #24]
 80056a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80056a2:	3301      	adds	r3, #1
 80056a4:	9309      	str	r3, [sp, #36]	; 0x24
 80056a6:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80056a8:	2b00      	cmp	r3, #0
 80056aa:	f47f af6a 	bne.w	8005582 <_dtoa_r+0x7ea>
 80056ae:	2001      	movs	r0, #1
 80056b0:	e76f      	b.n	8005592 <_dtoa_r+0x7fa>
 80056b2:	f04f 0800 	mov.w	r8, #0
 80056b6:	e7f6      	b.n	80056a6 <_dtoa_r+0x90e>
 80056b8:	4698      	mov	r8, r3
 80056ba:	e7f4      	b.n	80056a6 <_dtoa_r+0x90e>
 80056bc:	f43f af7d 	beq.w	80055ba <_dtoa_r+0x822>
 80056c0:	4618      	mov	r0, r3
 80056c2:	301c      	adds	r0, #28
 80056c4:	e772      	b.n	80055ac <_dtoa_r+0x814>
 80056c6:	9b02      	ldr	r3, [sp, #8]
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	dc36      	bgt.n	800573a <_dtoa_r+0x9a2>
 80056cc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80056ce:	2b02      	cmp	r3, #2
 80056d0:	dd33      	ble.n	800573a <_dtoa_r+0x9a2>
 80056d2:	f8dd b008 	ldr.w	fp, [sp, #8]
 80056d6:	f1bb 0f00 	cmp.w	fp, #0
 80056da:	d10d      	bne.n	80056f8 <_dtoa_r+0x960>
 80056dc:	4621      	mov	r1, r4
 80056de:	465b      	mov	r3, fp
 80056e0:	2205      	movs	r2, #5
 80056e2:	4628      	mov	r0, r5
 80056e4:	f000 f9c2 	bl	8005a6c <__multadd>
 80056e8:	4601      	mov	r1, r0
 80056ea:	4604      	mov	r4, r0
 80056ec:	4650      	mov	r0, sl
 80056ee:	f000 fbd5 	bl	8005e9c <__mcmp>
 80056f2:	2800      	cmp	r0, #0
 80056f4:	f73f adb6 	bgt.w	8005264 <_dtoa_r+0x4cc>
 80056f8:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056fa:	9f08      	ldr	r7, [sp, #32]
 80056fc:	ea6f 0903 	mvn.w	r9, r3
 8005700:	f04f 0800 	mov.w	r8, #0
 8005704:	4621      	mov	r1, r4
 8005706:	4628      	mov	r0, r5
 8005708:	f000 f98e 	bl	8005a28 <_Bfree>
 800570c:	2e00      	cmp	r6, #0
 800570e:	f43f aea4 	beq.w	800545a <_dtoa_r+0x6c2>
 8005712:	f1b8 0f00 	cmp.w	r8, #0
 8005716:	d005      	beq.n	8005724 <_dtoa_r+0x98c>
 8005718:	45b0      	cmp	r8, r6
 800571a:	d003      	beq.n	8005724 <_dtoa_r+0x98c>
 800571c:	4641      	mov	r1, r8
 800571e:	4628      	mov	r0, r5
 8005720:	f000 f982 	bl	8005a28 <_Bfree>
 8005724:	4631      	mov	r1, r6
 8005726:	4628      	mov	r0, r5
 8005728:	f000 f97e 	bl	8005a28 <_Bfree>
 800572c:	e695      	b.n	800545a <_dtoa_r+0x6c2>
 800572e:	2400      	movs	r4, #0
 8005730:	4626      	mov	r6, r4
 8005732:	e7e1      	b.n	80056f8 <_dtoa_r+0x960>
 8005734:	46c1      	mov	r9, r8
 8005736:	4626      	mov	r6, r4
 8005738:	e594      	b.n	8005264 <_dtoa_r+0x4cc>
 800573a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800573c:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005740:	2b00      	cmp	r3, #0
 8005742:	f000 80fc 	beq.w	800593e <_dtoa_r+0xba6>
 8005746:	2f00      	cmp	r7, #0
 8005748:	dd05      	ble.n	8005756 <_dtoa_r+0x9be>
 800574a:	4631      	mov	r1, r6
 800574c:	463a      	mov	r2, r7
 800574e:	4628      	mov	r0, r5
 8005750:	f000 fb38 	bl	8005dc4 <__lshift>
 8005754:	4606      	mov	r6, r0
 8005756:	f1b8 0f00 	cmp.w	r8, #0
 800575a:	d05c      	beq.n	8005816 <_dtoa_r+0xa7e>
 800575c:	4628      	mov	r0, r5
 800575e:	6871      	ldr	r1, [r6, #4]
 8005760:	f000 f922 	bl	80059a8 <_Balloc>
 8005764:	4607      	mov	r7, r0
 8005766:	b928      	cbnz	r0, 8005774 <_dtoa_r+0x9dc>
 8005768:	4602      	mov	r2, r0
 800576a:	f240 21ea 	movw	r1, #746	; 0x2ea
 800576e:	4b7e      	ldr	r3, [pc, #504]	; (8005968 <_dtoa_r+0xbd0>)
 8005770:	f7ff bb26 	b.w	8004dc0 <_dtoa_r+0x28>
 8005774:	6932      	ldr	r2, [r6, #16]
 8005776:	f106 010c 	add.w	r1, r6, #12
 800577a:	3202      	adds	r2, #2
 800577c:	0092      	lsls	r2, r2, #2
 800577e:	300c      	adds	r0, #12
 8005780:	f7fe fdac 	bl	80042dc <memcpy>
 8005784:	2201      	movs	r2, #1
 8005786:	4639      	mov	r1, r7
 8005788:	4628      	mov	r0, r5
 800578a:	f000 fb1b 	bl	8005dc4 <__lshift>
 800578e:	46b0      	mov	r8, r6
 8005790:	4606      	mov	r6, r0
 8005792:	9b08      	ldr	r3, [sp, #32]
 8005794:	3301      	adds	r3, #1
 8005796:	9302      	str	r3, [sp, #8]
 8005798:	9b08      	ldr	r3, [sp, #32]
 800579a:	445b      	add	r3, fp
 800579c:	930a      	str	r3, [sp, #40]	; 0x28
 800579e:	9b04      	ldr	r3, [sp, #16]
 80057a0:	f003 0301 	and.w	r3, r3, #1
 80057a4:	9309      	str	r3, [sp, #36]	; 0x24
 80057a6:	9b02      	ldr	r3, [sp, #8]
 80057a8:	4621      	mov	r1, r4
 80057aa:	4650      	mov	r0, sl
 80057ac:	f103 3bff 	add.w	fp, r3, #4294967295
 80057b0:	f7ff fa62 	bl	8004c78 <quorem>
 80057b4:	4603      	mov	r3, r0
 80057b6:	4641      	mov	r1, r8
 80057b8:	3330      	adds	r3, #48	; 0x30
 80057ba:	9004      	str	r0, [sp, #16]
 80057bc:	4650      	mov	r0, sl
 80057be:	930b      	str	r3, [sp, #44]	; 0x2c
 80057c0:	f000 fb6c 	bl	8005e9c <__mcmp>
 80057c4:	4632      	mov	r2, r6
 80057c6:	9006      	str	r0, [sp, #24]
 80057c8:	4621      	mov	r1, r4
 80057ca:	4628      	mov	r0, r5
 80057cc:	f000 fb82 	bl	8005ed4 <__mdiff>
 80057d0:	68c2      	ldr	r2, [r0, #12]
 80057d2:	4607      	mov	r7, r0
 80057d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057d6:	bb02      	cbnz	r2, 800581a <_dtoa_r+0xa82>
 80057d8:	4601      	mov	r1, r0
 80057da:	4650      	mov	r0, sl
 80057dc:	f000 fb5e 	bl	8005e9c <__mcmp>
 80057e0:	4602      	mov	r2, r0
 80057e2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80057e4:	4639      	mov	r1, r7
 80057e6:	4628      	mov	r0, r5
 80057e8:	e9cd 320b 	strd	r3, r2, [sp, #44]	; 0x2c
 80057ec:	f000 f91c 	bl	8005a28 <_Bfree>
 80057f0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 80057f2:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80057f4:	9f02      	ldr	r7, [sp, #8]
 80057f6:	ea43 0102 	orr.w	r1, r3, r2
 80057fa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80057fc:	430b      	orrs	r3, r1
 80057fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005800:	d10d      	bne.n	800581e <_dtoa_r+0xa86>
 8005802:	2b39      	cmp	r3, #57	; 0x39
 8005804:	d027      	beq.n	8005856 <_dtoa_r+0xabe>
 8005806:	9a06      	ldr	r2, [sp, #24]
 8005808:	2a00      	cmp	r2, #0
 800580a:	dd01      	ble.n	8005810 <_dtoa_r+0xa78>
 800580c:	9b04      	ldr	r3, [sp, #16]
 800580e:	3331      	adds	r3, #49	; 0x31
 8005810:	f88b 3000 	strb.w	r3, [fp]
 8005814:	e776      	b.n	8005704 <_dtoa_r+0x96c>
 8005816:	4630      	mov	r0, r6
 8005818:	e7b9      	b.n	800578e <_dtoa_r+0x9f6>
 800581a:	2201      	movs	r2, #1
 800581c:	e7e2      	b.n	80057e4 <_dtoa_r+0xa4c>
 800581e:	9906      	ldr	r1, [sp, #24]
 8005820:	2900      	cmp	r1, #0
 8005822:	db04      	blt.n	800582e <_dtoa_r+0xa96>
 8005824:	9822      	ldr	r0, [sp, #136]	; 0x88
 8005826:	4301      	orrs	r1, r0
 8005828:	9809      	ldr	r0, [sp, #36]	; 0x24
 800582a:	4301      	orrs	r1, r0
 800582c:	d120      	bne.n	8005870 <_dtoa_r+0xad8>
 800582e:	2a00      	cmp	r2, #0
 8005830:	ddee      	ble.n	8005810 <_dtoa_r+0xa78>
 8005832:	4651      	mov	r1, sl
 8005834:	2201      	movs	r2, #1
 8005836:	4628      	mov	r0, r5
 8005838:	9302      	str	r3, [sp, #8]
 800583a:	f000 fac3 	bl	8005dc4 <__lshift>
 800583e:	4621      	mov	r1, r4
 8005840:	4682      	mov	sl, r0
 8005842:	f000 fb2b 	bl	8005e9c <__mcmp>
 8005846:	2800      	cmp	r0, #0
 8005848:	9b02      	ldr	r3, [sp, #8]
 800584a:	dc02      	bgt.n	8005852 <_dtoa_r+0xaba>
 800584c:	d1e0      	bne.n	8005810 <_dtoa_r+0xa78>
 800584e:	07da      	lsls	r2, r3, #31
 8005850:	d5de      	bpl.n	8005810 <_dtoa_r+0xa78>
 8005852:	2b39      	cmp	r3, #57	; 0x39
 8005854:	d1da      	bne.n	800580c <_dtoa_r+0xa74>
 8005856:	2339      	movs	r3, #57	; 0x39
 8005858:	f88b 3000 	strb.w	r3, [fp]
 800585c:	463b      	mov	r3, r7
 800585e:	461f      	mov	r7, r3
 8005860:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005864:	3b01      	subs	r3, #1
 8005866:	2a39      	cmp	r2, #57	; 0x39
 8005868:	d050      	beq.n	800590c <_dtoa_r+0xb74>
 800586a:	3201      	adds	r2, #1
 800586c:	701a      	strb	r2, [r3, #0]
 800586e:	e749      	b.n	8005704 <_dtoa_r+0x96c>
 8005870:	2a00      	cmp	r2, #0
 8005872:	dd03      	ble.n	800587c <_dtoa_r+0xae4>
 8005874:	2b39      	cmp	r3, #57	; 0x39
 8005876:	d0ee      	beq.n	8005856 <_dtoa_r+0xabe>
 8005878:	3301      	adds	r3, #1
 800587a:	e7c9      	b.n	8005810 <_dtoa_r+0xa78>
 800587c:	9a02      	ldr	r2, [sp, #8]
 800587e:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005880:	f802 3c01 	strb.w	r3, [r2, #-1]
 8005884:	428a      	cmp	r2, r1
 8005886:	d02a      	beq.n	80058de <_dtoa_r+0xb46>
 8005888:	4651      	mov	r1, sl
 800588a:	2300      	movs	r3, #0
 800588c:	220a      	movs	r2, #10
 800588e:	4628      	mov	r0, r5
 8005890:	f000 f8ec 	bl	8005a6c <__multadd>
 8005894:	45b0      	cmp	r8, r6
 8005896:	4682      	mov	sl, r0
 8005898:	f04f 0300 	mov.w	r3, #0
 800589c:	f04f 020a 	mov.w	r2, #10
 80058a0:	4641      	mov	r1, r8
 80058a2:	4628      	mov	r0, r5
 80058a4:	d107      	bne.n	80058b6 <_dtoa_r+0xb1e>
 80058a6:	f000 f8e1 	bl	8005a6c <__multadd>
 80058aa:	4680      	mov	r8, r0
 80058ac:	4606      	mov	r6, r0
 80058ae:	9b02      	ldr	r3, [sp, #8]
 80058b0:	3301      	adds	r3, #1
 80058b2:	9302      	str	r3, [sp, #8]
 80058b4:	e777      	b.n	80057a6 <_dtoa_r+0xa0e>
 80058b6:	f000 f8d9 	bl	8005a6c <__multadd>
 80058ba:	4631      	mov	r1, r6
 80058bc:	4680      	mov	r8, r0
 80058be:	2300      	movs	r3, #0
 80058c0:	220a      	movs	r2, #10
 80058c2:	4628      	mov	r0, r5
 80058c4:	f000 f8d2 	bl	8005a6c <__multadd>
 80058c8:	4606      	mov	r6, r0
 80058ca:	e7f0      	b.n	80058ae <_dtoa_r+0xb16>
 80058cc:	f1bb 0f00 	cmp.w	fp, #0
 80058d0:	bfcc      	ite	gt
 80058d2:	465f      	movgt	r7, fp
 80058d4:	2701      	movle	r7, #1
 80058d6:	f04f 0800 	mov.w	r8, #0
 80058da:	9a08      	ldr	r2, [sp, #32]
 80058dc:	4417      	add	r7, r2
 80058de:	4651      	mov	r1, sl
 80058e0:	2201      	movs	r2, #1
 80058e2:	4628      	mov	r0, r5
 80058e4:	9302      	str	r3, [sp, #8]
 80058e6:	f000 fa6d 	bl	8005dc4 <__lshift>
 80058ea:	4621      	mov	r1, r4
 80058ec:	4682      	mov	sl, r0
 80058ee:	f000 fad5 	bl	8005e9c <__mcmp>
 80058f2:	2800      	cmp	r0, #0
 80058f4:	dcb2      	bgt.n	800585c <_dtoa_r+0xac4>
 80058f6:	d102      	bne.n	80058fe <_dtoa_r+0xb66>
 80058f8:	9b02      	ldr	r3, [sp, #8]
 80058fa:	07db      	lsls	r3, r3, #31
 80058fc:	d4ae      	bmi.n	800585c <_dtoa_r+0xac4>
 80058fe:	463b      	mov	r3, r7
 8005900:	461f      	mov	r7, r3
 8005902:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005906:	2a30      	cmp	r2, #48	; 0x30
 8005908:	d0fa      	beq.n	8005900 <_dtoa_r+0xb68>
 800590a:	e6fb      	b.n	8005704 <_dtoa_r+0x96c>
 800590c:	9a08      	ldr	r2, [sp, #32]
 800590e:	429a      	cmp	r2, r3
 8005910:	d1a5      	bne.n	800585e <_dtoa_r+0xac6>
 8005912:	2331      	movs	r3, #49	; 0x31
 8005914:	f109 0901 	add.w	r9, r9, #1
 8005918:	7013      	strb	r3, [r2, #0]
 800591a:	e6f3      	b.n	8005704 <_dtoa_r+0x96c>
 800591c:	4b13      	ldr	r3, [pc, #76]	; (800596c <_dtoa_r+0xbd4>)
 800591e:	f7ff baa7 	b.w	8004e70 <_dtoa_r+0xd8>
 8005922:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005924:	2b00      	cmp	r3, #0
 8005926:	f47f aa80 	bne.w	8004e2a <_dtoa_r+0x92>
 800592a:	4b11      	ldr	r3, [pc, #68]	; (8005970 <_dtoa_r+0xbd8>)
 800592c:	f7ff baa0 	b.w	8004e70 <_dtoa_r+0xd8>
 8005930:	f1bb 0f00 	cmp.w	fp, #0
 8005934:	dc03      	bgt.n	800593e <_dtoa_r+0xba6>
 8005936:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005938:	2b02      	cmp	r3, #2
 800593a:	f73f aecc 	bgt.w	80056d6 <_dtoa_r+0x93e>
 800593e:	9f08      	ldr	r7, [sp, #32]
 8005940:	4621      	mov	r1, r4
 8005942:	4650      	mov	r0, sl
 8005944:	f7ff f998 	bl	8004c78 <quorem>
 8005948:	9a08      	ldr	r2, [sp, #32]
 800594a:	f100 0330 	add.w	r3, r0, #48	; 0x30
 800594e:	f807 3b01 	strb.w	r3, [r7], #1
 8005952:	1aba      	subs	r2, r7, r2
 8005954:	4593      	cmp	fp, r2
 8005956:	ddb9      	ble.n	80058cc <_dtoa_r+0xb34>
 8005958:	4651      	mov	r1, sl
 800595a:	2300      	movs	r3, #0
 800595c:	220a      	movs	r2, #10
 800595e:	4628      	mov	r0, r5
 8005960:	f000 f884 	bl	8005a6c <__multadd>
 8005964:	4682      	mov	sl, r0
 8005966:	e7eb      	b.n	8005940 <_dtoa_r+0xba8>
 8005968:	08007313 	.word	0x08007313
 800596c:	0800726c 	.word	0x0800726c
 8005970:	08007290 	.word	0x08007290

08005974 <_localeconv_r>:
 8005974:	4800      	ldr	r0, [pc, #0]	; (8005978 <_localeconv_r+0x4>)
 8005976:	4770      	bx	lr
 8005978:	20000168 	.word	0x20000168

0800597c <malloc>:
 800597c:	4b02      	ldr	r3, [pc, #8]	; (8005988 <malloc+0xc>)
 800597e:	4601      	mov	r1, r0
 8005980:	6818      	ldr	r0, [r3, #0]
 8005982:	f000 bbed 	b.w	8006160 <_malloc_r>
 8005986:	bf00      	nop
 8005988:	20000014 	.word	0x20000014

0800598c <memchr>:
 800598c:	4603      	mov	r3, r0
 800598e:	b510      	push	{r4, lr}
 8005990:	b2c9      	uxtb	r1, r1
 8005992:	4402      	add	r2, r0
 8005994:	4293      	cmp	r3, r2
 8005996:	4618      	mov	r0, r3
 8005998:	d101      	bne.n	800599e <memchr+0x12>
 800599a:	2000      	movs	r0, #0
 800599c:	e003      	b.n	80059a6 <memchr+0x1a>
 800599e:	7804      	ldrb	r4, [r0, #0]
 80059a0:	3301      	adds	r3, #1
 80059a2:	428c      	cmp	r4, r1
 80059a4:	d1f6      	bne.n	8005994 <memchr+0x8>
 80059a6:	bd10      	pop	{r4, pc}

080059a8 <_Balloc>:
 80059a8:	b570      	push	{r4, r5, r6, lr}
 80059aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 80059ac:	4604      	mov	r4, r0
 80059ae:	460d      	mov	r5, r1
 80059b0:	b976      	cbnz	r6, 80059d0 <_Balloc+0x28>
 80059b2:	2010      	movs	r0, #16
 80059b4:	f7ff ffe2 	bl	800597c <malloc>
 80059b8:	4602      	mov	r2, r0
 80059ba:	6260      	str	r0, [r4, #36]	; 0x24
 80059bc:	b920      	cbnz	r0, 80059c8 <_Balloc+0x20>
 80059be:	2166      	movs	r1, #102	; 0x66
 80059c0:	4b17      	ldr	r3, [pc, #92]	; (8005a20 <_Balloc+0x78>)
 80059c2:	4818      	ldr	r0, [pc, #96]	; (8005a24 <_Balloc+0x7c>)
 80059c4:	f000 fd92 	bl	80064ec <__assert_func>
 80059c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80059cc:	6006      	str	r6, [r0, #0]
 80059ce:	60c6      	str	r6, [r0, #12]
 80059d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 80059d2:	68f3      	ldr	r3, [r6, #12]
 80059d4:	b183      	cbz	r3, 80059f8 <_Balloc+0x50>
 80059d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80059d8:	68db      	ldr	r3, [r3, #12]
 80059da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80059de:	b9b8      	cbnz	r0, 8005a10 <_Balloc+0x68>
 80059e0:	2101      	movs	r1, #1
 80059e2:	fa01 f605 	lsl.w	r6, r1, r5
 80059e6:	1d72      	adds	r2, r6, #5
 80059e8:	4620      	mov	r0, r4
 80059ea:	0092      	lsls	r2, r2, #2
 80059ec:	f000 fb5e 	bl	80060ac <_calloc_r>
 80059f0:	b160      	cbz	r0, 8005a0c <_Balloc+0x64>
 80059f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80059f6:	e00e      	b.n	8005a16 <_Balloc+0x6e>
 80059f8:	2221      	movs	r2, #33	; 0x21
 80059fa:	2104      	movs	r1, #4
 80059fc:	4620      	mov	r0, r4
 80059fe:	f000 fb55 	bl	80060ac <_calloc_r>
 8005a02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8005a04:	60f0      	str	r0, [r6, #12]
 8005a06:	68db      	ldr	r3, [r3, #12]
 8005a08:	2b00      	cmp	r3, #0
 8005a0a:	d1e4      	bne.n	80059d6 <_Balloc+0x2e>
 8005a0c:	2000      	movs	r0, #0
 8005a0e:	bd70      	pop	{r4, r5, r6, pc}
 8005a10:	6802      	ldr	r2, [r0, #0]
 8005a12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8005a16:	2300      	movs	r3, #0
 8005a18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8005a1c:	e7f7      	b.n	8005a0e <_Balloc+0x66>
 8005a1e:	bf00      	nop
 8005a20:	0800729d 	.word	0x0800729d
 8005a24:	08007324 	.word	0x08007324

08005a28 <_Bfree>:
 8005a28:	b570      	push	{r4, r5, r6, lr}
 8005a2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 8005a2c:	4605      	mov	r5, r0
 8005a2e:	460c      	mov	r4, r1
 8005a30:	b976      	cbnz	r6, 8005a50 <_Bfree+0x28>
 8005a32:	2010      	movs	r0, #16
 8005a34:	f7ff ffa2 	bl	800597c <malloc>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	6268      	str	r0, [r5, #36]	; 0x24
 8005a3c:	b920      	cbnz	r0, 8005a48 <_Bfree+0x20>
 8005a3e:	218a      	movs	r1, #138	; 0x8a
 8005a40:	4b08      	ldr	r3, [pc, #32]	; (8005a64 <_Bfree+0x3c>)
 8005a42:	4809      	ldr	r0, [pc, #36]	; (8005a68 <_Bfree+0x40>)
 8005a44:	f000 fd52 	bl	80064ec <__assert_func>
 8005a48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8005a4c:	6006      	str	r6, [r0, #0]
 8005a4e:	60c6      	str	r6, [r0, #12]
 8005a50:	b13c      	cbz	r4, 8005a62 <_Bfree+0x3a>
 8005a52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 8005a54:	6862      	ldr	r2, [r4, #4]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8005a5c:	6021      	str	r1, [r4, #0]
 8005a5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8005a62:	bd70      	pop	{r4, r5, r6, pc}
 8005a64:	0800729d 	.word	0x0800729d
 8005a68:	08007324 	.word	0x08007324

08005a6c <__multadd>:
 8005a6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005a70:	4698      	mov	r8, r3
 8005a72:	460c      	mov	r4, r1
 8005a74:	2300      	movs	r3, #0
 8005a76:	690e      	ldr	r6, [r1, #16]
 8005a78:	4607      	mov	r7, r0
 8005a7a:	f101 0014 	add.w	r0, r1, #20
 8005a7e:	6805      	ldr	r5, [r0, #0]
 8005a80:	3301      	adds	r3, #1
 8005a82:	b2a9      	uxth	r1, r5
 8005a84:	fb02 8101 	mla	r1, r2, r1, r8
 8005a88:	0c2d      	lsrs	r5, r5, #16
 8005a8a:	ea4f 4c11 	mov.w	ip, r1, lsr #16
 8005a8e:	fb02 c505 	mla	r5, r2, r5, ip
 8005a92:	b289      	uxth	r1, r1
 8005a94:	eb01 4105 	add.w	r1, r1, r5, lsl #16
 8005a98:	429e      	cmp	r6, r3
 8005a9a:	ea4f 4815 	mov.w	r8, r5, lsr #16
 8005a9e:	f840 1b04 	str.w	r1, [r0], #4
 8005aa2:	dcec      	bgt.n	8005a7e <__multadd+0x12>
 8005aa4:	f1b8 0f00 	cmp.w	r8, #0
 8005aa8:	d022      	beq.n	8005af0 <__multadd+0x84>
 8005aaa:	68a3      	ldr	r3, [r4, #8]
 8005aac:	42b3      	cmp	r3, r6
 8005aae:	dc19      	bgt.n	8005ae4 <__multadd+0x78>
 8005ab0:	6861      	ldr	r1, [r4, #4]
 8005ab2:	4638      	mov	r0, r7
 8005ab4:	3101      	adds	r1, #1
 8005ab6:	f7ff ff77 	bl	80059a8 <_Balloc>
 8005aba:	4605      	mov	r5, r0
 8005abc:	b928      	cbnz	r0, 8005aca <__multadd+0x5e>
 8005abe:	4602      	mov	r2, r0
 8005ac0:	21b5      	movs	r1, #181	; 0xb5
 8005ac2:	4b0d      	ldr	r3, [pc, #52]	; (8005af8 <__multadd+0x8c>)
 8005ac4:	480d      	ldr	r0, [pc, #52]	; (8005afc <__multadd+0x90>)
 8005ac6:	f000 fd11 	bl	80064ec <__assert_func>
 8005aca:	6922      	ldr	r2, [r4, #16]
 8005acc:	f104 010c 	add.w	r1, r4, #12
 8005ad0:	3202      	adds	r2, #2
 8005ad2:	0092      	lsls	r2, r2, #2
 8005ad4:	300c      	adds	r0, #12
 8005ad6:	f7fe fc01 	bl	80042dc <memcpy>
 8005ada:	4621      	mov	r1, r4
 8005adc:	4638      	mov	r0, r7
 8005ade:	f7ff ffa3 	bl	8005a28 <_Bfree>
 8005ae2:	462c      	mov	r4, r5
 8005ae4:	eb04 0386 	add.w	r3, r4, r6, lsl #2
 8005ae8:	3601      	adds	r6, #1
 8005aea:	f8c3 8014 	str.w	r8, [r3, #20]
 8005aee:	6126      	str	r6, [r4, #16]
 8005af0:	4620      	mov	r0, r4
 8005af2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005af6:	bf00      	nop
 8005af8:	08007313 	.word	0x08007313
 8005afc:	08007324 	.word	0x08007324

08005b00 <__hi0bits>:
 8005b00:	0c02      	lsrs	r2, r0, #16
 8005b02:	0412      	lsls	r2, r2, #16
 8005b04:	4603      	mov	r3, r0
 8005b06:	b9ca      	cbnz	r2, 8005b3c <__hi0bits+0x3c>
 8005b08:	0403      	lsls	r3, r0, #16
 8005b0a:	2010      	movs	r0, #16
 8005b0c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8005b10:	bf04      	itt	eq
 8005b12:	021b      	lsleq	r3, r3, #8
 8005b14:	3008      	addeq	r0, #8
 8005b16:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8005b1a:	bf04      	itt	eq
 8005b1c:	011b      	lsleq	r3, r3, #4
 8005b1e:	3004      	addeq	r0, #4
 8005b20:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8005b24:	bf04      	itt	eq
 8005b26:	009b      	lsleq	r3, r3, #2
 8005b28:	3002      	addeq	r0, #2
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	db05      	blt.n	8005b3a <__hi0bits+0x3a>
 8005b2e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8005b32:	f100 0001 	add.w	r0, r0, #1
 8005b36:	bf08      	it	eq
 8005b38:	2020      	moveq	r0, #32
 8005b3a:	4770      	bx	lr
 8005b3c:	2000      	movs	r0, #0
 8005b3e:	e7e5      	b.n	8005b0c <__hi0bits+0xc>

08005b40 <__lo0bits>:
 8005b40:	6803      	ldr	r3, [r0, #0]
 8005b42:	4602      	mov	r2, r0
 8005b44:	f013 0007 	ands.w	r0, r3, #7
 8005b48:	d00b      	beq.n	8005b62 <__lo0bits+0x22>
 8005b4a:	07d9      	lsls	r1, r3, #31
 8005b4c:	d422      	bmi.n	8005b94 <__lo0bits+0x54>
 8005b4e:	0798      	lsls	r0, r3, #30
 8005b50:	bf49      	itett	mi
 8005b52:	085b      	lsrmi	r3, r3, #1
 8005b54:	089b      	lsrpl	r3, r3, #2
 8005b56:	2001      	movmi	r0, #1
 8005b58:	6013      	strmi	r3, [r2, #0]
 8005b5a:	bf5c      	itt	pl
 8005b5c:	2002      	movpl	r0, #2
 8005b5e:	6013      	strpl	r3, [r2, #0]
 8005b60:	4770      	bx	lr
 8005b62:	b299      	uxth	r1, r3
 8005b64:	b909      	cbnz	r1, 8005b6a <__lo0bits+0x2a>
 8005b66:	2010      	movs	r0, #16
 8005b68:	0c1b      	lsrs	r3, r3, #16
 8005b6a:	f013 0fff 	tst.w	r3, #255	; 0xff
 8005b6e:	bf04      	itt	eq
 8005b70:	0a1b      	lsreq	r3, r3, #8
 8005b72:	3008      	addeq	r0, #8
 8005b74:	0719      	lsls	r1, r3, #28
 8005b76:	bf04      	itt	eq
 8005b78:	091b      	lsreq	r3, r3, #4
 8005b7a:	3004      	addeq	r0, #4
 8005b7c:	0799      	lsls	r1, r3, #30
 8005b7e:	bf04      	itt	eq
 8005b80:	089b      	lsreq	r3, r3, #2
 8005b82:	3002      	addeq	r0, #2
 8005b84:	07d9      	lsls	r1, r3, #31
 8005b86:	d403      	bmi.n	8005b90 <__lo0bits+0x50>
 8005b88:	085b      	lsrs	r3, r3, #1
 8005b8a:	f100 0001 	add.w	r0, r0, #1
 8005b8e:	d003      	beq.n	8005b98 <__lo0bits+0x58>
 8005b90:	6013      	str	r3, [r2, #0]
 8005b92:	4770      	bx	lr
 8005b94:	2000      	movs	r0, #0
 8005b96:	4770      	bx	lr
 8005b98:	2020      	movs	r0, #32
 8005b9a:	4770      	bx	lr

08005b9c <__i2b>:
 8005b9c:	b510      	push	{r4, lr}
 8005b9e:	460c      	mov	r4, r1
 8005ba0:	2101      	movs	r1, #1
 8005ba2:	f7ff ff01 	bl	80059a8 <_Balloc>
 8005ba6:	4602      	mov	r2, r0
 8005ba8:	b928      	cbnz	r0, 8005bb6 <__i2b+0x1a>
 8005baa:	f44f 71a0 	mov.w	r1, #320	; 0x140
 8005bae:	4b04      	ldr	r3, [pc, #16]	; (8005bc0 <__i2b+0x24>)
 8005bb0:	4804      	ldr	r0, [pc, #16]	; (8005bc4 <__i2b+0x28>)
 8005bb2:	f000 fc9b 	bl	80064ec <__assert_func>
 8005bb6:	2301      	movs	r3, #1
 8005bb8:	6144      	str	r4, [r0, #20]
 8005bba:	6103      	str	r3, [r0, #16]
 8005bbc:	bd10      	pop	{r4, pc}
 8005bbe:	bf00      	nop
 8005bc0:	08007313 	.word	0x08007313
 8005bc4:	08007324 	.word	0x08007324

08005bc8 <__multiply>:
 8005bc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bcc:	4614      	mov	r4, r2
 8005bce:	690a      	ldr	r2, [r1, #16]
 8005bd0:	6923      	ldr	r3, [r4, #16]
 8005bd2:	460d      	mov	r5, r1
 8005bd4:	429a      	cmp	r2, r3
 8005bd6:	bfbe      	ittt	lt
 8005bd8:	460b      	movlt	r3, r1
 8005bda:	4625      	movlt	r5, r4
 8005bdc:	461c      	movlt	r4, r3
 8005bde:	f8d5 a010 	ldr.w	sl, [r5, #16]
 8005be2:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8005be6:	68ab      	ldr	r3, [r5, #8]
 8005be8:	6869      	ldr	r1, [r5, #4]
 8005bea:	eb0a 0709 	add.w	r7, sl, r9
 8005bee:	42bb      	cmp	r3, r7
 8005bf0:	b085      	sub	sp, #20
 8005bf2:	bfb8      	it	lt
 8005bf4:	3101      	addlt	r1, #1
 8005bf6:	f7ff fed7 	bl	80059a8 <_Balloc>
 8005bfa:	b930      	cbnz	r0, 8005c0a <__multiply+0x42>
 8005bfc:	4602      	mov	r2, r0
 8005bfe:	f240 115d 	movw	r1, #349	; 0x15d
 8005c02:	4b41      	ldr	r3, [pc, #260]	; (8005d08 <__multiply+0x140>)
 8005c04:	4841      	ldr	r0, [pc, #260]	; (8005d0c <__multiply+0x144>)
 8005c06:	f000 fc71 	bl	80064ec <__assert_func>
 8005c0a:	f100 0614 	add.w	r6, r0, #20
 8005c0e:	4633      	mov	r3, r6
 8005c10:	2200      	movs	r2, #0
 8005c12:	eb06 0887 	add.w	r8, r6, r7, lsl #2
 8005c16:	4543      	cmp	r3, r8
 8005c18:	d31e      	bcc.n	8005c58 <__multiply+0x90>
 8005c1a:	f105 0c14 	add.w	ip, r5, #20
 8005c1e:	f104 0314 	add.w	r3, r4, #20
 8005c22:	eb0c 0c8a 	add.w	ip, ip, sl, lsl #2
 8005c26:	eb03 0289 	add.w	r2, r3, r9, lsl #2
 8005c2a:	9202      	str	r2, [sp, #8]
 8005c2c:	ebac 0205 	sub.w	r2, ip, r5
 8005c30:	3a15      	subs	r2, #21
 8005c32:	f022 0203 	bic.w	r2, r2, #3
 8005c36:	3204      	adds	r2, #4
 8005c38:	f105 0115 	add.w	r1, r5, #21
 8005c3c:	458c      	cmp	ip, r1
 8005c3e:	bf38      	it	cc
 8005c40:	2204      	movcc	r2, #4
 8005c42:	9201      	str	r2, [sp, #4]
 8005c44:	9a02      	ldr	r2, [sp, #8]
 8005c46:	9303      	str	r3, [sp, #12]
 8005c48:	429a      	cmp	r2, r3
 8005c4a:	d808      	bhi.n	8005c5e <__multiply+0x96>
 8005c4c:	2f00      	cmp	r7, #0
 8005c4e:	dc55      	bgt.n	8005cfc <__multiply+0x134>
 8005c50:	6107      	str	r7, [r0, #16]
 8005c52:	b005      	add	sp, #20
 8005c54:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c58:	f843 2b04 	str.w	r2, [r3], #4
 8005c5c:	e7db      	b.n	8005c16 <__multiply+0x4e>
 8005c5e:	f8b3 a000 	ldrh.w	sl, [r3]
 8005c62:	f1ba 0f00 	cmp.w	sl, #0
 8005c66:	d020      	beq.n	8005caa <__multiply+0xe2>
 8005c68:	46b1      	mov	r9, r6
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	f105 0e14 	add.w	lr, r5, #20
 8005c70:	f85e 4b04 	ldr.w	r4, [lr], #4
 8005c74:	f8d9 b000 	ldr.w	fp, [r9]
 8005c78:	b2a1      	uxth	r1, r4
 8005c7a:	fa1f fb8b 	uxth.w	fp, fp
 8005c7e:	fb0a b101 	mla	r1, sl, r1, fp
 8005c82:	4411      	add	r1, r2
 8005c84:	f8d9 2000 	ldr.w	r2, [r9]
 8005c88:	0c24      	lsrs	r4, r4, #16
 8005c8a:	0c12      	lsrs	r2, r2, #16
 8005c8c:	fb0a 2404 	mla	r4, sl, r4, r2
 8005c90:	eb04 4411 	add.w	r4, r4, r1, lsr #16
 8005c94:	b289      	uxth	r1, r1
 8005c96:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 8005c9a:	45f4      	cmp	ip, lr
 8005c9c:	ea4f 4214 	mov.w	r2, r4, lsr #16
 8005ca0:	f849 1b04 	str.w	r1, [r9], #4
 8005ca4:	d8e4      	bhi.n	8005c70 <__multiply+0xa8>
 8005ca6:	9901      	ldr	r1, [sp, #4]
 8005ca8:	5072      	str	r2, [r6, r1]
 8005caa:	9a03      	ldr	r2, [sp, #12]
 8005cac:	3304      	adds	r3, #4
 8005cae:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 8005cb2:	f1b9 0f00 	cmp.w	r9, #0
 8005cb6:	d01f      	beq.n	8005cf8 <__multiply+0x130>
 8005cb8:	46b6      	mov	lr, r6
 8005cba:	f04f 0a00 	mov.w	sl, #0
 8005cbe:	6834      	ldr	r4, [r6, #0]
 8005cc0:	f105 0114 	add.w	r1, r5, #20
 8005cc4:	880a      	ldrh	r2, [r1, #0]
 8005cc6:	f8be b002 	ldrh.w	fp, [lr, #2]
 8005cca:	b2a4      	uxth	r4, r4
 8005ccc:	fb09 b202 	mla	r2, r9, r2, fp
 8005cd0:	4492      	add	sl, r2
 8005cd2:	ea44 440a 	orr.w	r4, r4, sl, lsl #16
 8005cd6:	f84e 4b04 	str.w	r4, [lr], #4
 8005cda:	f851 4b04 	ldr.w	r4, [r1], #4
 8005cde:	f8be 2000 	ldrh.w	r2, [lr]
 8005ce2:	0c24      	lsrs	r4, r4, #16
 8005ce4:	fb09 2404 	mla	r4, r9, r4, r2
 8005ce8:	458c      	cmp	ip, r1
 8005cea:	eb04 441a 	add.w	r4, r4, sl, lsr #16
 8005cee:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8005cf2:	d8e7      	bhi.n	8005cc4 <__multiply+0xfc>
 8005cf4:	9a01      	ldr	r2, [sp, #4]
 8005cf6:	50b4      	str	r4, [r6, r2]
 8005cf8:	3604      	adds	r6, #4
 8005cfa:	e7a3      	b.n	8005c44 <__multiply+0x7c>
 8005cfc:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1a5      	bne.n	8005c50 <__multiply+0x88>
 8005d04:	3f01      	subs	r7, #1
 8005d06:	e7a1      	b.n	8005c4c <__multiply+0x84>
 8005d08:	08007313 	.word	0x08007313
 8005d0c:	08007324 	.word	0x08007324

08005d10 <__pow5mult>:
 8005d10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005d14:	4615      	mov	r5, r2
 8005d16:	f012 0203 	ands.w	r2, r2, #3
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	460f      	mov	r7, r1
 8005d1e:	d007      	beq.n	8005d30 <__pow5mult+0x20>
 8005d20:	4c25      	ldr	r4, [pc, #148]	; (8005db8 <__pow5mult+0xa8>)
 8005d22:	3a01      	subs	r2, #1
 8005d24:	2300      	movs	r3, #0
 8005d26:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8005d2a:	f7ff fe9f 	bl	8005a6c <__multadd>
 8005d2e:	4607      	mov	r7, r0
 8005d30:	10ad      	asrs	r5, r5, #2
 8005d32:	d03d      	beq.n	8005db0 <__pow5mult+0xa0>
 8005d34:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8005d36:	b97c      	cbnz	r4, 8005d58 <__pow5mult+0x48>
 8005d38:	2010      	movs	r0, #16
 8005d3a:	f7ff fe1f 	bl	800597c <malloc>
 8005d3e:	4602      	mov	r2, r0
 8005d40:	6270      	str	r0, [r6, #36]	; 0x24
 8005d42:	b928      	cbnz	r0, 8005d50 <__pow5mult+0x40>
 8005d44:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 8005d48:	4b1c      	ldr	r3, [pc, #112]	; (8005dbc <__pow5mult+0xac>)
 8005d4a:	481d      	ldr	r0, [pc, #116]	; (8005dc0 <__pow5mult+0xb0>)
 8005d4c:	f000 fbce 	bl	80064ec <__assert_func>
 8005d50:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005d54:	6004      	str	r4, [r0, #0]
 8005d56:	60c4      	str	r4, [r0, #12]
 8005d58:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8005d5c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8005d60:	b94c      	cbnz	r4, 8005d76 <__pow5mult+0x66>
 8005d62:	f240 2171 	movw	r1, #625	; 0x271
 8005d66:	4630      	mov	r0, r6
 8005d68:	f7ff ff18 	bl	8005b9c <__i2b>
 8005d6c:	2300      	movs	r3, #0
 8005d6e:	4604      	mov	r4, r0
 8005d70:	f8c8 0008 	str.w	r0, [r8, #8]
 8005d74:	6003      	str	r3, [r0, #0]
 8005d76:	f04f 0900 	mov.w	r9, #0
 8005d7a:	07eb      	lsls	r3, r5, #31
 8005d7c:	d50a      	bpl.n	8005d94 <__pow5mult+0x84>
 8005d7e:	4639      	mov	r1, r7
 8005d80:	4622      	mov	r2, r4
 8005d82:	4630      	mov	r0, r6
 8005d84:	f7ff ff20 	bl	8005bc8 <__multiply>
 8005d88:	4680      	mov	r8, r0
 8005d8a:	4639      	mov	r1, r7
 8005d8c:	4630      	mov	r0, r6
 8005d8e:	f7ff fe4b 	bl	8005a28 <_Bfree>
 8005d92:	4647      	mov	r7, r8
 8005d94:	106d      	asrs	r5, r5, #1
 8005d96:	d00b      	beq.n	8005db0 <__pow5mult+0xa0>
 8005d98:	6820      	ldr	r0, [r4, #0]
 8005d9a:	b938      	cbnz	r0, 8005dac <__pow5mult+0x9c>
 8005d9c:	4622      	mov	r2, r4
 8005d9e:	4621      	mov	r1, r4
 8005da0:	4630      	mov	r0, r6
 8005da2:	f7ff ff11 	bl	8005bc8 <__multiply>
 8005da6:	6020      	str	r0, [r4, #0]
 8005da8:	f8c0 9000 	str.w	r9, [r0]
 8005dac:	4604      	mov	r4, r0
 8005dae:	e7e4      	b.n	8005d7a <__pow5mult+0x6a>
 8005db0:	4638      	mov	r0, r7
 8005db2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005db6:	bf00      	nop
 8005db8:	08007478 	.word	0x08007478
 8005dbc:	0800729d 	.word	0x0800729d
 8005dc0:	08007324 	.word	0x08007324

08005dc4 <__lshift>:
 8005dc4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005dc8:	460c      	mov	r4, r1
 8005dca:	4607      	mov	r7, r0
 8005dcc:	4691      	mov	r9, r2
 8005dce:	6923      	ldr	r3, [r4, #16]
 8005dd0:	6849      	ldr	r1, [r1, #4]
 8005dd2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8005dd6:	68a3      	ldr	r3, [r4, #8]
 8005dd8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8005ddc:	f108 0601 	add.w	r6, r8, #1
 8005de0:	42b3      	cmp	r3, r6
 8005de2:	db0b      	blt.n	8005dfc <__lshift+0x38>
 8005de4:	4638      	mov	r0, r7
 8005de6:	f7ff fddf 	bl	80059a8 <_Balloc>
 8005dea:	4605      	mov	r5, r0
 8005dec:	b948      	cbnz	r0, 8005e02 <__lshift+0x3e>
 8005dee:	4602      	mov	r2, r0
 8005df0:	f240 11d9 	movw	r1, #473	; 0x1d9
 8005df4:	4b27      	ldr	r3, [pc, #156]	; (8005e94 <__lshift+0xd0>)
 8005df6:	4828      	ldr	r0, [pc, #160]	; (8005e98 <__lshift+0xd4>)
 8005df8:	f000 fb78 	bl	80064ec <__assert_func>
 8005dfc:	3101      	adds	r1, #1
 8005dfe:	005b      	lsls	r3, r3, #1
 8005e00:	e7ee      	b.n	8005de0 <__lshift+0x1c>
 8005e02:	2300      	movs	r3, #0
 8005e04:	f100 0114 	add.w	r1, r0, #20
 8005e08:	f100 0210 	add.w	r2, r0, #16
 8005e0c:	4618      	mov	r0, r3
 8005e0e:	4553      	cmp	r3, sl
 8005e10:	db33      	blt.n	8005e7a <__lshift+0xb6>
 8005e12:	6920      	ldr	r0, [r4, #16]
 8005e14:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8005e18:	f104 0314 	add.w	r3, r4, #20
 8005e1c:	f019 091f 	ands.w	r9, r9, #31
 8005e20:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8005e24:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8005e28:	d02b      	beq.n	8005e82 <__lshift+0xbe>
 8005e2a:	468a      	mov	sl, r1
 8005e2c:	2200      	movs	r2, #0
 8005e2e:	f1c9 0e20 	rsb	lr, r9, #32
 8005e32:	6818      	ldr	r0, [r3, #0]
 8005e34:	fa00 f009 	lsl.w	r0, r0, r9
 8005e38:	4302      	orrs	r2, r0
 8005e3a:	f84a 2b04 	str.w	r2, [sl], #4
 8005e3e:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e42:	459c      	cmp	ip, r3
 8005e44:	fa22 f20e 	lsr.w	r2, r2, lr
 8005e48:	d8f3      	bhi.n	8005e32 <__lshift+0x6e>
 8005e4a:	ebac 0304 	sub.w	r3, ip, r4
 8005e4e:	3b15      	subs	r3, #21
 8005e50:	f023 0303 	bic.w	r3, r3, #3
 8005e54:	3304      	adds	r3, #4
 8005e56:	f104 0015 	add.w	r0, r4, #21
 8005e5a:	4584      	cmp	ip, r0
 8005e5c:	bf38      	it	cc
 8005e5e:	2304      	movcc	r3, #4
 8005e60:	50ca      	str	r2, [r1, r3]
 8005e62:	b10a      	cbz	r2, 8005e68 <__lshift+0xa4>
 8005e64:	f108 0602 	add.w	r6, r8, #2
 8005e68:	3e01      	subs	r6, #1
 8005e6a:	4638      	mov	r0, r7
 8005e6c:	4621      	mov	r1, r4
 8005e6e:	612e      	str	r6, [r5, #16]
 8005e70:	f7ff fdda 	bl	8005a28 <_Bfree>
 8005e74:	4628      	mov	r0, r5
 8005e76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005e7a:	f842 0f04 	str.w	r0, [r2, #4]!
 8005e7e:	3301      	adds	r3, #1
 8005e80:	e7c5      	b.n	8005e0e <__lshift+0x4a>
 8005e82:	3904      	subs	r1, #4
 8005e84:	f853 2b04 	ldr.w	r2, [r3], #4
 8005e88:	459c      	cmp	ip, r3
 8005e8a:	f841 2f04 	str.w	r2, [r1, #4]!
 8005e8e:	d8f9      	bhi.n	8005e84 <__lshift+0xc0>
 8005e90:	e7ea      	b.n	8005e68 <__lshift+0xa4>
 8005e92:	bf00      	nop
 8005e94:	08007313 	.word	0x08007313
 8005e98:	08007324 	.word	0x08007324

08005e9c <__mcmp>:
 8005e9c:	4603      	mov	r3, r0
 8005e9e:	690a      	ldr	r2, [r1, #16]
 8005ea0:	6900      	ldr	r0, [r0, #16]
 8005ea2:	b530      	push	{r4, r5, lr}
 8005ea4:	1a80      	subs	r0, r0, r2
 8005ea6:	d10d      	bne.n	8005ec4 <__mcmp+0x28>
 8005ea8:	3314      	adds	r3, #20
 8005eaa:	3114      	adds	r1, #20
 8005eac:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8005eb0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8005eb4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8005eb8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8005ebc:	4295      	cmp	r5, r2
 8005ebe:	d002      	beq.n	8005ec6 <__mcmp+0x2a>
 8005ec0:	d304      	bcc.n	8005ecc <__mcmp+0x30>
 8005ec2:	2001      	movs	r0, #1
 8005ec4:	bd30      	pop	{r4, r5, pc}
 8005ec6:	42a3      	cmp	r3, r4
 8005ec8:	d3f4      	bcc.n	8005eb4 <__mcmp+0x18>
 8005eca:	e7fb      	b.n	8005ec4 <__mcmp+0x28>
 8005ecc:	f04f 30ff 	mov.w	r0, #4294967295
 8005ed0:	e7f8      	b.n	8005ec4 <__mcmp+0x28>
	...

08005ed4 <__mdiff>:
 8005ed4:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005ed8:	460c      	mov	r4, r1
 8005eda:	4606      	mov	r6, r0
 8005edc:	4611      	mov	r1, r2
 8005ede:	4620      	mov	r0, r4
 8005ee0:	4692      	mov	sl, r2
 8005ee2:	f7ff ffdb 	bl	8005e9c <__mcmp>
 8005ee6:	1e05      	subs	r5, r0, #0
 8005ee8:	d111      	bne.n	8005f0e <__mdiff+0x3a>
 8005eea:	4629      	mov	r1, r5
 8005eec:	4630      	mov	r0, r6
 8005eee:	f7ff fd5b 	bl	80059a8 <_Balloc>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	b928      	cbnz	r0, 8005f02 <__mdiff+0x2e>
 8005ef6:	f240 2132 	movw	r1, #562	; 0x232
 8005efa:	4b3c      	ldr	r3, [pc, #240]	; (8005fec <__mdiff+0x118>)
 8005efc:	483c      	ldr	r0, [pc, #240]	; (8005ff0 <__mdiff+0x11c>)
 8005efe:	f000 faf5 	bl	80064ec <__assert_func>
 8005f02:	2301      	movs	r3, #1
 8005f04:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8005f08:	4610      	mov	r0, r2
 8005f0a:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005f0e:	bfa4      	itt	ge
 8005f10:	4653      	movge	r3, sl
 8005f12:	46a2      	movge	sl, r4
 8005f14:	4630      	mov	r0, r6
 8005f16:	f8da 1004 	ldr.w	r1, [sl, #4]
 8005f1a:	bfa6      	itte	ge
 8005f1c:	461c      	movge	r4, r3
 8005f1e:	2500      	movge	r5, #0
 8005f20:	2501      	movlt	r5, #1
 8005f22:	f7ff fd41 	bl	80059a8 <_Balloc>
 8005f26:	4602      	mov	r2, r0
 8005f28:	b918      	cbnz	r0, 8005f32 <__mdiff+0x5e>
 8005f2a:	f44f 7110 	mov.w	r1, #576	; 0x240
 8005f2e:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <__mdiff+0x118>)
 8005f30:	e7e4      	b.n	8005efc <__mdiff+0x28>
 8005f32:	f100 0814 	add.w	r8, r0, #20
 8005f36:	f8da 7010 	ldr.w	r7, [sl, #16]
 8005f3a:	60c5      	str	r5, [r0, #12]
 8005f3c:	f04f 0c00 	mov.w	ip, #0
 8005f40:	f10a 0514 	add.w	r5, sl, #20
 8005f44:	f10a 0010 	add.w	r0, sl, #16
 8005f48:	46c2      	mov	sl, r8
 8005f4a:	6926      	ldr	r6, [r4, #16]
 8005f4c:	f104 0914 	add.w	r9, r4, #20
 8005f50:	eb05 0e87 	add.w	lr, r5, r7, lsl #2
 8005f54:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 8005f58:	f850 bf04 	ldr.w	fp, [r0, #4]!
 8005f5c:	f859 3b04 	ldr.w	r3, [r9], #4
 8005f60:	fa1f f18b 	uxth.w	r1, fp
 8005f64:	4461      	add	r1, ip
 8005f66:	fa1f fc83 	uxth.w	ip, r3
 8005f6a:	0c1b      	lsrs	r3, r3, #16
 8005f6c:	eba1 010c 	sub.w	r1, r1, ip
 8005f70:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 8005f74:	eb03 4321 	add.w	r3, r3, r1, asr #16
 8005f78:	b289      	uxth	r1, r1
 8005f7a:	ea4f 4c23 	mov.w	ip, r3, asr #16
 8005f7e:	454e      	cmp	r6, r9
 8005f80:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8005f84:	f84a 3b04 	str.w	r3, [sl], #4
 8005f88:	d8e6      	bhi.n	8005f58 <__mdiff+0x84>
 8005f8a:	1b33      	subs	r3, r6, r4
 8005f8c:	3b15      	subs	r3, #21
 8005f8e:	f023 0303 	bic.w	r3, r3, #3
 8005f92:	3415      	adds	r4, #21
 8005f94:	3304      	adds	r3, #4
 8005f96:	42a6      	cmp	r6, r4
 8005f98:	bf38      	it	cc
 8005f9a:	2304      	movcc	r3, #4
 8005f9c:	441d      	add	r5, r3
 8005f9e:	4443      	add	r3, r8
 8005fa0:	461e      	mov	r6, r3
 8005fa2:	462c      	mov	r4, r5
 8005fa4:	4574      	cmp	r4, lr
 8005fa6:	d30e      	bcc.n	8005fc6 <__mdiff+0xf2>
 8005fa8:	f10e 0103 	add.w	r1, lr, #3
 8005fac:	1b49      	subs	r1, r1, r5
 8005fae:	f021 0103 	bic.w	r1, r1, #3
 8005fb2:	3d03      	subs	r5, #3
 8005fb4:	45ae      	cmp	lr, r5
 8005fb6:	bf38      	it	cc
 8005fb8:	2100      	movcc	r1, #0
 8005fba:	4419      	add	r1, r3
 8005fbc:	f851 3d04 	ldr.w	r3, [r1, #-4]!
 8005fc0:	b18b      	cbz	r3, 8005fe6 <__mdiff+0x112>
 8005fc2:	6117      	str	r7, [r2, #16]
 8005fc4:	e7a0      	b.n	8005f08 <__mdiff+0x34>
 8005fc6:	f854 8b04 	ldr.w	r8, [r4], #4
 8005fca:	fa1f f188 	uxth.w	r1, r8
 8005fce:	4461      	add	r1, ip
 8005fd0:	1408      	asrs	r0, r1, #16
 8005fd2:	eb00 4018 	add.w	r0, r0, r8, lsr #16
 8005fd6:	b289      	uxth	r1, r1
 8005fd8:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8005fdc:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8005fe0:	f846 1b04 	str.w	r1, [r6], #4
 8005fe4:	e7de      	b.n	8005fa4 <__mdiff+0xd0>
 8005fe6:	3f01      	subs	r7, #1
 8005fe8:	e7e8      	b.n	8005fbc <__mdiff+0xe8>
 8005fea:	bf00      	nop
 8005fec:	08007313 	.word	0x08007313
 8005ff0:	08007324 	.word	0x08007324

08005ff4 <__d2b>:
 8005ff4:	e92d 41f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, lr}
 8005ff8:	2101      	movs	r1, #1
 8005ffa:	e9dd 7608 	ldrd	r7, r6, [sp, #32]
 8005ffe:	4690      	mov	r8, r2
 8006000:	461d      	mov	r5, r3
 8006002:	f7ff fcd1 	bl	80059a8 <_Balloc>
 8006006:	4604      	mov	r4, r0
 8006008:	b930      	cbnz	r0, 8006018 <__d2b+0x24>
 800600a:	4602      	mov	r2, r0
 800600c:	f240 310a 	movw	r1, #778	; 0x30a
 8006010:	4b24      	ldr	r3, [pc, #144]	; (80060a4 <__d2b+0xb0>)
 8006012:	4825      	ldr	r0, [pc, #148]	; (80060a8 <__d2b+0xb4>)
 8006014:	f000 fa6a 	bl	80064ec <__assert_func>
 8006018:	f3c5 0313 	ubfx	r3, r5, #0, #20
 800601c:	f3c5 550a 	ubfx	r5, r5, #20, #11
 8006020:	bb2d      	cbnz	r5, 800606e <__d2b+0x7a>
 8006022:	9301      	str	r3, [sp, #4]
 8006024:	f1b8 0300 	subs.w	r3, r8, #0
 8006028:	d026      	beq.n	8006078 <__d2b+0x84>
 800602a:	4668      	mov	r0, sp
 800602c:	9300      	str	r3, [sp, #0]
 800602e:	f7ff fd87 	bl	8005b40 <__lo0bits>
 8006032:	9900      	ldr	r1, [sp, #0]
 8006034:	b1f0      	cbz	r0, 8006074 <__d2b+0x80>
 8006036:	9a01      	ldr	r2, [sp, #4]
 8006038:	f1c0 0320 	rsb	r3, r0, #32
 800603c:	fa02 f303 	lsl.w	r3, r2, r3
 8006040:	430b      	orrs	r3, r1
 8006042:	40c2      	lsrs	r2, r0
 8006044:	6163      	str	r3, [r4, #20]
 8006046:	9201      	str	r2, [sp, #4]
 8006048:	9b01      	ldr	r3, [sp, #4]
 800604a:	2b00      	cmp	r3, #0
 800604c:	bf14      	ite	ne
 800604e:	2102      	movne	r1, #2
 8006050:	2101      	moveq	r1, #1
 8006052:	61a3      	str	r3, [r4, #24]
 8006054:	6121      	str	r1, [r4, #16]
 8006056:	b1c5      	cbz	r5, 800608a <__d2b+0x96>
 8006058:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800605c:	4405      	add	r5, r0
 800605e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 8006062:	603d      	str	r5, [r7, #0]
 8006064:	6030      	str	r0, [r6, #0]
 8006066:	4620      	mov	r0, r4
 8006068:	b002      	add	sp, #8
 800606a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800606e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006072:	e7d6      	b.n	8006022 <__d2b+0x2e>
 8006074:	6161      	str	r1, [r4, #20]
 8006076:	e7e7      	b.n	8006048 <__d2b+0x54>
 8006078:	a801      	add	r0, sp, #4
 800607a:	f7ff fd61 	bl	8005b40 <__lo0bits>
 800607e:	2101      	movs	r1, #1
 8006080:	9b01      	ldr	r3, [sp, #4]
 8006082:	6121      	str	r1, [r4, #16]
 8006084:	6163      	str	r3, [r4, #20]
 8006086:	3020      	adds	r0, #32
 8006088:	e7e5      	b.n	8006056 <__d2b+0x62>
 800608a:	eb04 0381 	add.w	r3, r4, r1, lsl #2
 800608e:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 8006092:	6038      	str	r0, [r7, #0]
 8006094:	6918      	ldr	r0, [r3, #16]
 8006096:	f7ff fd33 	bl	8005b00 <__hi0bits>
 800609a:	ebc0 1141 	rsb	r1, r0, r1, lsl #5
 800609e:	6031      	str	r1, [r6, #0]
 80060a0:	e7e1      	b.n	8006066 <__d2b+0x72>
 80060a2:	bf00      	nop
 80060a4:	08007313 	.word	0x08007313
 80060a8:	08007324 	.word	0x08007324

080060ac <_calloc_r>:
 80060ac:	b538      	push	{r3, r4, r5, lr}
 80060ae:	fb02 f501 	mul.w	r5, r2, r1
 80060b2:	4629      	mov	r1, r5
 80060b4:	f000 f854 	bl	8006160 <_malloc_r>
 80060b8:	4604      	mov	r4, r0
 80060ba:	b118      	cbz	r0, 80060c4 <_calloc_r+0x18>
 80060bc:	462a      	mov	r2, r5
 80060be:	2100      	movs	r1, #0
 80060c0:	f7fe f91a 	bl	80042f8 <memset>
 80060c4:	4620      	mov	r0, r4
 80060c6:	bd38      	pop	{r3, r4, r5, pc}

080060c8 <_free_r>:
 80060c8:	b538      	push	{r3, r4, r5, lr}
 80060ca:	4605      	mov	r5, r0
 80060cc:	2900      	cmp	r1, #0
 80060ce:	d043      	beq.n	8006158 <_free_r+0x90>
 80060d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80060d4:	1f0c      	subs	r4, r1, #4
 80060d6:	2b00      	cmp	r3, #0
 80060d8:	bfb8      	it	lt
 80060da:	18e4      	addlt	r4, r4, r3
 80060dc:	f000 fa62 	bl	80065a4 <__malloc_lock>
 80060e0:	4a1e      	ldr	r2, [pc, #120]	; (800615c <_free_r+0x94>)
 80060e2:	6813      	ldr	r3, [r2, #0]
 80060e4:	4610      	mov	r0, r2
 80060e6:	b933      	cbnz	r3, 80060f6 <_free_r+0x2e>
 80060e8:	6063      	str	r3, [r4, #4]
 80060ea:	6014      	str	r4, [r2, #0]
 80060ec:	4628      	mov	r0, r5
 80060ee:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80060f2:	f000 ba5d 	b.w	80065b0 <__malloc_unlock>
 80060f6:	42a3      	cmp	r3, r4
 80060f8:	d90a      	bls.n	8006110 <_free_r+0x48>
 80060fa:	6821      	ldr	r1, [r4, #0]
 80060fc:	1862      	adds	r2, r4, r1
 80060fe:	4293      	cmp	r3, r2
 8006100:	bf01      	itttt	eq
 8006102:	681a      	ldreq	r2, [r3, #0]
 8006104:	685b      	ldreq	r3, [r3, #4]
 8006106:	1852      	addeq	r2, r2, r1
 8006108:	6022      	streq	r2, [r4, #0]
 800610a:	6063      	str	r3, [r4, #4]
 800610c:	6004      	str	r4, [r0, #0]
 800610e:	e7ed      	b.n	80060ec <_free_r+0x24>
 8006110:	461a      	mov	r2, r3
 8006112:	685b      	ldr	r3, [r3, #4]
 8006114:	b10b      	cbz	r3, 800611a <_free_r+0x52>
 8006116:	42a3      	cmp	r3, r4
 8006118:	d9fa      	bls.n	8006110 <_free_r+0x48>
 800611a:	6811      	ldr	r1, [r2, #0]
 800611c:	1850      	adds	r0, r2, r1
 800611e:	42a0      	cmp	r0, r4
 8006120:	d10b      	bne.n	800613a <_free_r+0x72>
 8006122:	6820      	ldr	r0, [r4, #0]
 8006124:	4401      	add	r1, r0
 8006126:	1850      	adds	r0, r2, r1
 8006128:	4283      	cmp	r3, r0
 800612a:	6011      	str	r1, [r2, #0]
 800612c:	d1de      	bne.n	80060ec <_free_r+0x24>
 800612e:	6818      	ldr	r0, [r3, #0]
 8006130:	685b      	ldr	r3, [r3, #4]
 8006132:	4401      	add	r1, r0
 8006134:	6011      	str	r1, [r2, #0]
 8006136:	6053      	str	r3, [r2, #4]
 8006138:	e7d8      	b.n	80060ec <_free_r+0x24>
 800613a:	d902      	bls.n	8006142 <_free_r+0x7a>
 800613c:	230c      	movs	r3, #12
 800613e:	602b      	str	r3, [r5, #0]
 8006140:	e7d4      	b.n	80060ec <_free_r+0x24>
 8006142:	6820      	ldr	r0, [r4, #0]
 8006144:	1821      	adds	r1, r4, r0
 8006146:	428b      	cmp	r3, r1
 8006148:	bf01      	itttt	eq
 800614a:	6819      	ldreq	r1, [r3, #0]
 800614c:	685b      	ldreq	r3, [r3, #4]
 800614e:	1809      	addeq	r1, r1, r0
 8006150:	6021      	streq	r1, [r4, #0]
 8006152:	6063      	str	r3, [r4, #4]
 8006154:	6054      	str	r4, [r2, #4]
 8006156:	e7c9      	b.n	80060ec <_free_r+0x24>
 8006158:	bd38      	pop	{r3, r4, r5, pc}
 800615a:	bf00      	nop
 800615c:	20000280 	.word	0x20000280

08006160 <_malloc_r>:
 8006160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006162:	1ccd      	adds	r5, r1, #3
 8006164:	f025 0503 	bic.w	r5, r5, #3
 8006168:	3508      	adds	r5, #8
 800616a:	2d0c      	cmp	r5, #12
 800616c:	bf38      	it	cc
 800616e:	250c      	movcc	r5, #12
 8006170:	2d00      	cmp	r5, #0
 8006172:	4606      	mov	r6, r0
 8006174:	db01      	blt.n	800617a <_malloc_r+0x1a>
 8006176:	42a9      	cmp	r1, r5
 8006178:	d903      	bls.n	8006182 <_malloc_r+0x22>
 800617a:	230c      	movs	r3, #12
 800617c:	6033      	str	r3, [r6, #0]
 800617e:	2000      	movs	r0, #0
 8006180:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006182:	f000 fa0f 	bl	80065a4 <__malloc_lock>
 8006186:	4921      	ldr	r1, [pc, #132]	; (800620c <_malloc_r+0xac>)
 8006188:	680a      	ldr	r2, [r1, #0]
 800618a:	4614      	mov	r4, r2
 800618c:	b99c      	cbnz	r4, 80061b6 <_malloc_r+0x56>
 800618e:	4f20      	ldr	r7, [pc, #128]	; (8006210 <_malloc_r+0xb0>)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	b923      	cbnz	r3, 800619e <_malloc_r+0x3e>
 8006194:	4621      	mov	r1, r4
 8006196:	4630      	mov	r0, r6
 8006198:	f000 f998 	bl	80064cc <_sbrk_r>
 800619c:	6038      	str	r0, [r7, #0]
 800619e:	4629      	mov	r1, r5
 80061a0:	4630      	mov	r0, r6
 80061a2:	f000 f993 	bl	80064cc <_sbrk_r>
 80061a6:	1c43      	adds	r3, r0, #1
 80061a8:	d123      	bne.n	80061f2 <_malloc_r+0x92>
 80061aa:	230c      	movs	r3, #12
 80061ac:	4630      	mov	r0, r6
 80061ae:	6033      	str	r3, [r6, #0]
 80061b0:	f000 f9fe 	bl	80065b0 <__malloc_unlock>
 80061b4:	e7e3      	b.n	800617e <_malloc_r+0x1e>
 80061b6:	6823      	ldr	r3, [r4, #0]
 80061b8:	1b5b      	subs	r3, r3, r5
 80061ba:	d417      	bmi.n	80061ec <_malloc_r+0x8c>
 80061bc:	2b0b      	cmp	r3, #11
 80061be:	d903      	bls.n	80061c8 <_malloc_r+0x68>
 80061c0:	6023      	str	r3, [r4, #0]
 80061c2:	441c      	add	r4, r3
 80061c4:	6025      	str	r5, [r4, #0]
 80061c6:	e004      	b.n	80061d2 <_malloc_r+0x72>
 80061c8:	6863      	ldr	r3, [r4, #4]
 80061ca:	42a2      	cmp	r2, r4
 80061cc:	bf0c      	ite	eq
 80061ce:	600b      	streq	r3, [r1, #0]
 80061d0:	6053      	strne	r3, [r2, #4]
 80061d2:	4630      	mov	r0, r6
 80061d4:	f000 f9ec 	bl	80065b0 <__malloc_unlock>
 80061d8:	f104 000b 	add.w	r0, r4, #11
 80061dc:	1d23      	adds	r3, r4, #4
 80061de:	f020 0007 	bic.w	r0, r0, #7
 80061e2:	1ac2      	subs	r2, r0, r3
 80061e4:	d0cc      	beq.n	8006180 <_malloc_r+0x20>
 80061e6:	1a1b      	subs	r3, r3, r0
 80061e8:	50a3      	str	r3, [r4, r2]
 80061ea:	e7c9      	b.n	8006180 <_malloc_r+0x20>
 80061ec:	4622      	mov	r2, r4
 80061ee:	6864      	ldr	r4, [r4, #4]
 80061f0:	e7cc      	b.n	800618c <_malloc_r+0x2c>
 80061f2:	1cc4      	adds	r4, r0, #3
 80061f4:	f024 0403 	bic.w	r4, r4, #3
 80061f8:	42a0      	cmp	r0, r4
 80061fa:	d0e3      	beq.n	80061c4 <_malloc_r+0x64>
 80061fc:	1a21      	subs	r1, r4, r0
 80061fe:	4630      	mov	r0, r6
 8006200:	f000 f964 	bl	80064cc <_sbrk_r>
 8006204:	3001      	adds	r0, #1
 8006206:	d1dd      	bne.n	80061c4 <_malloc_r+0x64>
 8006208:	e7cf      	b.n	80061aa <_malloc_r+0x4a>
 800620a:	bf00      	nop
 800620c:	20000280 	.word	0x20000280
 8006210:	20000284 	.word	0x20000284

08006214 <__ssputs_r>:
 8006214:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006218:	688e      	ldr	r6, [r1, #8]
 800621a:	4682      	mov	sl, r0
 800621c:	429e      	cmp	r6, r3
 800621e:	460c      	mov	r4, r1
 8006220:	4690      	mov	r8, r2
 8006222:	461f      	mov	r7, r3
 8006224:	d838      	bhi.n	8006298 <__ssputs_r+0x84>
 8006226:	898a      	ldrh	r2, [r1, #12]
 8006228:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800622c:	d032      	beq.n	8006294 <__ssputs_r+0x80>
 800622e:	6825      	ldr	r5, [r4, #0]
 8006230:	6909      	ldr	r1, [r1, #16]
 8006232:	3301      	adds	r3, #1
 8006234:	eba5 0901 	sub.w	r9, r5, r1
 8006238:	6965      	ldr	r5, [r4, #20]
 800623a:	444b      	add	r3, r9
 800623c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006240:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8006244:	106d      	asrs	r5, r5, #1
 8006246:	429d      	cmp	r5, r3
 8006248:	bf38      	it	cc
 800624a:	461d      	movcc	r5, r3
 800624c:	0553      	lsls	r3, r2, #21
 800624e:	d531      	bpl.n	80062b4 <__ssputs_r+0xa0>
 8006250:	4629      	mov	r1, r5
 8006252:	f7ff ff85 	bl	8006160 <_malloc_r>
 8006256:	4606      	mov	r6, r0
 8006258:	b950      	cbnz	r0, 8006270 <__ssputs_r+0x5c>
 800625a:	230c      	movs	r3, #12
 800625c:	f04f 30ff 	mov.w	r0, #4294967295
 8006260:	f8ca 3000 	str.w	r3, [sl]
 8006264:	89a3      	ldrh	r3, [r4, #12]
 8006266:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800626a:	81a3      	strh	r3, [r4, #12]
 800626c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006270:	464a      	mov	r2, r9
 8006272:	6921      	ldr	r1, [r4, #16]
 8006274:	f7fe f832 	bl	80042dc <memcpy>
 8006278:	89a3      	ldrh	r3, [r4, #12]
 800627a:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800627e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006282:	81a3      	strh	r3, [r4, #12]
 8006284:	6126      	str	r6, [r4, #16]
 8006286:	444e      	add	r6, r9
 8006288:	6026      	str	r6, [r4, #0]
 800628a:	463e      	mov	r6, r7
 800628c:	6165      	str	r5, [r4, #20]
 800628e:	eba5 0509 	sub.w	r5, r5, r9
 8006292:	60a5      	str	r5, [r4, #8]
 8006294:	42be      	cmp	r6, r7
 8006296:	d900      	bls.n	800629a <__ssputs_r+0x86>
 8006298:	463e      	mov	r6, r7
 800629a:	4632      	mov	r2, r6
 800629c:	4641      	mov	r1, r8
 800629e:	6820      	ldr	r0, [r4, #0]
 80062a0:	f000 f966 	bl	8006570 <memmove>
 80062a4:	68a3      	ldr	r3, [r4, #8]
 80062a6:	6822      	ldr	r2, [r4, #0]
 80062a8:	1b9b      	subs	r3, r3, r6
 80062aa:	4432      	add	r2, r6
 80062ac:	2000      	movs	r0, #0
 80062ae:	60a3      	str	r3, [r4, #8]
 80062b0:	6022      	str	r2, [r4, #0]
 80062b2:	e7db      	b.n	800626c <__ssputs_r+0x58>
 80062b4:	462a      	mov	r2, r5
 80062b6:	f000 f981 	bl	80065bc <_realloc_r>
 80062ba:	4606      	mov	r6, r0
 80062bc:	2800      	cmp	r0, #0
 80062be:	d1e1      	bne.n	8006284 <__ssputs_r+0x70>
 80062c0:	4650      	mov	r0, sl
 80062c2:	6921      	ldr	r1, [r4, #16]
 80062c4:	f7ff ff00 	bl	80060c8 <_free_r>
 80062c8:	e7c7      	b.n	800625a <__ssputs_r+0x46>
	...

080062cc <_svfiprintf_r>:
 80062cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80062d0:	4698      	mov	r8, r3
 80062d2:	898b      	ldrh	r3, [r1, #12]
 80062d4:	4607      	mov	r7, r0
 80062d6:	061b      	lsls	r3, r3, #24
 80062d8:	460d      	mov	r5, r1
 80062da:	4614      	mov	r4, r2
 80062dc:	b09d      	sub	sp, #116	; 0x74
 80062de:	d50e      	bpl.n	80062fe <_svfiprintf_r+0x32>
 80062e0:	690b      	ldr	r3, [r1, #16]
 80062e2:	b963      	cbnz	r3, 80062fe <_svfiprintf_r+0x32>
 80062e4:	2140      	movs	r1, #64	; 0x40
 80062e6:	f7ff ff3b 	bl	8006160 <_malloc_r>
 80062ea:	6028      	str	r0, [r5, #0]
 80062ec:	6128      	str	r0, [r5, #16]
 80062ee:	b920      	cbnz	r0, 80062fa <_svfiprintf_r+0x2e>
 80062f0:	230c      	movs	r3, #12
 80062f2:	603b      	str	r3, [r7, #0]
 80062f4:	f04f 30ff 	mov.w	r0, #4294967295
 80062f8:	e0d1      	b.n	800649e <_svfiprintf_r+0x1d2>
 80062fa:	2340      	movs	r3, #64	; 0x40
 80062fc:	616b      	str	r3, [r5, #20]
 80062fe:	2300      	movs	r3, #0
 8006300:	9309      	str	r3, [sp, #36]	; 0x24
 8006302:	2320      	movs	r3, #32
 8006304:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006308:	2330      	movs	r3, #48	; 0x30
 800630a:	f04f 0901 	mov.w	r9, #1
 800630e:	f8cd 800c 	str.w	r8, [sp, #12]
 8006312:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80064b8 <_svfiprintf_r+0x1ec>
 8006316:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800631a:	4623      	mov	r3, r4
 800631c:	469a      	mov	sl, r3
 800631e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006322:	b10a      	cbz	r2, 8006328 <_svfiprintf_r+0x5c>
 8006324:	2a25      	cmp	r2, #37	; 0x25
 8006326:	d1f9      	bne.n	800631c <_svfiprintf_r+0x50>
 8006328:	ebba 0b04 	subs.w	fp, sl, r4
 800632c:	d00b      	beq.n	8006346 <_svfiprintf_r+0x7a>
 800632e:	465b      	mov	r3, fp
 8006330:	4622      	mov	r2, r4
 8006332:	4629      	mov	r1, r5
 8006334:	4638      	mov	r0, r7
 8006336:	f7ff ff6d 	bl	8006214 <__ssputs_r>
 800633a:	3001      	adds	r0, #1
 800633c:	f000 80aa 	beq.w	8006494 <_svfiprintf_r+0x1c8>
 8006340:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006342:	445a      	add	r2, fp
 8006344:	9209      	str	r2, [sp, #36]	; 0x24
 8006346:	f89a 3000 	ldrb.w	r3, [sl]
 800634a:	2b00      	cmp	r3, #0
 800634c:	f000 80a2 	beq.w	8006494 <_svfiprintf_r+0x1c8>
 8006350:	2300      	movs	r3, #0
 8006352:	f04f 32ff 	mov.w	r2, #4294967295
 8006356:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800635a:	f10a 0a01 	add.w	sl, sl, #1
 800635e:	9304      	str	r3, [sp, #16]
 8006360:	9307      	str	r3, [sp, #28]
 8006362:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006366:	931a      	str	r3, [sp, #104]	; 0x68
 8006368:	4654      	mov	r4, sl
 800636a:	2205      	movs	r2, #5
 800636c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006370:	4851      	ldr	r0, [pc, #324]	; (80064b8 <_svfiprintf_r+0x1ec>)
 8006372:	f7ff fb0b 	bl	800598c <memchr>
 8006376:	9a04      	ldr	r2, [sp, #16]
 8006378:	b9d8      	cbnz	r0, 80063b2 <_svfiprintf_r+0xe6>
 800637a:	06d0      	lsls	r0, r2, #27
 800637c:	bf44      	itt	mi
 800637e:	2320      	movmi	r3, #32
 8006380:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006384:	0711      	lsls	r1, r2, #28
 8006386:	bf44      	itt	mi
 8006388:	232b      	movmi	r3, #43	; 0x2b
 800638a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800638e:	f89a 3000 	ldrb.w	r3, [sl]
 8006392:	2b2a      	cmp	r3, #42	; 0x2a
 8006394:	d015      	beq.n	80063c2 <_svfiprintf_r+0xf6>
 8006396:	4654      	mov	r4, sl
 8006398:	2000      	movs	r0, #0
 800639a:	f04f 0c0a 	mov.w	ip, #10
 800639e:	9a07      	ldr	r2, [sp, #28]
 80063a0:	4621      	mov	r1, r4
 80063a2:	f811 3b01 	ldrb.w	r3, [r1], #1
 80063a6:	3b30      	subs	r3, #48	; 0x30
 80063a8:	2b09      	cmp	r3, #9
 80063aa:	d94e      	bls.n	800644a <_svfiprintf_r+0x17e>
 80063ac:	b1b0      	cbz	r0, 80063dc <_svfiprintf_r+0x110>
 80063ae:	9207      	str	r2, [sp, #28]
 80063b0:	e014      	b.n	80063dc <_svfiprintf_r+0x110>
 80063b2:	eba0 0308 	sub.w	r3, r0, r8
 80063b6:	fa09 f303 	lsl.w	r3, r9, r3
 80063ba:	4313      	orrs	r3, r2
 80063bc:	46a2      	mov	sl, r4
 80063be:	9304      	str	r3, [sp, #16]
 80063c0:	e7d2      	b.n	8006368 <_svfiprintf_r+0x9c>
 80063c2:	9b03      	ldr	r3, [sp, #12]
 80063c4:	1d19      	adds	r1, r3, #4
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	9103      	str	r1, [sp, #12]
 80063ca:	2b00      	cmp	r3, #0
 80063cc:	bfbb      	ittet	lt
 80063ce:	425b      	neglt	r3, r3
 80063d0:	f042 0202 	orrlt.w	r2, r2, #2
 80063d4:	9307      	strge	r3, [sp, #28]
 80063d6:	9307      	strlt	r3, [sp, #28]
 80063d8:	bfb8      	it	lt
 80063da:	9204      	strlt	r2, [sp, #16]
 80063dc:	7823      	ldrb	r3, [r4, #0]
 80063de:	2b2e      	cmp	r3, #46	; 0x2e
 80063e0:	d10c      	bne.n	80063fc <_svfiprintf_r+0x130>
 80063e2:	7863      	ldrb	r3, [r4, #1]
 80063e4:	2b2a      	cmp	r3, #42	; 0x2a
 80063e6:	d135      	bne.n	8006454 <_svfiprintf_r+0x188>
 80063e8:	9b03      	ldr	r3, [sp, #12]
 80063ea:	3402      	adds	r4, #2
 80063ec:	1d1a      	adds	r2, r3, #4
 80063ee:	681b      	ldr	r3, [r3, #0]
 80063f0:	9203      	str	r2, [sp, #12]
 80063f2:	2b00      	cmp	r3, #0
 80063f4:	bfb8      	it	lt
 80063f6:	f04f 33ff 	movlt.w	r3, #4294967295
 80063fa:	9305      	str	r3, [sp, #20]
 80063fc:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 80064c8 <_svfiprintf_r+0x1fc>
 8006400:	2203      	movs	r2, #3
 8006402:	4650      	mov	r0, sl
 8006404:	7821      	ldrb	r1, [r4, #0]
 8006406:	f7ff fac1 	bl	800598c <memchr>
 800640a:	b140      	cbz	r0, 800641e <_svfiprintf_r+0x152>
 800640c:	2340      	movs	r3, #64	; 0x40
 800640e:	eba0 000a 	sub.w	r0, r0, sl
 8006412:	fa03 f000 	lsl.w	r0, r3, r0
 8006416:	9b04      	ldr	r3, [sp, #16]
 8006418:	3401      	adds	r4, #1
 800641a:	4303      	orrs	r3, r0
 800641c:	9304      	str	r3, [sp, #16]
 800641e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006422:	2206      	movs	r2, #6
 8006424:	4825      	ldr	r0, [pc, #148]	; (80064bc <_svfiprintf_r+0x1f0>)
 8006426:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800642a:	f7ff faaf 	bl	800598c <memchr>
 800642e:	2800      	cmp	r0, #0
 8006430:	d038      	beq.n	80064a4 <_svfiprintf_r+0x1d8>
 8006432:	4b23      	ldr	r3, [pc, #140]	; (80064c0 <_svfiprintf_r+0x1f4>)
 8006434:	bb1b      	cbnz	r3, 800647e <_svfiprintf_r+0x1b2>
 8006436:	9b03      	ldr	r3, [sp, #12]
 8006438:	3307      	adds	r3, #7
 800643a:	f023 0307 	bic.w	r3, r3, #7
 800643e:	3308      	adds	r3, #8
 8006440:	9303      	str	r3, [sp, #12]
 8006442:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006444:	4433      	add	r3, r6
 8006446:	9309      	str	r3, [sp, #36]	; 0x24
 8006448:	e767      	b.n	800631a <_svfiprintf_r+0x4e>
 800644a:	460c      	mov	r4, r1
 800644c:	2001      	movs	r0, #1
 800644e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006452:	e7a5      	b.n	80063a0 <_svfiprintf_r+0xd4>
 8006454:	2300      	movs	r3, #0
 8006456:	f04f 0c0a 	mov.w	ip, #10
 800645a:	4619      	mov	r1, r3
 800645c:	3401      	adds	r4, #1
 800645e:	9305      	str	r3, [sp, #20]
 8006460:	4620      	mov	r0, r4
 8006462:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006466:	3a30      	subs	r2, #48	; 0x30
 8006468:	2a09      	cmp	r2, #9
 800646a:	d903      	bls.n	8006474 <_svfiprintf_r+0x1a8>
 800646c:	2b00      	cmp	r3, #0
 800646e:	d0c5      	beq.n	80063fc <_svfiprintf_r+0x130>
 8006470:	9105      	str	r1, [sp, #20]
 8006472:	e7c3      	b.n	80063fc <_svfiprintf_r+0x130>
 8006474:	4604      	mov	r4, r0
 8006476:	2301      	movs	r3, #1
 8006478:	fb0c 2101 	mla	r1, ip, r1, r2
 800647c:	e7f0      	b.n	8006460 <_svfiprintf_r+0x194>
 800647e:	ab03      	add	r3, sp, #12
 8006480:	9300      	str	r3, [sp, #0]
 8006482:	462a      	mov	r2, r5
 8006484:	4638      	mov	r0, r7
 8006486:	4b0f      	ldr	r3, [pc, #60]	; (80064c4 <_svfiprintf_r+0x1f8>)
 8006488:	a904      	add	r1, sp, #16
 800648a:	f7fd ffdb 	bl	8004444 <_printf_float>
 800648e:	1c42      	adds	r2, r0, #1
 8006490:	4606      	mov	r6, r0
 8006492:	d1d6      	bne.n	8006442 <_svfiprintf_r+0x176>
 8006494:	89ab      	ldrh	r3, [r5, #12]
 8006496:	065b      	lsls	r3, r3, #25
 8006498:	f53f af2c 	bmi.w	80062f4 <_svfiprintf_r+0x28>
 800649c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800649e:	b01d      	add	sp, #116	; 0x74
 80064a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80064a4:	ab03      	add	r3, sp, #12
 80064a6:	9300      	str	r3, [sp, #0]
 80064a8:	462a      	mov	r2, r5
 80064aa:	4638      	mov	r0, r7
 80064ac:	4b05      	ldr	r3, [pc, #20]	; (80064c4 <_svfiprintf_r+0x1f8>)
 80064ae:	a904      	add	r1, sp, #16
 80064b0:	f7fe fa64 	bl	800497c <_printf_i>
 80064b4:	e7eb      	b.n	800648e <_svfiprintf_r+0x1c2>
 80064b6:	bf00      	nop
 80064b8:	08007484 	.word	0x08007484
 80064bc:	0800748e 	.word	0x0800748e
 80064c0:	08004445 	.word	0x08004445
 80064c4:	08006215 	.word	0x08006215
 80064c8:	0800748a 	.word	0x0800748a

080064cc <_sbrk_r>:
 80064cc:	b538      	push	{r3, r4, r5, lr}
 80064ce:	2300      	movs	r3, #0
 80064d0:	4d05      	ldr	r5, [pc, #20]	; (80064e8 <_sbrk_r+0x1c>)
 80064d2:	4604      	mov	r4, r0
 80064d4:	4608      	mov	r0, r1
 80064d6:	602b      	str	r3, [r5, #0]
 80064d8:	f7fb fd5e 	bl	8001f98 <_sbrk>
 80064dc:	1c43      	adds	r3, r0, #1
 80064de:	d102      	bne.n	80064e6 <_sbrk_r+0x1a>
 80064e0:	682b      	ldr	r3, [r5, #0]
 80064e2:	b103      	cbz	r3, 80064e6 <_sbrk_r+0x1a>
 80064e4:	6023      	str	r3, [r4, #0]
 80064e6:	bd38      	pop	{r3, r4, r5, pc}
 80064e8:	2000037c 	.word	0x2000037c

080064ec <__assert_func>:
 80064ec:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80064ee:	4614      	mov	r4, r2
 80064f0:	461a      	mov	r2, r3
 80064f2:	4b09      	ldr	r3, [pc, #36]	; (8006518 <__assert_func+0x2c>)
 80064f4:	4605      	mov	r5, r0
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	68d8      	ldr	r0, [r3, #12]
 80064fa:	b14c      	cbz	r4, 8006510 <__assert_func+0x24>
 80064fc:	4b07      	ldr	r3, [pc, #28]	; (800651c <__assert_func+0x30>)
 80064fe:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006502:	9100      	str	r1, [sp, #0]
 8006504:	462b      	mov	r3, r5
 8006506:	4906      	ldr	r1, [pc, #24]	; (8006520 <__assert_func+0x34>)
 8006508:	f000 f80e 	bl	8006528 <fiprintf>
 800650c:	f000 faa2 	bl	8006a54 <abort>
 8006510:	4b04      	ldr	r3, [pc, #16]	; (8006524 <__assert_func+0x38>)
 8006512:	461c      	mov	r4, r3
 8006514:	e7f3      	b.n	80064fe <__assert_func+0x12>
 8006516:	bf00      	nop
 8006518:	20000014 	.word	0x20000014
 800651c:	08007495 	.word	0x08007495
 8006520:	080074a2 	.word	0x080074a2
 8006524:	080074d0 	.word	0x080074d0

08006528 <fiprintf>:
 8006528:	b40e      	push	{r1, r2, r3}
 800652a:	b503      	push	{r0, r1, lr}
 800652c:	4601      	mov	r1, r0
 800652e:	ab03      	add	r3, sp, #12
 8006530:	4805      	ldr	r0, [pc, #20]	; (8006548 <fiprintf+0x20>)
 8006532:	f853 2b04 	ldr.w	r2, [r3], #4
 8006536:	6800      	ldr	r0, [r0, #0]
 8006538:	9301      	str	r3, [sp, #4]
 800653a:	f000 f88d 	bl	8006658 <_vfiprintf_r>
 800653e:	b002      	add	sp, #8
 8006540:	f85d eb04 	ldr.w	lr, [sp], #4
 8006544:	b003      	add	sp, #12
 8006546:	4770      	bx	lr
 8006548:	20000014 	.word	0x20000014

0800654c <__ascii_mbtowc>:
 800654c:	b082      	sub	sp, #8
 800654e:	b901      	cbnz	r1, 8006552 <__ascii_mbtowc+0x6>
 8006550:	a901      	add	r1, sp, #4
 8006552:	b142      	cbz	r2, 8006566 <__ascii_mbtowc+0x1a>
 8006554:	b14b      	cbz	r3, 800656a <__ascii_mbtowc+0x1e>
 8006556:	7813      	ldrb	r3, [r2, #0]
 8006558:	600b      	str	r3, [r1, #0]
 800655a:	7812      	ldrb	r2, [r2, #0]
 800655c:	1e10      	subs	r0, r2, #0
 800655e:	bf18      	it	ne
 8006560:	2001      	movne	r0, #1
 8006562:	b002      	add	sp, #8
 8006564:	4770      	bx	lr
 8006566:	4610      	mov	r0, r2
 8006568:	e7fb      	b.n	8006562 <__ascii_mbtowc+0x16>
 800656a:	f06f 0001 	mvn.w	r0, #1
 800656e:	e7f8      	b.n	8006562 <__ascii_mbtowc+0x16>

08006570 <memmove>:
 8006570:	4288      	cmp	r0, r1
 8006572:	b510      	push	{r4, lr}
 8006574:	eb01 0402 	add.w	r4, r1, r2
 8006578:	d902      	bls.n	8006580 <memmove+0x10>
 800657a:	4284      	cmp	r4, r0
 800657c:	4623      	mov	r3, r4
 800657e:	d807      	bhi.n	8006590 <memmove+0x20>
 8006580:	1e43      	subs	r3, r0, #1
 8006582:	42a1      	cmp	r1, r4
 8006584:	d008      	beq.n	8006598 <memmove+0x28>
 8006586:	f811 2b01 	ldrb.w	r2, [r1], #1
 800658a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800658e:	e7f8      	b.n	8006582 <memmove+0x12>
 8006590:	4601      	mov	r1, r0
 8006592:	4402      	add	r2, r0
 8006594:	428a      	cmp	r2, r1
 8006596:	d100      	bne.n	800659a <memmove+0x2a>
 8006598:	bd10      	pop	{r4, pc}
 800659a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800659e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80065a2:	e7f7      	b.n	8006594 <memmove+0x24>

080065a4 <__malloc_lock>:
 80065a4:	4801      	ldr	r0, [pc, #4]	; (80065ac <__malloc_lock+0x8>)
 80065a6:	f000 bc15 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 80065aa:	bf00      	nop
 80065ac:	20000384 	.word	0x20000384

080065b0 <__malloc_unlock>:
 80065b0:	4801      	ldr	r0, [pc, #4]	; (80065b8 <__malloc_unlock+0x8>)
 80065b2:	f000 bc10 	b.w	8006dd6 <__retarget_lock_release_recursive>
 80065b6:	bf00      	nop
 80065b8:	20000384 	.word	0x20000384

080065bc <_realloc_r>:
 80065bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80065be:	4607      	mov	r7, r0
 80065c0:	4614      	mov	r4, r2
 80065c2:	460e      	mov	r6, r1
 80065c4:	b921      	cbnz	r1, 80065d0 <_realloc_r+0x14>
 80065c6:	4611      	mov	r1, r2
 80065c8:	e8bd 40f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, lr}
 80065cc:	f7ff bdc8 	b.w	8006160 <_malloc_r>
 80065d0:	b922      	cbnz	r2, 80065dc <_realloc_r+0x20>
 80065d2:	f7ff fd79 	bl	80060c8 <_free_r>
 80065d6:	4625      	mov	r5, r4
 80065d8:	4628      	mov	r0, r5
 80065da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80065dc:	f000 fc60 	bl	8006ea0 <_malloc_usable_size_r>
 80065e0:	42a0      	cmp	r0, r4
 80065e2:	d20f      	bcs.n	8006604 <_realloc_r+0x48>
 80065e4:	4621      	mov	r1, r4
 80065e6:	4638      	mov	r0, r7
 80065e8:	f7ff fdba 	bl	8006160 <_malloc_r>
 80065ec:	4605      	mov	r5, r0
 80065ee:	2800      	cmp	r0, #0
 80065f0:	d0f2      	beq.n	80065d8 <_realloc_r+0x1c>
 80065f2:	4631      	mov	r1, r6
 80065f4:	4622      	mov	r2, r4
 80065f6:	f7fd fe71 	bl	80042dc <memcpy>
 80065fa:	4631      	mov	r1, r6
 80065fc:	4638      	mov	r0, r7
 80065fe:	f7ff fd63 	bl	80060c8 <_free_r>
 8006602:	e7e9      	b.n	80065d8 <_realloc_r+0x1c>
 8006604:	4635      	mov	r5, r6
 8006606:	e7e7      	b.n	80065d8 <_realloc_r+0x1c>

08006608 <__sfputc_r>:
 8006608:	6893      	ldr	r3, [r2, #8]
 800660a:	b410      	push	{r4}
 800660c:	3b01      	subs	r3, #1
 800660e:	2b00      	cmp	r3, #0
 8006610:	6093      	str	r3, [r2, #8]
 8006612:	da07      	bge.n	8006624 <__sfputc_r+0x1c>
 8006614:	6994      	ldr	r4, [r2, #24]
 8006616:	42a3      	cmp	r3, r4
 8006618:	db01      	blt.n	800661e <__sfputc_r+0x16>
 800661a:	290a      	cmp	r1, #10
 800661c:	d102      	bne.n	8006624 <__sfputc_r+0x1c>
 800661e:	bc10      	pop	{r4}
 8006620:	f000 b94a 	b.w	80068b8 <__swbuf_r>
 8006624:	6813      	ldr	r3, [r2, #0]
 8006626:	1c58      	adds	r0, r3, #1
 8006628:	6010      	str	r0, [r2, #0]
 800662a:	7019      	strb	r1, [r3, #0]
 800662c:	4608      	mov	r0, r1
 800662e:	bc10      	pop	{r4}
 8006630:	4770      	bx	lr

08006632 <__sfputs_r>:
 8006632:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006634:	4606      	mov	r6, r0
 8006636:	460f      	mov	r7, r1
 8006638:	4614      	mov	r4, r2
 800663a:	18d5      	adds	r5, r2, r3
 800663c:	42ac      	cmp	r4, r5
 800663e:	d101      	bne.n	8006644 <__sfputs_r+0x12>
 8006640:	2000      	movs	r0, #0
 8006642:	e007      	b.n	8006654 <__sfputs_r+0x22>
 8006644:	463a      	mov	r2, r7
 8006646:	4630      	mov	r0, r6
 8006648:	f814 1b01 	ldrb.w	r1, [r4], #1
 800664c:	f7ff ffdc 	bl	8006608 <__sfputc_r>
 8006650:	1c43      	adds	r3, r0, #1
 8006652:	d1f3      	bne.n	800663c <__sfputs_r+0xa>
 8006654:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08006658 <_vfiprintf_r>:
 8006658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800665c:	460d      	mov	r5, r1
 800665e:	4614      	mov	r4, r2
 8006660:	4698      	mov	r8, r3
 8006662:	4606      	mov	r6, r0
 8006664:	b09d      	sub	sp, #116	; 0x74
 8006666:	b118      	cbz	r0, 8006670 <_vfiprintf_r+0x18>
 8006668:	6983      	ldr	r3, [r0, #24]
 800666a:	b90b      	cbnz	r3, 8006670 <_vfiprintf_r+0x18>
 800666c:	f000 fb14 	bl	8006c98 <__sinit>
 8006670:	4b89      	ldr	r3, [pc, #548]	; (8006898 <_vfiprintf_r+0x240>)
 8006672:	429d      	cmp	r5, r3
 8006674:	d11b      	bne.n	80066ae <_vfiprintf_r+0x56>
 8006676:	6875      	ldr	r5, [r6, #4]
 8006678:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800667a:	07d9      	lsls	r1, r3, #31
 800667c:	d405      	bmi.n	800668a <_vfiprintf_r+0x32>
 800667e:	89ab      	ldrh	r3, [r5, #12]
 8006680:	059a      	lsls	r2, r3, #22
 8006682:	d402      	bmi.n	800668a <_vfiprintf_r+0x32>
 8006684:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006686:	f000 fba5 	bl	8006dd4 <__retarget_lock_acquire_recursive>
 800668a:	89ab      	ldrh	r3, [r5, #12]
 800668c:	071b      	lsls	r3, r3, #28
 800668e:	d501      	bpl.n	8006694 <_vfiprintf_r+0x3c>
 8006690:	692b      	ldr	r3, [r5, #16]
 8006692:	b9eb      	cbnz	r3, 80066d0 <_vfiprintf_r+0x78>
 8006694:	4629      	mov	r1, r5
 8006696:	4630      	mov	r0, r6
 8006698:	f000 f96e 	bl	8006978 <__swsetup_r>
 800669c:	b1c0      	cbz	r0, 80066d0 <_vfiprintf_r+0x78>
 800669e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 80066a0:	07dc      	lsls	r4, r3, #31
 80066a2:	d50e      	bpl.n	80066c2 <_vfiprintf_r+0x6a>
 80066a4:	f04f 30ff 	mov.w	r0, #4294967295
 80066a8:	b01d      	add	sp, #116	; 0x74
 80066aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80066ae:	4b7b      	ldr	r3, [pc, #492]	; (800689c <_vfiprintf_r+0x244>)
 80066b0:	429d      	cmp	r5, r3
 80066b2:	d101      	bne.n	80066b8 <_vfiprintf_r+0x60>
 80066b4:	68b5      	ldr	r5, [r6, #8]
 80066b6:	e7df      	b.n	8006678 <_vfiprintf_r+0x20>
 80066b8:	4b79      	ldr	r3, [pc, #484]	; (80068a0 <_vfiprintf_r+0x248>)
 80066ba:	429d      	cmp	r5, r3
 80066bc:	bf08      	it	eq
 80066be:	68f5      	ldreq	r5, [r6, #12]
 80066c0:	e7da      	b.n	8006678 <_vfiprintf_r+0x20>
 80066c2:	89ab      	ldrh	r3, [r5, #12]
 80066c4:	0598      	lsls	r0, r3, #22
 80066c6:	d4ed      	bmi.n	80066a4 <_vfiprintf_r+0x4c>
 80066c8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 80066ca:	f000 fb84 	bl	8006dd6 <__retarget_lock_release_recursive>
 80066ce:	e7e9      	b.n	80066a4 <_vfiprintf_r+0x4c>
 80066d0:	2300      	movs	r3, #0
 80066d2:	9309      	str	r3, [sp, #36]	; 0x24
 80066d4:	2320      	movs	r3, #32
 80066d6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80066da:	2330      	movs	r3, #48	; 0x30
 80066dc:	f04f 0901 	mov.w	r9, #1
 80066e0:	f8cd 800c 	str.w	r8, [sp, #12]
 80066e4:	f8df 81bc 	ldr.w	r8, [pc, #444]	; 80068a4 <_vfiprintf_r+0x24c>
 80066e8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80066ec:	4623      	mov	r3, r4
 80066ee:	469a      	mov	sl, r3
 80066f0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80066f4:	b10a      	cbz	r2, 80066fa <_vfiprintf_r+0xa2>
 80066f6:	2a25      	cmp	r2, #37	; 0x25
 80066f8:	d1f9      	bne.n	80066ee <_vfiprintf_r+0x96>
 80066fa:	ebba 0b04 	subs.w	fp, sl, r4
 80066fe:	d00b      	beq.n	8006718 <_vfiprintf_r+0xc0>
 8006700:	465b      	mov	r3, fp
 8006702:	4622      	mov	r2, r4
 8006704:	4629      	mov	r1, r5
 8006706:	4630      	mov	r0, r6
 8006708:	f7ff ff93 	bl	8006632 <__sfputs_r>
 800670c:	3001      	adds	r0, #1
 800670e:	f000 80aa 	beq.w	8006866 <_vfiprintf_r+0x20e>
 8006712:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006714:	445a      	add	r2, fp
 8006716:	9209      	str	r2, [sp, #36]	; 0x24
 8006718:	f89a 3000 	ldrb.w	r3, [sl]
 800671c:	2b00      	cmp	r3, #0
 800671e:	f000 80a2 	beq.w	8006866 <_vfiprintf_r+0x20e>
 8006722:	2300      	movs	r3, #0
 8006724:	f04f 32ff 	mov.w	r2, #4294967295
 8006728:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800672c:	f10a 0a01 	add.w	sl, sl, #1
 8006730:	9304      	str	r3, [sp, #16]
 8006732:	9307      	str	r3, [sp, #28]
 8006734:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006738:	931a      	str	r3, [sp, #104]	; 0x68
 800673a:	4654      	mov	r4, sl
 800673c:	2205      	movs	r2, #5
 800673e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006742:	4858      	ldr	r0, [pc, #352]	; (80068a4 <_vfiprintf_r+0x24c>)
 8006744:	f7ff f922 	bl	800598c <memchr>
 8006748:	9a04      	ldr	r2, [sp, #16]
 800674a:	b9d8      	cbnz	r0, 8006784 <_vfiprintf_r+0x12c>
 800674c:	06d1      	lsls	r1, r2, #27
 800674e:	bf44      	itt	mi
 8006750:	2320      	movmi	r3, #32
 8006752:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006756:	0713      	lsls	r3, r2, #28
 8006758:	bf44      	itt	mi
 800675a:	232b      	movmi	r3, #43	; 0x2b
 800675c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006760:	f89a 3000 	ldrb.w	r3, [sl]
 8006764:	2b2a      	cmp	r3, #42	; 0x2a
 8006766:	d015      	beq.n	8006794 <_vfiprintf_r+0x13c>
 8006768:	4654      	mov	r4, sl
 800676a:	2000      	movs	r0, #0
 800676c:	f04f 0c0a 	mov.w	ip, #10
 8006770:	9a07      	ldr	r2, [sp, #28]
 8006772:	4621      	mov	r1, r4
 8006774:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006778:	3b30      	subs	r3, #48	; 0x30
 800677a:	2b09      	cmp	r3, #9
 800677c:	d94e      	bls.n	800681c <_vfiprintf_r+0x1c4>
 800677e:	b1b0      	cbz	r0, 80067ae <_vfiprintf_r+0x156>
 8006780:	9207      	str	r2, [sp, #28]
 8006782:	e014      	b.n	80067ae <_vfiprintf_r+0x156>
 8006784:	eba0 0308 	sub.w	r3, r0, r8
 8006788:	fa09 f303 	lsl.w	r3, r9, r3
 800678c:	4313      	orrs	r3, r2
 800678e:	46a2      	mov	sl, r4
 8006790:	9304      	str	r3, [sp, #16]
 8006792:	e7d2      	b.n	800673a <_vfiprintf_r+0xe2>
 8006794:	9b03      	ldr	r3, [sp, #12]
 8006796:	1d19      	adds	r1, r3, #4
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	9103      	str	r1, [sp, #12]
 800679c:	2b00      	cmp	r3, #0
 800679e:	bfbb      	ittet	lt
 80067a0:	425b      	neglt	r3, r3
 80067a2:	f042 0202 	orrlt.w	r2, r2, #2
 80067a6:	9307      	strge	r3, [sp, #28]
 80067a8:	9307      	strlt	r3, [sp, #28]
 80067aa:	bfb8      	it	lt
 80067ac:	9204      	strlt	r2, [sp, #16]
 80067ae:	7823      	ldrb	r3, [r4, #0]
 80067b0:	2b2e      	cmp	r3, #46	; 0x2e
 80067b2:	d10c      	bne.n	80067ce <_vfiprintf_r+0x176>
 80067b4:	7863      	ldrb	r3, [r4, #1]
 80067b6:	2b2a      	cmp	r3, #42	; 0x2a
 80067b8:	d135      	bne.n	8006826 <_vfiprintf_r+0x1ce>
 80067ba:	9b03      	ldr	r3, [sp, #12]
 80067bc:	3402      	adds	r4, #2
 80067be:	1d1a      	adds	r2, r3, #4
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	9203      	str	r2, [sp, #12]
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	bfb8      	it	lt
 80067c8:	f04f 33ff 	movlt.w	r3, #4294967295
 80067cc:	9305      	str	r3, [sp, #20]
 80067ce:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 80068b4 <_vfiprintf_r+0x25c>
 80067d2:	2203      	movs	r2, #3
 80067d4:	4650      	mov	r0, sl
 80067d6:	7821      	ldrb	r1, [r4, #0]
 80067d8:	f7ff f8d8 	bl	800598c <memchr>
 80067dc:	b140      	cbz	r0, 80067f0 <_vfiprintf_r+0x198>
 80067de:	2340      	movs	r3, #64	; 0x40
 80067e0:	eba0 000a 	sub.w	r0, r0, sl
 80067e4:	fa03 f000 	lsl.w	r0, r3, r0
 80067e8:	9b04      	ldr	r3, [sp, #16]
 80067ea:	3401      	adds	r4, #1
 80067ec:	4303      	orrs	r3, r0
 80067ee:	9304      	str	r3, [sp, #16]
 80067f0:	f814 1b01 	ldrb.w	r1, [r4], #1
 80067f4:	2206      	movs	r2, #6
 80067f6:	482c      	ldr	r0, [pc, #176]	; (80068a8 <_vfiprintf_r+0x250>)
 80067f8:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80067fc:	f7ff f8c6 	bl	800598c <memchr>
 8006800:	2800      	cmp	r0, #0
 8006802:	d03f      	beq.n	8006884 <_vfiprintf_r+0x22c>
 8006804:	4b29      	ldr	r3, [pc, #164]	; (80068ac <_vfiprintf_r+0x254>)
 8006806:	bb1b      	cbnz	r3, 8006850 <_vfiprintf_r+0x1f8>
 8006808:	9b03      	ldr	r3, [sp, #12]
 800680a:	3307      	adds	r3, #7
 800680c:	f023 0307 	bic.w	r3, r3, #7
 8006810:	3308      	adds	r3, #8
 8006812:	9303      	str	r3, [sp, #12]
 8006814:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006816:	443b      	add	r3, r7
 8006818:	9309      	str	r3, [sp, #36]	; 0x24
 800681a:	e767      	b.n	80066ec <_vfiprintf_r+0x94>
 800681c:	460c      	mov	r4, r1
 800681e:	2001      	movs	r0, #1
 8006820:	fb0c 3202 	mla	r2, ip, r2, r3
 8006824:	e7a5      	b.n	8006772 <_vfiprintf_r+0x11a>
 8006826:	2300      	movs	r3, #0
 8006828:	f04f 0c0a 	mov.w	ip, #10
 800682c:	4619      	mov	r1, r3
 800682e:	3401      	adds	r4, #1
 8006830:	9305      	str	r3, [sp, #20]
 8006832:	4620      	mov	r0, r4
 8006834:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006838:	3a30      	subs	r2, #48	; 0x30
 800683a:	2a09      	cmp	r2, #9
 800683c:	d903      	bls.n	8006846 <_vfiprintf_r+0x1ee>
 800683e:	2b00      	cmp	r3, #0
 8006840:	d0c5      	beq.n	80067ce <_vfiprintf_r+0x176>
 8006842:	9105      	str	r1, [sp, #20]
 8006844:	e7c3      	b.n	80067ce <_vfiprintf_r+0x176>
 8006846:	4604      	mov	r4, r0
 8006848:	2301      	movs	r3, #1
 800684a:	fb0c 2101 	mla	r1, ip, r1, r2
 800684e:	e7f0      	b.n	8006832 <_vfiprintf_r+0x1da>
 8006850:	ab03      	add	r3, sp, #12
 8006852:	9300      	str	r3, [sp, #0]
 8006854:	462a      	mov	r2, r5
 8006856:	4630      	mov	r0, r6
 8006858:	4b15      	ldr	r3, [pc, #84]	; (80068b0 <_vfiprintf_r+0x258>)
 800685a:	a904      	add	r1, sp, #16
 800685c:	f7fd fdf2 	bl	8004444 <_printf_float>
 8006860:	4607      	mov	r7, r0
 8006862:	1c78      	adds	r0, r7, #1
 8006864:	d1d6      	bne.n	8006814 <_vfiprintf_r+0x1bc>
 8006866:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006868:	07d9      	lsls	r1, r3, #31
 800686a:	d405      	bmi.n	8006878 <_vfiprintf_r+0x220>
 800686c:	89ab      	ldrh	r3, [r5, #12]
 800686e:	059a      	lsls	r2, r3, #22
 8006870:	d402      	bmi.n	8006878 <_vfiprintf_r+0x220>
 8006872:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006874:	f000 faaf 	bl	8006dd6 <__retarget_lock_release_recursive>
 8006878:	89ab      	ldrh	r3, [r5, #12]
 800687a:	065b      	lsls	r3, r3, #25
 800687c:	f53f af12 	bmi.w	80066a4 <_vfiprintf_r+0x4c>
 8006880:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006882:	e711      	b.n	80066a8 <_vfiprintf_r+0x50>
 8006884:	ab03      	add	r3, sp, #12
 8006886:	9300      	str	r3, [sp, #0]
 8006888:	462a      	mov	r2, r5
 800688a:	4630      	mov	r0, r6
 800688c:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <_vfiprintf_r+0x258>)
 800688e:	a904      	add	r1, sp, #16
 8006890:	f7fe f874 	bl	800497c <_printf_i>
 8006894:	e7e4      	b.n	8006860 <_vfiprintf_r+0x208>
 8006896:	bf00      	nop
 8006898:	080075fc 	.word	0x080075fc
 800689c:	0800761c 	.word	0x0800761c
 80068a0:	080075dc 	.word	0x080075dc
 80068a4:	08007484 	.word	0x08007484
 80068a8:	0800748e 	.word	0x0800748e
 80068ac:	08004445 	.word	0x08004445
 80068b0:	08006633 	.word	0x08006633
 80068b4:	0800748a 	.word	0x0800748a

080068b8 <__swbuf_r>:
 80068b8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80068ba:	460e      	mov	r6, r1
 80068bc:	4614      	mov	r4, r2
 80068be:	4605      	mov	r5, r0
 80068c0:	b118      	cbz	r0, 80068ca <__swbuf_r+0x12>
 80068c2:	6983      	ldr	r3, [r0, #24]
 80068c4:	b90b      	cbnz	r3, 80068ca <__swbuf_r+0x12>
 80068c6:	f000 f9e7 	bl	8006c98 <__sinit>
 80068ca:	4b21      	ldr	r3, [pc, #132]	; (8006950 <__swbuf_r+0x98>)
 80068cc:	429c      	cmp	r4, r3
 80068ce:	d12b      	bne.n	8006928 <__swbuf_r+0x70>
 80068d0:	686c      	ldr	r4, [r5, #4]
 80068d2:	69a3      	ldr	r3, [r4, #24]
 80068d4:	60a3      	str	r3, [r4, #8]
 80068d6:	89a3      	ldrh	r3, [r4, #12]
 80068d8:	071a      	lsls	r2, r3, #28
 80068da:	d52f      	bpl.n	800693c <__swbuf_r+0x84>
 80068dc:	6923      	ldr	r3, [r4, #16]
 80068de:	b36b      	cbz	r3, 800693c <__swbuf_r+0x84>
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	6820      	ldr	r0, [r4, #0]
 80068e4:	b2f6      	uxtb	r6, r6
 80068e6:	1ac0      	subs	r0, r0, r3
 80068e8:	6963      	ldr	r3, [r4, #20]
 80068ea:	4637      	mov	r7, r6
 80068ec:	4283      	cmp	r3, r0
 80068ee:	dc04      	bgt.n	80068fa <__swbuf_r+0x42>
 80068f0:	4621      	mov	r1, r4
 80068f2:	4628      	mov	r0, r5
 80068f4:	f000 f93c 	bl	8006b70 <_fflush_r>
 80068f8:	bb30      	cbnz	r0, 8006948 <__swbuf_r+0x90>
 80068fa:	68a3      	ldr	r3, [r4, #8]
 80068fc:	3001      	adds	r0, #1
 80068fe:	3b01      	subs	r3, #1
 8006900:	60a3      	str	r3, [r4, #8]
 8006902:	6823      	ldr	r3, [r4, #0]
 8006904:	1c5a      	adds	r2, r3, #1
 8006906:	6022      	str	r2, [r4, #0]
 8006908:	701e      	strb	r6, [r3, #0]
 800690a:	6963      	ldr	r3, [r4, #20]
 800690c:	4283      	cmp	r3, r0
 800690e:	d004      	beq.n	800691a <__swbuf_r+0x62>
 8006910:	89a3      	ldrh	r3, [r4, #12]
 8006912:	07db      	lsls	r3, r3, #31
 8006914:	d506      	bpl.n	8006924 <__swbuf_r+0x6c>
 8006916:	2e0a      	cmp	r6, #10
 8006918:	d104      	bne.n	8006924 <__swbuf_r+0x6c>
 800691a:	4621      	mov	r1, r4
 800691c:	4628      	mov	r0, r5
 800691e:	f000 f927 	bl	8006b70 <_fflush_r>
 8006922:	b988      	cbnz	r0, 8006948 <__swbuf_r+0x90>
 8006924:	4638      	mov	r0, r7
 8006926:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006928:	4b0a      	ldr	r3, [pc, #40]	; (8006954 <__swbuf_r+0x9c>)
 800692a:	429c      	cmp	r4, r3
 800692c:	d101      	bne.n	8006932 <__swbuf_r+0x7a>
 800692e:	68ac      	ldr	r4, [r5, #8]
 8006930:	e7cf      	b.n	80068d2 <__swbuf_r+0x1a>
 8006932:	4b09      	ldr	r3, [pc, #36]	; (8006958 <__swbuf_r+0xa0>)
 8006934:	429c      	cmp	r4, r3
 8006936:	bf08      	it	eq
 8006938:	68ec      	ldreq	r4, [r5, #12]
 800693a:	e7ca      	b.n	80068d2 <__swbuf_r+0x1a>
 800693c:	4621      	mov	r1, r4
 800693e:	4628      	mov	r0, r5
 8006940:	f000 f81a 	bl	8006978 <__swsetup_r>
 8006944:	2800      	cmp	r0, #0
 8006946:	d0cb      	beq.n	80068e0 <__swbuf_r+0x28>
 8006948:	f04f 37ff 	mov.w	r7, #4294967295
 800694c:	e7ea      	b.n	8006924 <__swbuf_r+0x6c>
 800694e:	bf00      	nop
 8006950:	080075fc 	.word	0x080075fc
 8006954:	0800761c 	.word	0x0800761c
 8006958:	080075dc 	.word	0x080075dc

0800695c <__ascii_wctomb>:
 800695c:	4603      	mov	r3, r0
 800695e:	4608      	mov	r0, r1
 8006960:	b141      	cbz	r1, 8006974 <__ascii_wctomb+0x18>
 8006962:	2aff      	cmp	r2, #255	; 0xff
 8006964:	d904      	bls.n	8006970 <__ascii_wctomb+0x14>
 8006966:	228a      	movs	r2, #138	; 0x8a
 8006968:	f04f 30ff 	mov.w	r0, #4294967295
 800696c:	601a      	str	r2, [r3, #0]
 800696e:	4770      	bx	lr
 8006970:	2001      	movs	r0, #1
 8006972:	700a      	strb	r2, [r1, #0]
 8006974:	4770      	bx	lr
	...

08006978 <__swsetup_r>:
 8006978:	4b32      	ldr	r3, [pc, #200]	; (8006a44 <__swsetup_r+0xcc>)
 800697a:	b570      	push	{r4, r5, r6, lr}
 800697c:	681d      	ldr	r5, [r3, #0]
 800697e:	4606      	mov	r6, r0
 8006980:	460c      	mov	r4, r1
 8006982:	b125      	cbz	r5, 800698e <__swsetup_r+0x16>
 8006984:	69ab      	ldr	r3, [r5, #24]
 8006986:	b913      	cbnz	r3, 800698e <__swsetup_r+0x16>
 8006988:	4628      	mov	r0, r5
 800698a:	f000 f985 	bl	8006c98 <__sinit>
 800698e:	4b2e      	ldr	r3, [pc, #184]	; (8006a48 <__swsetup_r+0xd0>)
 8006990:	429c      	cmp	r4, r3
 8006992:	d10f      	bne.n	80069b4 <__swsetup_r+0x3c>
 8006994:	686c      	ldr	r4, [r5, #4]
 8006996:	89a3      	ldrh	r3, [r4, #12]
 8006998:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800699c:	0719      	lsls	r1, r3, #28
 800699e:	d42c      	bmi.n	80069fa <__swsetup_r+0x82>
 80069a0:	06dd      	lsls	r5, r3, #27
 80069a2:	d411      	bmi.n	80069c8 <__swsetup_r+0x50>
 80069a4:	2309      	movs	r3, #9
 80069a6:	6033      	str	r3, [r6, #0]
 80069a8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 80069ac:	f04f 30ff 	mov.w	r0, #4294967295
 80069b0:	81a3      	strh	r3, [r4, #12]
 80069b2:	e03e      	b.n	8006a32 <__swsetup_r+0xba>
 80069b4:	4b25      	ldr	r3, [pc, #148]	; (8006a4c <__swsetup_r+0xd4>)
 80069b6:	429c      	cmp	r4, r3
 80069b8:	d101      	bne.n	80069be <__swsetup_r+0x46>
 80069ba:	68ac      	ldr	r4, [r5, #8]
 80069bc:	e7eb      	b.n	8006996 <__swsetup_r+0x1e>
 80069be:	4b24      	ldr	r3, [pc, #144]	; (8006a50 <__swsetup_r+0xd8>)
 80069c0:	429c      	cmp	r4, r3
 80069c2:	bf08      	it	eq
 80069c4:	68ec      	ldreq	r4, [r5, #12]
 80069c6:	e7e6      	b.n	8006996 <__swsetup_r+0x1e>
 80069c8:	0758      	lsls	r0, r3, #29
 80069ca:	d512      	bpl.n	80069f2 <__swsetup_r+0x7a>
 80069cc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 80069ce:	b141      	cbz	r1, 80069e2 <__swsetup_r+0x6a>
 80069d0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80069d4:	4299      	cmp	r1, r3
 80069d6:	d002      	beq.n	80069de <__swsetup_r+0x66>
 80069d8:	4630      	mov	r0, r6
 80069da:	f7ff fb75 	bl	80060c8 <_free_r>
 80069de:	2300      	movs	r3, #0
 80069e0:	6363      	str	r3, [r4, #52]	; 0x34
 80069e2:	89a3      	ldrh	r3, [r4, #12]
 80069e4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80069e8:	81a3      	strh	r3, [r4, #12]
 80069ea:	2300      	movs	r3, #0
 80069ec:	6063      	str	r3, [r4, #4]
 80069ee:	6923      	ldr	r3, [r4, #16]
 80069f0:	6023      	str	r3, [r4, #0]
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	f043 0308 	orr.w	r3, r3, #8
 80069f8:	81a3      	strh	r3, [r4, #12]
 80069fa:	6923      	ldr	r3, [r4, #16]
 80069fc:	b94b      	cbnz	r3, 8006a12 <__swsetup_r+0x9a>
 80069fe:	89a3      	ldrh	r3, [r4, #12]
 8006a00:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8006a04:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006a08:	d003      	beq.n	8006a12 <__swsetup_r+0x9a>
 8006a0a:	4621      	mov	r1, r4
 8006a0c:	4630      	mov	r0, r6
 8006a0e:	f000 fa07 	bl	8006e20 <__smakebuf_r>
 8006a12:	89a0      	ldrh	r0, [r4, #12]
 8006a14:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006a18:	f010 0301 	ands.w	r3, r0, #1
 8006a1c:	d00a      	beq.n	8006a34 <__swsetup_r+0xbc>
 8006a1e:	2300      	movs	r3, #0
 8006a20:	60a3      	str	r3, [r4, #8]
 8006a22:	6963      	ldr	r3, [r4, #20]
 8006a24:	425b      	negs	r3, r3
 8006a26:	61a3      	str	r3, [r4, #24]
 8006a28:	6923      	ldr	r3, [r4, #16]
 8006a2a:	b943      	cbnz	r3, 8006a3e <__swsetup_r+0xc6>
 8006a2c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8006a30:	d1ba      	bne.n	80069a8 <__swsetup_r+0x30>
 8006a32:	bd70      	pop	{r4, r5, r6, pc}
 8006a34:	0781      	lsls	r1, r0, #30
 8006a36:	bf58      	it	pl
 8006a38:	6963      	ldrpl	r3, [r4, #20]
 8006a3a:	60a3      	str	r3, [r4, #8]
 8006a3c:	e7f4      	b.n	8006a28 <__swsetup_r+0xb0>
 8006a3e:	2000      	movs	r0, #0
 8006a40:	e7f7      	b.n	8006a32 <__swsetup_r+0xba>
 8006a42:	bf00      	nop
 8006a44:	20000014 	.word	0x20000014
 8006a48:	080075fc 	.word	0x080075fc
 8006a4c:	0800761c 	.word	0x0800761c
 8006a50:	080075dc 	.word	0x080075dc

08006a54 <abort>:
 8006a54:	2006      	movs	r0, #6
 8006a56:	b508      	push	{r3, lr}
 8006a58:	f000 fa52 	bl	8006f00 <raise>
 8006a5c:	2001      	movs	r0, #1
 8006a5e:	f7fb fa27 	bl	8001eb0 <_exit>
	...

08006a64 <__sflush_r>:
 8006a64:	898a      	ldrh	r2, [r1, #12]
 8006a66:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006a6a:	4605      	mov	r5, r0
 8006a6c:	0710      	lsls	r0, r2, #28
 8006a6e:	460c      	mov	r4, r1
 8006a70:	d458      	bmi.n	8006b24 <__sflush_r+0xc0>
 8006a72:	684b      	ldr	r3, [r1, #4]
 8006a74:	2b00      	cmp	r3, #0
 8006a76:	dc05      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a78:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	dc02      	bgt.n	8006a84 <__sflush_r+0x20>
 8006a7e:	2000      	movs	r0, #0
 8006a80:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006a84:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006a86:	2e00      	cmp	r6, #0
 8006a88:	d0f9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006a8a:	2300      	movs	r3, #0
 8006a8c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8006a90:	682f      	ldr	r7, [r5, #0]
 8006a92:	602b      	str	r3, [r5, #0]
 8006a94:	d032      	beq.n	8006afc <__sflush_r+0x98>
 8006a96:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8006a98:	89a3      	ldrh	r3, [r4, #12]
 8006a9a:	075a      	lsls	r2, r3, #29
 8006a9c:	d505      	bpl.n	8006aaa <__sflush_r+0x46>
 8006a9e:	6863      	ldr	r3, [r4, #4]
 8006aa0:	1ac0      	subs	r0, r0, r3
 8006aa2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8006aa4:	b10b      	cbz	r3, 8006aaa <__sflush_r+0x46>
 8006aa6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8006aa8:	1ac0      	subs	r0, r0, r3
 8006aaa:	2300      	movs	r3, #0
 8006aac:	4602      	mov	r2, r0
 8006aae:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	6a21      	ldr	r1, [r4, #32]
 8006ab4:	47b0      	blx	r6
 8006ab6:	1c43      	adds	r3, r0, #1
 8006ab8:	89a3      	ldrh	r3, [r4, #12]
 8006aba:	d106      	bne.n	8006aca <__sflush_r+0x66>
 8006abc:	6829      	ldr	r1, [r5, #0]
 8006abe:	291d      	cmp	r1, #29
 8006ac0:	d82c      	bhi.n	8006b1c <__sflush_r+0xb8>
 8006ac2:	4a2a      	ldr	r2, [pc, #168]	; (8006b6c <__sflush_r+0x108>)
 8006ac4:	40ca      	lsrs	r2, r1
 8006ac6:	07d6      	lsls	r6, r2, #31
 8006ac8:	d528      	bpl.n	8006b1c <__sflush_r+0xb8>
 8006aca:	2200      	movs	r2, #0
 8006acc:	6062      	str	r2, [r4, #4]
 8006ace:	6922      	ldr	r2, [r4, #16]
 8006ad0:	04d9      	lsls	r1, r3, #19
 8006ad2:	6022      	str	r2, [r4, #0]
 8006ad4:	d504      	bpl.n	8006ae0 <__sflush_r+0x7c>
 8006ad6:	1c42      	adds	r2, r0, #1
 8006ad8:	d101      	bne.n	8006ade <__sflush_r+0x7a>
 8006ada:	682b      	ldr	r3, [r5, #0]
 8006adc:	b903      	cbnz	r3, 8006ae0 <__sflush_r+0x7c>
 8006ade:	6560      	str	r0, [r4, #84]	; 0x54
 8006ae0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006ae2:	602f      	str	r7, [r5, #0]
 8006ae4:	2900      	cmp	r1, #0
 8006ae6:	d0ca      	beq.n	8006a7e <__sflush_r+0x1a>
 8006ae8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006aec:	4299      	cmp	r1, r3
 8006aee:	d002      	beq.n	8006af6 <__sflush_r+0x92>
 8006af0:	4628      	mov	r0, r5
 8006af2:	f7ff fae9 	bl	80060c8 <_free_r>
 8006af6:	2000      	movs	r0, #0
 8006af8:	6360      	str	r0, [r4, #52]	; 0x34
 8006afa:	e7c1      	b.n	8006a80 <__sflush_r+0x1c>
 8006afc:	6a21      	ldr	r1, [r4, #32]
 8006afe:	2301      	movs	r3, #1
 8006b00:	4628      	mov	r0, r5
 8006b02:	47b0      	blx	r6
 8006b04:	1c41      	adds	r1, r0, #1
 8006b06:	d1c7      	bne.n	8006a98 <__sflush_r+0x34>
 8006b08:	682b      	ldr	r3, [r5, #0]
 8006b0a:	2b00      	cmp	r3, #0
 8006b0c:	d0c4      	beq.n	8006a98 <__sflush_r+0x34>
 8006b0e:	2b1d      	cmp	r3, #29
 8006b10:	d001      	beq.n	8006b16 <__sflush_r+0xb2>
 8006b12:	2b16      	cmp	r3, #22
 8006b14:	d101      	bne.n	8006b1a <__sflush_r+0xb6>
 8006b16:	602f      	str	r7, [r5, #0]
 8006b18:	e7b1      	b.n	8006a7e <__sflush_r+0x1a>
 8006b1a:	89a3      	ldrh	r3, [r4, #12]
 8006b1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b20:	81a3      	strh	r3, [r4, #12]
 8006b22:	e7ad      	b.n	8006a80 <__sflush_r+0x1c>
 8006b24:	690f      	ldr	r7, [r1, #16]
 8006b26:	2f00      	cmp	r7, #0
 8006b28:	d0a9      	beq.n	8006a7e <__sflush_r+0x1a>
 8006b2a:	0793      	lsls	r3, r2, #30
 8006b2c:	bf18      	it	ne
 8006b2e:	2300      	movne	r3, #0
 8006b30:	680e      	ldr	r6, [r1, #0]
 8006b32:	bf08      	it	eq
 8006b34:	694b      	ldreq	r3, [r1, #20]
 8006b36:	eba6 0807 	sub.w	r8, r6, r7
 8006b3a:	600f      	str	r7, [r1, #0]
 8006b3c:	608b      	str	r3, [r1, #8]
 8006b3e:	f1b8 0f00 	cmp.w	r8, #0
 8006b42:	dd9c      	ble.n	8006a7e <__sflush_r+0x1a>
 8006b44:	4643      	mov	r3, r8
 8006b46:	463a      	mov	r2, r7
 8006b48:	4628      	mov	r0, r5
 8006b4a:	6a21      	ldr	r1, [r4, #32]
 8006b4c:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8006b4e:	47b0      	blx	r6
 8006b50:	2800      	cmp	r0, #0
 8006b52:	dc06      	bgt.n	8006b62 <__sflush_r+0xfe>
 8006b54:	89a3      	ldrh	r3, [r4, #12]
 8006b56:	f04f 30ff 	mov.w	r0, #4294967295
 8006b5a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006b5e:	81a3      	strh	r3, [r4, #12]
 8006b60:	e78e      	b.n	8006a80 <__sflush_r+0x1c>
 8006b62:	4407      	add	r7, r0
 8006b64:	eba8 0800 	sub.w	r8, r8, r0
 8006b68:	e7e9      	b.n	8006b3e <__sflush_r+0xda>
 8006b6a:	bf00      	nop
 8006b6c:	20400001 	.word	0x20400001

08006b70 <_fflush_r>:
 8006b70:	b538      	push	{r3, r4, r5, lr}
 8006b72:	690b      	ldr	r3, [r1, #16]
 8006b74:	4605      	mov	r5, r0
 8006b76:	460c      	mov	r4, r1
 8006b78:	b913      	cbnz	r3, 8006b80 <_fflush_r+0x10>
 8006b7a:	2500      	movs	r5, #0
 8006b7c:	4628      	mov	r0, r5
 8006b7e:	bd38      	pop	{r3, r4, r5, pc}
 8006b80:	b118      	cbz	r0, 8006b8a <_fflush_r+0x1a>
 8006b82:	6983      	ldr	r3, [r0, #24]
 8006b84:	b90b      	cbnz	r3, 8006b8a <_fflush_r+0x1a>
 8006b86:	f000 f887 	bl	8006c98 <__sinit>
 8006b8a:	4b14      	ldr	r3, [pc, #80]	; (8006bdc <_fflush_r+0x6c>)
 8006b8c:	429c      	cmp	r4, r3
 8006b8e:	d11b      	bne.n	8006bc8 <_fflush_r+0x58>
 8006b90:	686c      	ldr	r4, [r5, #4]
 8006b92:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0ef      	beq.n	8006b7a <_fflush_r+0xa>
 8006b9a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006b9c:	07d0      	lsls	r0, r2, #31
 8006b9e:	d404      	bmi.n	8006baa <_fflush_r+0x3a>
 8006ba0:	0599      	lsls	r1, r3, #22
 8006ba2:	d402      	bmi.n	8006baa <_fflush_r+0x3a>
 8006ba4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ba6:	f000 f915 	bl	8006dd4 <__retarget_lock_acquire_recursive>
 8006baa:	4628      	mov	r0, r5
 8006bac:	4621      	mov	r1, r4
 8006bae:	f7ff ff59 	bl	8006a64 <__sflush_r>
 8006bb2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006bb4:	4605      	mov	r5, r0
 8006bb6:	07da      	lsls	r2, r3, #31
 8006bb8:	d4e0      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bba:	89a3      	ldrh	r3, [r4, #12]
 8006bbc:	059b      	lsls	r3, r3, #22
 8006bbe:	d4dd      	bmi.n	8006b7c <_fflush_r+0xc>
 8006bc0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006bc2:	f000 f908 	bl	8006dd6 <__retarget_lock_release_recursive>
 8006bc6:	e7d9      	b.n	8006b7c <_fflush_r+0xc>
 8006bc8:	4b05      	ldr	r3, [pc, #20]	; (8006be0 <_fflush_r+0x70>)
 8006bca:	429c      	cmp	r4, r3
 8006bcc:	d101      	bne.n	8006bd2 <_fflush_r+0x62>
 8006bce:	68ac      	ldr	r4, [r5, #8]
 8006bd0:	e7df      	b.n	8006b92 <_fflush_r+0x22>
 8006bd2:	4b04      	ldr	r3, [pc, #16]	; (8006be4 <_fflush_r+0x74>)
 8006bd4:	429c      	cmp	r4, r3
 8006bd6:	bf08      	it	eq
 8006bd8:	68ec      	ldreq	r4, [r5, #12]
 8006bda:	e7da      	b.n	8006b92 <_fflush_r+0x22>
 8006bdc:	080075fc 	.word	0x080075fc
 8006be0:	0800761c 	.word	0x0800761c
 8006be4:	080075dc 	.word	0x080075dc

08006be8 <std>:
 8006be8:	2300      	movs	r3, #0
 8006bea:	b510      	push	{r4, lr}
 8006bec:	4604      	mov	r4, r0
 8006bee:	e9c0 3300 	strd	r3, r3, [r0]
 8006bf2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8006bf6:	6083      	str	r3, [r0, #8]
 8006bf8:	8181      	strh	r1, [r0, #12]
 8006bfa:	6643      	str	r3, [r0, #100]	; 0x64
 8006bfc:	81c2      	strh	r2, [r0, #14]
 8006bfe:	6183      	str	r3, [r0, #24]
 8006c00:	4619      	mov	r1, r3
 8006c02:	2208      	movs	r2, #8
 8006c04:	305c      	adds	r0, #92	; 0x5c
 8006c06:	f7fd fb77 	bl	80042f8 <memset>
 8006c0a:	4b05      	ldr	r3, [pc, #20]	; (8006c20 <std+0x38>)
 8006c0c:	6224      	str	r4, [r4, #32]
 8006c0e:	6263      	str	r3, [r4, #36]	; 0x24
 8006c10:	4b04      	ldr	r3, [pc, #16]	; (8006c24 <std+0x3c>)
 8006c12:	62a3      	str	r3, [r4, #40]	; 0x28
 8006c14:	4b04      	ldr	r3, [pc, #16]	; (8006c28 <std+0x40>)
 8006c16:	62e3      	str	r3, [r4, #44]	; 0x2c
 8006c18:	4b04      	ldr	r3, [pc, #16]	; (8006c2c <std+0x44>)
 8006c1a:	6323      	str	r3, [r4, #48]	; 0x30
 8006c1c:	bd10      	pop	{r4, pc}
 8006c1e:	bf00      	nop
 8006c20:	08006f39 	.word	0x08006f39
 8006c24:	08006f5b 	.word	0x08006f5b
 8006c28:	08006f93 	.word	0x08006f93
 8006c2c:	08006fb7 	.word	0x08006fb7

08006c30 <_cleanup_r>:
 8006c30:	4901      	ldr	r1, [pc, #4]	; (8006c38 <_cleanup_r+0x8>)
 8006c32:	f000 b8af 	b.w	8006d94 <_fwalk_reent>
 8006c36:	bf00      	nop
 8006c38:	08006b71 	.word	0x08006b71

08006c3c <__sfmoreglue>:
 8006c3c:	b570      	push	{r4, r5, r6, lr}
 8006c3e:	2568      	movs	r5, #104	; 0x68
 8006c40:	1e4a      	subs	r2, r1, #1
 8006c42:	4355      	muls	r5, r2
 8006c44:	460e      	mov	r6, r1
 8006c46:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8006c4a:	f7ff fa89 	bl	8006160 <_malloc_r>
 8006c4e:	4604      	mov	r4, r0
 8006c50:	b140      	cbz	r0, 8006c64 <__sfmoreglue+0x28>
 8006c52:	2100      	movs	r1, #0
 8006c54:	e9c0 1600 	strd	r1, r6, [r0]
 8006c58:	300c      	adds	r0, #12
 8006c5a:	60a0      	str	r0, [r4, #8]
 8006c5c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8006c60:	f7fd fb4a 	bl	80042f8 <memset>
 8006c64:	4620      	mov	r0, r4
 8006c66:	bd70      	pop	{r4, r5, r6, pc}

08006c68 <__sfp_lock_acquire>:
 8006c68:	4801      	ldr	r0, [pc, #4]	; (8006c70 <__sfp_lock_acquire+0x8>)
 8006c6a:	f000 b8b3 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006c6e:	bf00      	nop
 8006c70:	20000388 	.word	0x20000388

08006c74 <__sfp_lock_release>:
 8006c74:	4801      	ldr	r0, [pc, #4]	; (8006c7c <__sfp_lock_release+0x8>)
 8006c76:	f000 b8ae 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006c7a:	bf00      	nop
 8006c7c:	20000388 	.word	0x20000388

08006c80 <__sinit_lock_acquire>:
 8006c80:	4801      	ldr	r0, [pc, #4]	; (8006c88 <__sinit_lock_acquire+0x8>)
 8006c82:	f000 b8a7 	b.w	8006dd4 <__retarget_lock_acquire_recursive>
 8006c86:	bf00      	nop
 8006c88:	20000383 	.word	0x20000383

08006c8c <__sinit_lock_release>:
 8006c8c:	4801      	ldr	r0, [pc, #4]	; (8006c94 <__sinit_lock_release+0x8>)
 8006c8e:	f000 b8a2 	b.w	8006dd6 <__retarget_lock_release_recursive>
 8006c92:	bf00      	nop
 8006c94:	20000383 	.word	0x20000383

08006c98 <__sinit>:
 8006c98:	b510      	push	{r4, lr}
 8006c9a:	4604      	mov	r4, r0
 8006c9c:	f7ff fff0 	bl	8006c80 <__sinit_lock_acquire>
 8006ca0:	69a3      	ldr	r3, [r4, #24]
 8006ca2:	b11b      	cbz	r3, 8006cac <__sinit+0x14>
 8006ca4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ca8:	f7ff bff0 	b.w	8006c8c <__sinit_lock_release>
 8006cac:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8006cb0:	6523      	str	r3, [r4, #80]	; 0x50
 8006cb2:	4b13      	ldr	r3, [pc, #76]	; (8006d00 <__sinit+0x68>)
 8006cb4:	4a13      	ldr	r2, [pc, #76]	; (8006d04 <__sinit+0x6c>)
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	62a2      	str	r2, [r4, #40]	; 0x28
 8006cba:	42a3      	cmp	r3, r4
 8006cbc:	bf08      	it	eq
 8006cbe:	2301      	moveq	r3, #1
 8006cc0:	4620      	mov	r0, r4
 8006cc2:	bf08      	it	eq
 8006cc4:	61a3      	streq	r3, [r4, #24]
 8006cc6:	f000 f81f 	bl	8006d08 <__sfp>
 8006cca:	6060      	str	r0, [r4, #4]
 8006ccc:	4620      	mov	r0, r4
 8006cce:	f000 f81b 	bl	8006d08 <__sfp>
 8006cd2:	60a0      	str	r0, [r4, #8]
 8006cd4:	4620      	mov	r0, r4
 8006cd6:	f000 f817 	bl	8006d08 <__sfp>
 8006cda:	2200      	movs	r2, #0
 8006cdc:	2104      	movs	r1, #4
 8006cde:	60e0      	str	r0, [r4, #12]
 8006ce0:	6860      	ldr	r0, [r4, #4]
 8006ce2:	f7ff ff81 	bl	8006be8 <std>
 8006ce6:	2201      	movs	r2, #1
 8006ce8:	2109      	movs	r1, #9
 8006cea:	68a0      	ldr	r0, [r4, #8]
 8006cec:	f7ff ff7c 	bl	8006be8 <std>
 8006cf0:	2202      	movs	r2, #2
 8006cf2:	2112      	movs	r1, #18
 8006cf4:	68e0      	ldr	r0, [r4, #12]
 8006cf6:	f7ff ff77 	bl	8006be8 <std>
 8006cfa:	2301      	movs	r3, #1
 8006cfc:	61a3      	str	r3, [r4, #24]
 8006cfe:	e7d1      	b.n	8006ca4 <__sinit+0xc>
 8006d00:	08007258 	.word	0x08007258
 8006d04:	08006c31 	.word	0x08006c31

08006d08 <__sfp>:
 8006d08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d0a:	4607      	mov	r7, r0
 8006d0c:	f7ff ffac 	bl	8006c68 <__sfp_lock_acquire>
 8006d10:	4b1e      	ldr	r3, [pc, #120]	; (8006d8c <__sfp+0x84>)
 8006d12:	681e      	ldr	r6, [r3, #0]
 8006d14:	69b3      	ldr	r3, [r6, #24]
 8006d16:	b913      	cbnz	r3, 8006d1e <__sfp+0x16>
 8006d18:	4630      	mov	r0, r6
 8006d1a:	f7ff ffbd 	bl	8006c98 <__sinit>
 8006d1e:	3648      	adds	r6, #72	; 0x48
 8006d20:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 8006d24:	3b01      	subs	r3, #1
 8006d26:	d503      	bpl.n	8006d30 <__sfp+0x28>
 8006d28:	6833      	ldr	r3, [r6, #0]
 8006d2a:	b30b      	cbz	r3, 8006d70 <__sfp+0x68>
 8006d2c:	6836      	ldr	r6, [r6, #0]
 8006d2e:	e7f7      	b.n	8006d20 <__sfp+0x18>
 8006d30:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 8006d34:	b9d5      	cbnz	r5, 8006d6c <__sfp+0x64>
 8006d36:	4b16      	ldr	r3, [pc, #88]	; (8006d90 <__sfp+0x88>)
 8006d38:	f104 0058 	add.w	r0, r4, #88	; 0x58
 8006d3c:	60e3      	str	r3, [r4, #12]
 8006d3e:	6665      	str	r5, [r4, #100]	; 0x64
 8006d40:	f000 f847 	bl	8006dd2 <__retarget_lock_init_recursive>
 8006d44:	f7ff ff96 	bl	8006c74 <__sfp_lock_release>
 8006d48:	2208      	movs	r2, #8
 8006d4a:	4629      	mov	r1, r5
 8006d4c:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8006d50:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8006d54:	6025      	str	r5, [r4, #0]
 8006d56:	61a5      	str	r5, [r4, #24]
 8006d58:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8006d5c:	f7fd facc 	bl	80042f8 <memset>
 8006d60:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 8006d64:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8006d68:	4620      	mov	r0, r4
 8006d6a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d6c:	3468      	adds	r4, #104	; 0x68
 8006d6e:	e7d9      	b.n	8006d24 <__sfp+0x1c>
 8006d70:	2104      	movs	r1, #4
 8006d72:	4638      	mov	r0, r7
 8006d74:	f7ff ff62 	bl	8006c3c <__sfmoreglue>
 8006d78:	4604      	mov	r4, r0
 8006d7a:	6030      	str	r0, [r6, #0]
 8006d7c:	2800      	cmp	r0, #0
 8006d7e:	d1d5      	bne.n	8006d2c <__sfp+0x24>
 8006d80:	f7ff ff78 	bl	8006c74 <__sfp_lock_release>
 8006d84:	230c      	movs	r3, #12
 8006d86:	603b      	str	r3, [r7, #0]
 8006d88:	e7ee      	b.n	8006d68 <__sfp+0x60>
 8006d8a:	bf00      	nop
 8006d8c:	08007258 	.word	0x08007258
 8006d90:	ffff0001 	.word	0xffff0001

08006d94 <_fwalk_reent>:
 8006d94:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006d98:	4606      	mov	r6, r0
 8006d9a:	4688      	mov	r8, r1
 8006d9c:	2700      	movs	r7, #0
 8006d9e:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8006da2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006da6:	f1b9 0901 	subs.w	r9, r9, #1
 8006daa:	d505      	bpl.n	8006db8 <_fwalk_reent+0x24>
 8006dac:	6824      	ldr	r4, [r4, #0]
 8006dae:	2c00      	cmp	r4, #0
 8006db0:	d1f7      	bne.n	8006da2 <_fwalk_reent+0xe>
 8006db2:	4638      	mov	r0, r7
 8006db4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006db8:	89ab      	ldrh	r3, [r5, #12]
 8006dba:	2b01      	cmp	r3, #1
 8006dbc:	d907      	bls.n	8006dce <_fwalk_reent+0x3a>
 8006dbe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006dc2:	3301      	adds	r3, #1
 8006dc4:	d003      	beq.n	8006dce <_fwalk_reent+0x3a>
 8006dc6:	4629      	mov	r1, r5
 8006dc8:	4630      	mov	r0, r6
 8006dca:	47c0      	blx	r8
 8006dcc:	4307      	orrs	r7, r0
 8006dce:	3568      	adds	r5, #104	; 0x68
 8006dd0:	e7e9      	b.n	8006da6 <_fwalk_reent+0x12>

08006dd2 <__retarget_lock_init_recursive>:
 8006dd2:	4770      	bx	lr

08006dd4 <__retarget_lock_acquire_recursive>:
 8006dd4:	4770      	bx	lr

08006dd6 <__retarget_lock_release_recursive>:
 8006dd6:	4770      	bx	lr

08006dd8 <__swhatbuf_r>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	460e      	mov	r6, r1
 8006ddc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006de0:	4614      	mov	r4, r2
 8006de2:	2900      	cmp	r1, #0
 8006de4:	461d      	mov	r5, r3
 8006de6:	b096      	sub	sp, #88	; 0x58
 8006de8:	da07      	bge.n	8006dfa <__swhatbuf_r+0x22>
 8006dea:	2300      	movs	r3, #0
 8006dec:	602b      	str	r3, [r5, #0]
 8006dee:	89b3      	ldrh	r3, [r6, #12]
 8006df0:	061a      	lsls	r2, r3, #24
 8006df2:	d410      	bmi.n	8006e16 <__swhatbuf_r+0x3e>
 8006df4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006df8:	e00e      	b.n	8006e18 <__swhatbuf_r+0x40>
 8006dfa:	466a      	mov	r2, sp
 8006dfc:	f000 f902 	bl	8007004 <_fstat_r>
 8006e00:	2800      	cmp	r0, #0
 8006e02:	dbf2      	blt.n	8006dea <__swhatbuf_r+0x12>
 8006e04:	9a01      	ldr	r2, [sp, #4]
 8006e06:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 8006e0a:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 8006e0e:	425a      	negs	r2, r3
 8006e10:	415a      	adcs	r2, r3
 8006e12:	602a      	str	r2, [r5, #0]
 8006e14:	e7ee      	b.n	8006df4 <__swhatbuf_r+0x1c>
 8006e16:	2340      	movs	r3, #64	; 0x40
 8006e18:	2000      	movs	r0, #0
 8006e1a:	6023      	str	r3, [r4, #0]
 8006e1c:	b016      	add	sp, #88	; 0x58
 8006e1e:	bd70      	pop	{r4, r5, r6, pc}

08006e20 <__smakebuf_r>:
 8006e20:	898b      	ldrh	r3, [r1, #12]
 8006e22:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8006e24:	079d      	lsls	r5, r3, #30
 8006e26:	4606      	mov	r6, r0
 8006e28:	460c      	mov	r4, r1
 8006e2a:	d507      	bpl.n	8006e3c <__smakebuf_r+0x1c>
 8006e2c:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8006e30:	6023      	str	r3, [r4, #0]
 8006e32:	6123      	str	r3, [r4, #16]
 8006e34:	2301      	movs	r3, #1
 8006e36:	6163      	str	r3, [r4, #20]
 8006e38:	b002      	add	sp, #8
 8006e3a:	bd70      	pop	{r4, r5, r6, pc}
 8006e3c:	466a      	mov	r2, sp
 8006e3e:	ab01      	add	r3, sp, #4
 8006e40:	f7ff ffca 	bl	8006dd8 <__swhatbuf_r>
 8006e44:	9900      	ldr	r1, [sp, #0]
 8006e46:	4605      	mov	r5, r0
 8006e48:	4630      	mov	r0, r6
 8006e4a:	f7ff f989 	bl	8006160 <_malloc_r>
 8006e4e:	b948      	cbnz	r0, 8006e64 <__smakebuf_r+0x44>
 8006e50:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e54:	059a      	lsls	r2, r3, #22
 8006e56:	d4ef      	bmi.n	8006e38 <__smakebuf_r+0x18>
 8006e58:	f023 0303 	bic.w	r3, r3, #3
 8006e5c:	f043 0302 	orr.w	r3, r3, #2
 8006e60:	81a3      	strh	r3, [r4, #12]
 8006e62:	e7e3      	b.n	8006e2c <__smakebuf_r+0xc>
 8006e64:	4b0d      	ldr	r3, [pc, #52]	; (8006e9c <__smakebuf_r+0x7c>)
 8006e66:	62b3      	str	r3, [r6, #40]	; 0x28
 8006e68:	89a3      	ldrh	r3, [r4, #12]
 8006e6a:	6020      	str	r0, [r4, #0]
 8006e6c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006e70:	81a3      	strh	r3, [r4, #12]
 8006e72:	9b00      	ldr	r3, [sp, #0]
 8006e74:	6120      	str	r0, [r4, #16]
 8006e76:	6163      	str	r3, [r4, #20]
 8006e78:	9b01      	ldr	r3, [sp, #4]
 8006e7a:	b15b      	cbz	r3, 8006e94 <__smakebuf_r+0x74>
 8006e7c:	4630      	mov	r0, r6
 8006e7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006e82:	f000 f8d1 	bl	8007028 <_isatty_r>
 8006e86:	b128      	cbz	r0, 8006e94 <__smakebuf_r+0x74>
 8006e88:	89a3      	ldrh	r3, [r4, #12]
 8006e8a:	f023 0303 	bic.w	r3, r3, #3
 8006e8e:	f043 0301 	orr.w	r3, r3, #1
 8006e92:	81a3      	strh	r3, [r4, #12]
 8006e94:	89a0      	ldrh	r0, [r4, #12]
 8006e96:	4305      	orrs	r5, r0
 8006e98:	81a5      	strh	r5, [r4, #12]
 8006e9a:	e7cd      	b.n	8006e38 <__smakebuf_r+0x18>
 8006e9c:	08006c31 	.word	0x08006c31

08006ea0 <_malloc_usable_size_r>:
 8006ea0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006ea4:	1f18      	subs	r0, r3, #4
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	bfbc      	itt	lt
 8006eaa:	580b      	ldrlt	r3, [r1, r0]
 8006eac:	18c0      	addlt	r0, r0, r3
 8006eae:	4770      	bx	lr

08006eb0 <_raise_r>:
 8006eb0:	291f      	cmp	r1, #31
 8006eb2:	b538      	push	{r3, r4, r5, lr}
 8006eb4:	4604      	mov	r4, r0
 8006eb6:	460d      	mov	r5, r1
 8006eb8:	d904      	bls.n	8006ec4 <_raise_r+0x14>
 8006eba:	2316      	movs	r3, #22
 8006ebc:	6003      	str	r3, [r0, #0]
 8006ebe:	f04f 30ff 	mov.w	r0, #4294967295
 8006ec2:	bd38      	pop	{r3, r4, r5, pc}
 8006ec4:	6c42      	ldr	r2, [r0, #68]	; 0x44
 8006ec6:	b112      	cbz	r2, 8006ece <_raise_r+0x1e>
 8006ec8:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8006ecc:	b94b      	cbnz	r3, 8006ee2 <_raise_r+0x32>
 8006ece:	4620      	mov	r0, r4
 8006ed0:	f000 f830 	bl	8006f34 <_getpid_r>
 8006ed4:	462a      	mov	r2, r5
 8006ed6:	4601      	mov	r1, r0
 8006ed8:	4620      	mov	r0, r4
 8006eda:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8006ede:	f000 b817 	b.w	8006f10 <_kill_r>
 8006ee2:	2b01      	cmp	r3, #1
 8006ee4:	d00a      	beq.n	8006efc <_raise_r+0x4c>
 8006ee6:	1c59      	adds	r1, r3, #1
 8006ee8:	d103      	bne.n	8006ef2 <_raise_r+0x42>
 8006eea:	2316      	movs	r3, #22
 8006eec:	6003      	str	r3, [r0, #0]
 8006eee:	2001      	movs	r0, #1
 8006ef0:	e7e7      	b.n	8006ec2 <_raise_r+0x12>
 8006ef2:	2400      	movs	r4, #0
 8006ef4:	4628      	mov	r0, r5
 8006ef6:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8006efa:	4798      	blx	r3
 8006efc:	2000      	movs	r0, #0
 8006efe:	e7e0      	b.n	8006ec2 <_raise_r+0x12>

08006f00 <raise>:
 8006f00:	4b02      	ldr	r3, [pc, #8]	; (8006f0c <raise+0xc>)
 8006f02:	4601      	mov	r1, r0
 8006f04:	6818      	ldr	r0, [r3, #0]
 8006f06:	f7ff bfd3 	b.w	8006eb0 <_raise_r>
 8006f0a:	bf00      	nop
 8006f0c:	20000014 	.word	0x20000014

08006f10 <_kill_r>:
 8006f10:	b538      	push	{r3, r4, r5, lr}
 8006f12:	2300      	movs	r3, #0
 8006f14:	4d06      	ldr	r5, [pc, #24]	; (8006f30 <_kill_r+0x20>)
 8006f16:	4604      	mov	r4, r0
 8006f18:	4608      	mov	r0, r1
 8006f1a:	4611      	mov	r1, r2
 8006f1c:	602b      	str	r3, [r5, #0]
 8006f1e:	f7fa ffb7 	bl	8001e90 <_kill>
 8006f22:	1c43      	adds	r3, r0, #1
 8006f24:	d102      	bne.n	8006f2c <_kill_r+0x1c>
 8006f26:	682b      	ldr	r3, [r5, #0]
 8006f28:	b103      	cbz	r3, 8006f2c <_kill_r+0x1c>
 8006f2a:	6023      	str	r3, [r4, #0]
 8006f2c:	bd38      	pop	{r3, r4, r5, pc}
 8006f2e:	bf00      	nop
 8006f30:	2000037c 	.word	0x2000037c

08006f34 <_getpid_r>:
 8006f34:	f7fa bfa5 	b.w	8001e82 <_getpid>

08006f38 <__sread>:
 8006f38:	b510      	push	{r4, lr}
 8006f3a:	460c      	mov	r4, r1
 8006f3c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f40:	f000 f894 	bl	800706c <_read_r>
 8006f44:	2800      	cmp	r0, #0
 8006f46:	bfab      	itete	ge
 8006f48:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8006f4a:	89a3      	ldrhlt	r3, [r4, #12]
 8006f4c:	181b      	addge	r3, r3, r0
 8006f4e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8006f52:	bfac      	ite	ge
 8006f54:	6563      	strge	r3, [r4, #84]	; 0x54
 8006f56:	81a3      	strhlt	r3, [r4, #12]
 8006f58:	bd10      	pop	{r4, pc}

08006f5a <__swrite>:
 8006f5a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006f5e:	461f      	mov	r7, r3
 8006f60:	898b      	ldrh	r3, [r1, #12]
 8006f62:	4605      	mov	r5, r0
 8006f64:	05db      	lsls	r3, r3, #23
 8006f66:	460c      	mov	r4, r1
 8006f68:	4616      	mov	r6, r2
 8006f6a:	d505      	bpl.n	8006f78 <__swrite+0x1e>
 8006f6c:	2302      	movs	r3, #2
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f74:	f000 f868 	bl	8007048 <_lseek_r>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	4632      	mov	r2, r6
 8006f7c:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006f80:	81a3      	strh	r3, [r4, #12]
 8006f82:	4628      	mov	r0, r5
 8006f84:	463b      	mov	r3, r7
 8006f86:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006f8a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006f8e:	f000 b817 	b.w	8006fc0 <_write_r>

08006f92 <__sseek>:
 8006f92:	b510      	push	{r4, lr}
 8006f94:	460c      	mov	r4, r1
 8006f96:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006f9a:	f000 f855 	bl	8007048 <_lseek_r>
 8006f9e:	1c43      	adds	r3, r0, #1
 8006fa0:	89a3      	ldrh	r3, [r4, #12]
 8006fa2:	bf15      	itete	ne
 8006fa4:	6560      	strne	r0, [r4, #84]	; 0x54
 8006fa6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8006faa:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8006fae:	81a3      	strheq	r3, [r4, #12]
 8006fb0:	bf18      	it	ne
 8006fb2:	81a3      	strhne	r3, [r4, #12]
 8006fb4:	bd10      	pop	{r4, pc}

08006fb6 <__sclose>:
 8006fb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006fba:	f000 b813 	b.w	8006fe4 <_close_r>
	...

08006fc0 <_write_r>:
 8006fc0:	b538      	push	{r3, r4, r5, lr}
 8006fc2:	4604      	mov	r4, r0
 8006fc4:	4608      	mov	r0, r1
 8006fc6:	4611      	mov	r1, r2
 8006fc8:	2200      	movs	r2, #0
 8006fca:	4d05      	ldr	r5, [pc, #20]	; (8006fe0 <_write_r+0x20>)
 8006fcc:	602a      	str	r2, [r5, #0]
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f7fa ff95 	bl	8001efe <_write>
 8006fd4:	1c43      	adds	r3, r0, #1
 8006fd6:	d102      	bne.n	8006fde <_write_r+0x1e>
 8006fd8:	682b      	ldr	r3, [r5, #0]
 8006fda:	b103      	cbz	r3, 8006fde <_write_r+0x1e>
 8006fdc:	6023      	str	r3, [r4, #0]
 8006fde:	bd38      	pop	{r3, r4, r5, pc}
 8006fe0:	2000037c 	.word	0x2000037c

08006fe4 <_close_r>:
 8006fe4:	b538      	push	{r3, r4, r5, lr}
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	4d05      	ldr	r5, [pc, #20]	; (8007000 <_close_r+0x1c>)
 8006fea:	4604      	mov	r4, r0
 8006fec:	4608      	mov	r0, r1
 8006fee:	602b      	str	r3, [r5, #0]
 8006ff0:	f7fa ffa1 	bl	8001f36 <_close>
 8006ff4:	1c43      	adds	r3, r0, #1
 8006ff6:	d102      	bne.n	8006ffe <_close_r+0x1a>
 8006ff8:	682b      	ldr	r3, [r5, #0]
 8006ffa:	b103      	cbz	r3, 8006ffe <_close_r+0x1a>
 8006ffc:	6023      	str	r3, [r4, #0]
 8006ffe:	bd38      	pop	{r3, r4, r5, pc}
 8007000:	2000037c 	.word	0x2000037c

08007004 <_fstat_r>:
 8007004:	b538      	push	{r3, r4, r5, lr}
 8007006:	2300      	movs	r3, #0
 8007008:	4d06      	ldr	r5, [pc, #24]	; (8007024 <_fstat_r+0x20>)
 800700a:	4604      	mov	r4, r0
 800700c:	4608      	mov	r0, r1
 800700e:	4611      	mov	r1, r2
 8007010:	602b      	str	r3, [r5, #0]
 8007012:	f7fa ff9b 	bl	8001f4c <_fstat>
 8007016:	1c43      	adds	r3, r0, #1
 8007018:	d102      	bne.n	8007020 <_fstat_r+0x1c>
 800701a:	682b      	ldr	r3, [r5, #0]
 800701c:	b103      	cbz	r3, 8007020 <_fstat_r+0x1c>
 800701e:	6023      	str	r3, [r4, #0]
 8007020:	bd38      	pop	{r3, r4, r5, pc}
 8007022:	bf00      	nop
 8007024:	2000037c 	.word	0x2000037c

08007028 <_isatty_r>:
 8007028:	b538      	push	{r3, r4, r5, lr}
 800702a:	2300      	movs	r3, #0
 800702c:	4d05      	ldr	r5, [pc, #20]	; (8007044 <_isatty_r+0x1c>)
 800702e:	4604      	mov	r4, r0
 8007030:	4608      	mov	r0, r1
 8007032:	602b      	str	r3, [r5, #0]
 8007034:	f7fa ff99 	bl	8001f6a <_isatty>
 8007038:	1c43      	adds	r3, r0, #1
 800703a:	d102      	bne.n	8007042 <_isatty_r+0x1a>
 800703c:	682b      	ldr	r3, [r5, #0]
 800703e:	b103      	cbz	r3, 8007042 <_isatty_r+0x1a>
 8007040:	6023      	str	r3, [r4, #0]
 8007042:	bd38      	pop	{r3, r4, r5, pc}
 8007044:	2000037c 	.word	0x2000037c

08007048 <_lseek_r>:
 8007048:	b538      	push	{r3, r4, r5, lr}
 800704a:	4604      	mov	r4, r0
 800704c:	4608      	mov	r0, r1
 800704e:	4611      	mov	r1, r2
 8007050:	2200      	movs	r2, #0
 8007052:	4d05      	ldr	r5, [pc, #20]	; (8007068 <_lseek_r+0x20>)
 8007054:	602a      	str	r2, [r5, #0]
 8007056:	461a      	mov	r2, r3
 8007058:	f7fa ff91 	bl	8001f7e <_lseek>
 800705c:	1c43      	adds	r3, r0, #1
 800705e:	d102      	bne.n	8007066 <_lseek_r+0x1e>
 8007060:	682b      	ldr	r3, [r5, #0]
 8007062:	b103      	cbz	r3, 8007066 <_lseek_r+0x1e>
 8007064:	6023      	str	r3, [r4, #0]
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	2000037c 	.word	0x2000037c

0800706c <_read_r>:
 800706c:	b538      	push	{r3, r4, r5, lr}
 800706e:	4604      	mov	r4, r0
 8007070:	4608      	mov	r0, r1
 8007072:	4611      	mov	r1, r2
 8007074:	2200      	movs	r2, #0
 8007076:	4d05      	ldr	r5, [pc, #20]	; (800708c <_read_r+0x20>)
 8007078:	602a      	str	r2, [r5, #0]
 800707a:	461a      	mov	r2, r3
 800707c:	f7fa ff22 	bl	8001ec4 <_read>
 8007080:	1c43      	adds	r3, r0, #1
 8007082:	d102      	bne.n	800708a <_read_r+0x1e>
 8007084:	682b      	ldr	r3, [r5, #0]
 8007086:	b103      	cbz	r3, 800708a <_read_r+0x1e>
 8007088:	6023      	str	r3, [r4, #0]
 800708a:	bd38      	pop	{r3, r4, r5, pc}
 800708c:	2000037c 	.word	0x2000037c

08007090 <_init>:
 8007090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007092:	bf00      	nop
 8007094:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007096:	bc08      	pop	{r3}
 8007098:	469e      	mov	lr, r3
 800709a:	4770      	bx	lr

0800709c <_fini>:
 800709c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800709e:	bf00      	nop
 80070a0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80070a2:	bc08      	pop	{r3}
 80070a4:	469e      	mov	lr, r3
 80070a6:	4770      	bx	lr
