
app.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000267c  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000028  0800278c  0800278c  0001278c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080027b4  080027b4  00020014  2**0
                  CONTENTS
  4 .ARM          00000000  080027b4  080027b4  00020014  2**0
                  CONTENTS
  5 .preinit_array 00000000  080027b4  080027b4  00020014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080027b4  080027b4  000127b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080027b8  080027b8  000127b8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000014  20000000  080027bc  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000000ac  20000018  080027d0  00020018  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  200000c4  080027d0  000200c4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00020014  2**0
                  CONTENTS, READONLY
 12 .debug_info   00006083  00000000  00000000  0002003d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001604  00000000  00000000  000260c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000750  00000000  00000000  000276c8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 000006c8  00000000  00000000  00027e18  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016242  00000000  00000000  000284e0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00007346  00000000  00000000  0003e722  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0007f317  00000000  00000000  00045a68  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000c4d7f  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00001d04  00000000  00000000  000c4dd4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000018 	.word	0x20000018
 800012c:	00000000 	.word	0x00000000
 8000130:	08002774 	.word	0x08002774

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000001c 	.word	0x2000001c
 800014c:	08002774 	.word	0x08002774

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	; 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2iz>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 80008f4:	d215      	bcs.n	8000922 <__aeabi_d2iz+0x36>
 80008f6:	d511      	bpl.n	800091c <__aeabi_d2iz+0x30>
 80008f8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 80008fc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000900:	d912      	bls.n	8000928 <__aeabi_d2iz+0x3c>
 8000902:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000906:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800090a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 800090e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000912:	fa23 f002 	lsr.w	r0, r3, r2
 8000916:	bf18      	it	ne
 8000918:	4240      	negne	r0, r0
 800091a:	4770      	bx	lr
 800091c:	f04f 0000 	mov.w	r0, #0
 8000920:	4770      	bx	lr
 8000922:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000926:	d105      	bne.n	8000934 <__aeabi_d2iz+0x48>
 8000928:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 800092c:	bf08      	it	eq
 800092e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000932:	4770      	bx	lr
 8000934:	f04f 0000 	mov.w	r0, #0
 8000938:	4770      	bx	lr
 800093a:	bf00      	nop

0800093c <HX711_SCK_GET>:
HX711_GainLevel gainLevel = GAIN_128;
double shift = 0;;
double coeff = 1;

// Private function
GPIO_PinState HX711_SCK_GET() {
 800093c:	b580      	push	{r7, lr}
 800093e:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(HX711_SCK_PORT, HX711_SCK_PIN);
 8000940:	4b05      	ldr	r3, [pc, #20]	; (8000958 <HX711_SCK_GET+0x1c>)
 8000942:	681b      	ldr	r3, [r3, #0]
 8000944:	4a05      	ldr	r2, [pc, #20]	; (800095c <HX711_SCK_GET+0x20>)
 8000946:	8812      	ldrh	r2, [r2, #0]
 8000948:	4611      	mov	r1, r2
 800094a:	4618      	mov	r0, r3
 800094c:	f001 f99e 	bl	8001c8c <HAL_GPIO_ReadPin>
 8000950:	4603      	mov	r3, r0
}
 8000952:	4618      	mov	r0, r3
 8000954:	bd80      	pop	{r7, pc}
 8000956:	bf00      	nop
 8000958:	20000048 	.word	0x20000048
 800095c:	2000004c 	.word	0x2000004c

08000960 <HX711_SCK_SET>:

void HX711_SCK_SET(GPIO_PinState state) {
 8000960:	b580      	push	{r7, lr}
 8000962:	b082      	sub	sp, #8
 8000964:	af00      	add	r7, sp, #0
 8000966:	4603      	mov	r3, r0
 8000968:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(HX711_SCK_PORT, HX711_SCK_PIN, state);
 800096a:	4b06      	ldr	r3, [pc, #24]	; (8000984 <HX711_SCK_SET+0x24>)
 800096c:	681b      	ldr	r3, [r3, #0]
 800096e:	4a06      	ldr	r2, [pc, #24]	; (8000988 <HX711_SCK_SET+0x28>)
 8000970:	8811      	ldrh	r1, [r2, #0]
 8000972:	79fa      	ldrb	r2, [r7, #7]
 8000974:	4618      	mov	r0, r3
 8000976:	f001 f9a0 	bl	8001cba <HAL_GPIO_WritePin>
}
 800097a:	bf00      	nop
 800097c:	3708      	adds	r7, #8
 800097e:	46bd      	mov	sp, r7
 8000980:	bd80      	pop	{r7, pc}
 8000982:	bf00      	nop
 8000984:	20000048 	.word	0x20000048
 8000988:	2000004c 	.word	0x2000004c

0800098c <HX711_SCK_HIGH>:

void HX711_SCK_HIGH() {
 800098c:	b580      	push	{r7, lr}
 800098e:	af00      	add	r7, sp, #0
	HX711_SCK_SET(GPIO_PIN_SET);
 8000990:	2001      	movs	r0, #1
 8000992:	f7ff ffe5 	bl	8000960 <HX711_SCK_SET>
}
 8000996:	bf00      	nop
 8000998:	bd80      	pop	{r7, pc}

0800099a <HX711_SCK_LOW>:

void HX711_SCK_LOW() {
 800099a:	b580      	push	{r7, lr}
 800099c:	af00      	add	r7, sp, #0
	HX711_SCK_SET(GPIO_PIN_RESET);
 800099e:	2000      	movs	r0, #0
 80009a0:	f7ff ffde 	bl	8000960 <HX711_SCK_SET>
}
 80009a4:	bf00      	nop
 80009a6:	bd80      	pop	{r7, pc}

080009a8 <HX711_DT_GET>:

GPIO_PinState HX711_DT_GET() {
 80009a8:	b580      	push	{r7, lr}
 80009aa:	af00      	add	r7, sp, #0
	return HAL_GPIO_ReadPin(HX711_DT_PORT, HX711_DT_PIN);
 80009ac:	4b05      	ldr	r3, [pc, #20]	; (80009c4 <HX711_DT_GET+0x1c>)
 80009ae:	681b      	ldr	r3, [r3, #0]
 80009b0:	4a05      	ldr	r2, [pc, #20]	; (80009c8 <HX711_DT_GET+0x20>)
 80009b2:	8812      	ldrh	r2, [r2, #0]
 80009b4:	4611      	mov	r1, r2
 80009b6:	4618      	mov	r0, r3
 80009b8:	f001 f968 	bl	8001c8c <HAL_GPIO_ReadPin>
 80009bc:	4603      	mov	r3, r0
}
 80009be:	4618      	mov	r0, r3
 80009c0:	bd80      	pop	{r7, pc}
 80009c2:	bf00      	nop
 80009c4:	20000044 	.word	0x20000044
 80009c8:	20000040 	.word	0x20000040

080009cc <HX711_WaitUntilDataReady>:

void HX711_WaitUntilDataReady() {
 80009cc:	b580      	push	{r7, lr}
 80009ce:	af00      	add	r7, sp, #0
	while(HX711_DT_GET() != GPIO_PIN_RESET);
 80009d0:	bf00      	nop
 80009d2:	f7ff ffe9 	bl	80009a8 <HX711_DT_GET>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d1fa      	bne.n	80009d2 <HX711_WaitUntilDataReady+0x6>
}
 80009dc:	bf00      	nop
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
	...

080009e4 <HX711_PerformGainPulse>:

void HX711_PerformGainPulse() {
 80009e4:	b580      	push	{r7, lr}
 80009e6:	b082      	sub	sp, #8
 80009e8:	af00      	add	r7, sp, #0
	uint8_t times;
	switch(gainLevel) {
 80009ea:	4b11      	ldr	r3, [pc, #68]	; (8000a30 <HX711_PerformGainPulse+0x4c>)
 80009ec:	781b      	ldrb	r3, [r3, #0]
 80009ee:	2b02      	cmp	r3, #2
 80009f0:	d00c      	beq.n	8000a0c <HX711_PerformGainPulse+0x28>
 80009f2:	2b02      	cmp	r3, #2
 80009f4:	dc12      	bgt.n	8000a1c <HX711_PerformGainPulse+0x38>
 80009f6:	2b00      	cmp	r3, #0
 80009f8:	d002      	beq.n	8000a00 <HX711_PerformGainPulse+0x1c>
 80009fa:	2b01      	cmp	r3, #1
 80009fc:	d003      	beq.n	8000a06 <HX711_PerformGainPulse+0x22>
 80009fe:	e008      	b.n	8000a12 <HX711_PerformGainPulse+0x2e>
		case GAIN_128:
			times = 1;
 8000a00:	2301      	movs	r3, #1
 8000a02:	71fb      	strb	r3, [r7, #7]
			break;
 8000a04:	e005      	b.n	8000a12 <HX711_PerformGainPulse+0x2e>
		case GAIN_64:
			times = 3;
 8000a06:	2303      	movs	r3, #3
 8000a08:	71fb      	strb	r3, [r7, #7]
			break;
 8000a0a:	e002      	b.n	8000a12 <HX711_PerformGainPulse+0x2e>
		case GAIN_32:
			times = 2;
 8000a0c:	2302      	movs	r3, #2
 8000a0e:	71fb      	strb	r3, [r7, #7]
			break;
 8000a10:	bf00      	nop
	}

	while(times-- > 0) {
 8000a12:	e003      	b.n	8000a1c <HX711_PerformGainPulse+0x38>
		HX711_SCK_HIGH();
 8000a14:	f7ff ffba 	bl	800098c <HX711_SCK_HIGH>
		HX711_SCK_LOW();
 8000a18:	f7ff ffbf 	bl	800099a <HX711_SCK_LOW>
	while(times-- > 0) {
 8000a1c:	79fb      	ldrb	r3, [r7, #7]
 8000a1e:	1e5a      	subs	r2, r3, #1
 8000a20:	71fa      	strb	r2, [r7, #7]
 8000a22:	2b00      	cmp	r3, #0
 8000a24:	d1f6      	bne.n	8000a14 <HX711_PerformGainPulse+0x30>
	}
}
 8000a26:	bf00      	nop
 8000a28:	bf00      	nop
 8000a2a:	3708      	adds	r7, #8
 8000a2c:	46bd      	mov	sp, r7
 8000a2e:	bd80      	pop	{r7, pc}
 8000a30:	20000034 	.word	0x20000034

08000a34 <HX711_ReadRawValue>:

long HX711_ReadRawValue() {
 8000a34:	b580      	push	{r7, lr}
 8000a36:	b082      	sub	sp, #8
 8000a38:	af00      	add	r7, sp, #0
	HX711_WaitUntilDataReady();
 8000a3a:	f7ff ffc7 	bl	80009cc <HX711_WaitUntilDataReady>

	long value = 0;
 8000a3e:	2300      	movs	r3, #0
 8000a40:	607b      	str	r3, [r7, #4]
	for (unsigned short i = 0; i < 24; i++) {
 8000a42:	2300      	movs	r3, #0
 8000a44:	807b      	strh	r3, [r7, #2]
 8000a46:	e011      	b.n	8000a6c <HX711_ReadRawValue+0x38>
		HX711_SCK_HIGH();
 8000a48:	f7ff ffa0 	bl	800098c <HX711_SCK_HIGH>
		value = value << 1;
 8000a4c:	687b      	ldr	r3, [r7, #4]
 8000a4e:	005b      	lsls	r3, r3, #1
 8000a50:	607b      	str	r3, [r7, #4]
		HX711_SCK_LOW();
 8000a52:	f7ff ffa2 	bl	800099a <HX711_SCK_LOW>
		if(HX711_DT_GET() == GPIO_PIN_SET) ++value;
 8000a56:	f7ff ffa7 	bl	80009a8 <HX711_DT_GET>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b01      	cmp	r3, #1
 8000a5e:	d102      	bne.n	8000a66 <HX711_ReadRawValue+0x32>
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	3301      	adds	r3, #1
 8000a64:	607b      	str	r3, [r7, #4]
	for (unsigned short i = 0; i < 24; i++) {
 8000a66:	887b      	ldrh	r3, [r7, #2]
 8000a68:	3301      	adds	r3, #1
 8000a6a:	807b      	strh	r3, [r7, #2]
 8000a6c:	887b      	ldrh	r3, [r7, #2]
 8000a6e:	2b17      	cmp	r3, #23
 8000a70:	d9ea      	bls.n	8000a48 <HX711_ReadRawValue+0x14>
	}

	HX711_PerformGainPulse();
 8000a72:	f7ff ffb7 	bl	80009e4 <HX711_PerformGainPulse>

	return value;
 8000a76:	687b      	ldr	r3, [r7, #4]
}
 8000a78:	4618      	mov	r0, r3
 8000a7a:	3708      	adds	r7, #8
 8000a7c:	46bd      	mov	sp, r7
 8000a7e:	bd80      	pop	{r7, pc}

08000a80 <HX711_Init>:
void HX711_Init(
	GPIO_TypeDef* SCK_PORT,
	uint16_t SCK_PIN,
	GPIO_TypeDef* DT_PORT,
	uint16_t DT_PIN
) {
 8000a80:	b580      	push	{r7, lr}
 8000a82:	b084      	sub	sp, #16
 8000a84:	af00      	add	r7, sp, #0
 8000a86:	60f8      	str	r0, [r7, #12]
 8000a88:	607a      	str	r2, [r7, #4]
 8000a8a:	461a      	mov	r2, r3
 8000a8c:	460b      	mov	r3, r1
 8000a8e:	817b      	strh	r3, [r7, #10]
 8000a90:	4613      	mov	r3, r2
 8000a92:	813b      	strh	r3, [r7, #8]
	HX711_SCK_PORT= SCK_PORT;
 8000a94:	4a08      	ldr	r2, [pc, #32]	; (8000ab8 <HX711_Init+0x38>)
 8000a96:	68fb      	ldr	r3, [r7, #12]
 8000a98:	6013      	str	r3, [r2, #0]
	HX711_SCK_PIN = SCK_PIN;
 8000a9a:	4a08      	ldr	r2, [pc, #32]	; (8000abc <HX711_Init+0x3c>)
 8000a9c:	897b      	ldrh	r3, [r7, #10]
 8000a9e:	8013      	strh	r3, [r2, #0]
	HX711_DT_PORT = DT_PORT;
 8000aa0:	4a07      	ldr	r2, [pc, #28]	; (8000ac0 <HX711_Init+0x40>)
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	6013      	str	r3, [r2, #0]
	HX711_DT_PIN = DT_PIN;
 8000aa6:	4a07      	ldr	r2, [pc, #28]	; (8000ac4 <HX711_Init+0x44>)
 8000aa8:	893b      	ldrh	r3, [r7, #8]
 8000aaa:	8013      	strh	r3, [r2, #0]

	HX711_PowerDown();
 8000aac:	f000 f80c 	bl	8000ac8 <HX711_PowerDown>
}
 8000ab0:	bf00      	nop
 8000ab2:	3710      	adds	r7, #16
 8000ab4:	46bd      	mov	sp, r7
 8000ab6:	bd80      	pop	{r7, pc}
 8000ab8:	20000048 	.word	0x20000048
 8000abc:	2000004c 	.word	0x2000004c
 8000ac0:	20000044 	.word	0x20000044
 8000ac4:	20000040 	.word	0x20000040

08000ac8 <HX711_PowerDown>:

void HX711_PowerDown() {
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	af00      	add	r7, sp, #0
	HX711_SCK_HIGH();
 8000acc:	f7ff ff5e 	bl	800098c <HX711_SCK_HIGH>
	HAL_Delay(1);
 8000ad0:	2001      	movs	r0, #1
 8000ad2:	f000 fe25 	bl	8001720 <HAL_Delay>
}
 8000ad6:	bf00      	nop
 8000ad8:	bd80      	pop	{r7, pc}

08000ada <HX711_PowerUp>:

void HX711_PowerUp() {
 8000ada:	b580      	push	{r7, lr}
 8000adc:	af00      	add	r7, sp, #0
	HX711_SCK_LOW();
 8000ade:	f7ff ff5c 	bl	800099a <HX711_SCK_LOW>
	HAL_Delay(1);
 8000ae2:	2001      	movs	r0, #1
 8000ae4:	f000 fe1c 	bl	8001720 <HAL_Delay>

	HX711_ReadRawValue(); // to set the gain level;
 8000ae8:	f7ff ffa4 	bl	8000a34 <HX711_ReadRawValue>
}
 8000aec:	bf00      	nop
 8000aee:	bd80      	pop	{r7, pc}

08000af0 <HX711_IsPoweredUp>:

boolean HX711_IsPoweredUp() {
 8000af0:	b580      	push	{r7, lr}
 8000af2:	af00      	add	r7, sp, #0
	return HX711_SCK_GET() == GPIO_PIN_RESET;
 8000af4:	f7ff ff22 	bl	800093c <HX711_SCK_GET>
 8000af8:	4603      	mov	r3, r0
 8000afa:	2b00      	cmp	r3, #0
 8000afc:	bf0c      	ite	eq
 8000afe:	2301      	moveq	r3, #1
 8000b00:	2300      	movne	r3, #0
 8000b02:	b2db      	uxtb	r3, r3
}
 8000b04:	4618      	mov	r0, r3
 8000b06:	bd80      	pop	{r7, pc}

08000b08 <HX711_SetGainLevel>:

void HX711_SetGainLevel(HX711_GainLevel _gainLevel) {
 8000b08:	b580      	push	{r7, lr}
 8000b0a:	b082      	sub	sp, #8
 8000b0c:	af00      	add	r7, sp, #0
 8000b0e:	4603      	mov	r3, r0
 8000b10:	71fb      	strb	r3, [r7, #7]
	gainLevel = _gainLevel;
 8000b12:	4a07      	ldr	r2, [pc, #28]	; (8000b30 <HX711_SetGainLevel+0x28>)
 8000b14:	79fb      	ldrb	r3, [r7, #7]
 8000b16:	7013      	strb	r3, [r2, #0]

	if(HX711_IsPoweredUp()) HX711_ReadRawValue();
 8000b18:	f7ff ffea 	bl	8000af0 <HX711_IsPoweredUp>
 8000b1c:	4603      	mov	r3, r0
 8000b1e:	2b00      	cmp	r3, #0
 8000b20:	d001      	beq.n	8000b26 <HX711_SetGainLevel+0x1e>
 8000b22:	f7ff ff87 	bl	8000a34 <HX711_ReadRawValue>
}
 8000b26:	bf00      	nop
 8000b28:	3708      	adds	r7, #8
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bd80      	pop	{r7, pc}
 8000b2e:	bf00      	nop
 8000b30:	20000034 	.word	0x20000034

08000b34 <HX711_Calibrate>:

void HX711_Calibrate(double _shift, double _coeff) {
 8000b34:	b480      	push	{r7}
 8000b36:	b085      	sub	sp, #20
 8000b38:	af00      	add	r7, sp, #0
 8000b3a:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8000b3e:	e9c7 2300 	strd	r2, r3, [r7]
	shift = _shift;
 8000b42:	4907      	ldr	r1, [pc, #28]	; (8000b60 <HX711_Calibrate+0x2c>)
 8000b44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8000b48:	e9c1 2300 	strd	r2, r3, [r1]
	coeff = _coeff;
 8000b4c:	4905      	ldr	r1, [pc, #20]	; (8000b64 <HX711_Calibrate+0x30>)
 8000b4e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8000b52:	e9c1 2300 	strd	r2, r3, [r1]
}
 8000b56:	bf00      	nop
 8000b58:	3714      	adds	r7, #20
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bc80      	pop	{r7}
 8000b5e:	4770      	bx	lr
 8000b60:	20000038 	.word	0x20000038
 8000b64:	20000000 	.word	0x20000000

08000b68 <HX711_ReadValue>:

double HX711_ReadValue() {
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	af00      	add	r7, sp, #0
	return ((double)HX711_ReadRawValue() - shift) * coeff;
 8000b6c:	f7ff ff62 	bl	8000a34 <HX711_ReadRawValue>
 8000b70:	4603      	mov	r3, r0
 8000b72:	4618      	mov	r0, r3
 8000b74:	f7ff fc3e 	bl	80003f4 <__aeabi_i2d>
 8000b78:	4b09      	ldr	r3, [pc, #36]	; (8000ba0 <HX711_ReadValue+0x38>)
 8000b7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b7e:	f7ff faeb 	bl	8000158 <__aeabi_dsub>
 8000b82:	4602      	mov	r2, r0
 8000b84:	460b      	mov	r3, r1
 8000b86:	4610      	mov	r0, r2
 8000b88:	4619      	mov	r1, r3
 8000b8a:	4b06      	ldr	r3, [pc, #24]	; (8000ba4 <HX711_ReadValue+0x3c>)
 8000b8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000b90:	f7ff fc9a 	bl	80004c8 <__aeabi_dmul>
 8000b94:	4602      	mov	r2, r0
 8000b96:	460b      	mov	r3, r1
}
 8000b98:	4610      	mov	r0, r2
 8000b9a:	4619      	mov	r1, r3
 8000b9c:	bd80      	pop	{r7, pc}
 8000b9e:	bf00      	nop
 8000ba0:	20000038 	.word	0x20000038
 8000ba4:	20000000 	.word	0x20000000

08000ba8 <HX711_ReadAverageValue>:

double HX711_ReadAverageValue(int times) {
 8000ba8:	b5b0      	push	{r4, r5, r7, lr}
 8000baa:	b086      	sub	sp, #24
 8000bac:	af00      	add	r7, sp, #0
 8000bae:	6078      	str	r0, [r7, #4]
	double value = 0;
 8000bb0:	f04f 0200 	mov.w	r2, #0
 8000bb4:	f04f 0300 	mov.w	r3, #0
 8000bb8:	e9c7 2304 	strd	r2, r3, [r7, #16]

	for(int i = 0; i < times; ++i) {
 8000bbc:	2300      	movs	r3, #0
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	e019      	b.n	8000bf6 <HX711_ReadAverageValue+0x4e>
		value += HX711_ReadValue() / (double)times;
 8000bc2:	f7ff ffd1 	bl	8000b68 <HX711_ReadValue>
 8000bc6:	4604      	mov	r4, r0
 8000bc8:	460d      	mov	r5, r1
 8000bca:	6878      	ldr	r0, [r7, #4]
 8000bcc:	f7ff fc12 	bl	80003f4 <__aeabi_i2d>
 8000bd0:	4602      	mov	r2, r0
 8000bd2:	460b      	mov	r3, r1
 8000bd4:	4620      	mov	r0, r4
 8000bd6:	4629      	mov	r1, r5
 8000bd8:	f7ff fda0 	bl	800071c <__aeabi_ddiv>
 8000bdc:	4602      	mov	r2, r0
 8000bde:	460b      	mov	r3, r1
 8000be0:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 8000be4:	f7ff faba 	bl	800015c <__adddf3>
 8000be8:	4602      	mov	r2, r0
 8000bea:	460b      	mov	r3, r1
 8000bec:	e9c7 2304 	strd	r2, r3, [r7, #16]
	for(int i = 0; i < times; ++i) {
 8000bf0:	68fb      	ldr	r3, [r7, #12]
 8000bf2:	3301      	adds	r3, #1
 8000bf4:	60fb      	str	r3, [r7, #12]
 8000bf6:	68fa      	ldr	r2, [r7, #12]
 8000bf8:	687b      	ldr	r3, [r7, #4]
 8000bfa:	429a      	cmp	r2, r3
 8000bfc:	dbe1      	blt.n	8000bc2 <HX711_ReadAverageValue+0x1a>
	}

	return value;
 8000bfe:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
}
 8000c02:	4610      	mov	r0, r2
 8000c04:	4619      	mov	r1, r3
 8000c06:	3718      	adds	r7, #24
 8000c08:	46bd      	mov	sp, r7
 8000c0a:	bdb0      	pop	{r4, r5, r7, pc}

08000c0c <TM1638_STB_SET>:

TM1638_LedStatus ledStatuses[8];
int numberToDisplay;

// Private function
void TM1638_STB_SET(GPIO_PinState state) {
 8000c0c:	b580      	push	{r7, lr}
 8000c0e:	b082      	sub	sp, #8
 8000c10:	af00      	add	r7, sp, #0
 8000c12:	4603      	mov	r3, r0
 8000c14:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TM1638_STB_PORT, TM1638_STB_PIN, state);
 8000c16:	4b06      	ldr	r3, [pc, #24]	; (8000c30 <TM1638_STB_SET+0x24>)
 8000c18:	681b      	ldr	r3, [r3, #0]
 8000c1a:	4a06      	ldr	r2, [pc, #24]	; (8000c34 <TM1638_STB_SET+0x28>)
 8000c1c:	8811      	ldrh	r1, [r2, #0]
 8000c1e:	79fa      	ldrb	r2, [r7, #7]
 8000c20:	4618      	mov	r0, r3
 8000c22:	f001 f84a 	bl	8001cba <HAL_GPIO_WritePin>
}
 8000c26:	bf00      	nop
 8000c28:	3708      	adds	r7, #8
 8000c2a:	46bd      	mov	sp, r7
 8000c2c:	bd80      	pop	{r7, pc}
 8000c2e:	bf00      	nop
 8000c30:	2000006c 	.word	0x2000006c
 8000c34:	20000050 	.word	0x20000050

08000c38 <TM1638_STB_HIGH>:

void TM1638_STB_HIGH() {
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	af00      	add	r7, sp, #0
	TM1638_STB_SET(GPIO_PIN_SET);
 8000c3c:	2001      	movs	r0, #1
 8000c3e:	f7ff ffe5 	bl	8000c0c <TM1638_STB_SET>
}
 8000c42:	bf00      	nop
 8000c44:	bd80      	pop	{r7, pc}

08000c46 <TM1638_STB_LOW>:

void TM1638_STB_LOW() {
 8000c46:	b580      	push	{r7, lr}
 8000c48:	af00      	add	r7, sp, #0
	TM1638_STB_SET(GPIO_PIN_RESET);
 8000c4a:	2000      	movs	r0, #0
 8000c4c:	f7ff ffde 	bl	8000c0c <TM1638_STB_SET>
}
 8000c50:	bf00      	nop
 8000c52:	bd80      	pop	{r7, pc}

08000c54 <TM1638_CLK_SET>:

void TM1638_CLK_SET(GPIO_PinState state) {
 8000c54:	b580      	push	{r7, lr}
 8000c56:	b082      	sub	sp, #8
 8000c58:	af00      	add	r7, sp, #0
 8000c5a:	4603      	mov	r3, r0
 8000c5c:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TM1638_CLK_PORT, TM1638_CLK_PIN, state);
 8000c5e:	4b06      	ldr	r3, [pc, #24]	; (8000c78 <TM1638_CLK_SET+0x24>)
 8000c60:	681b      	ldr	r3, [r3, #0]
 8000c62:	4a06      	ldr	r2, [pc, #24]	; (8000c7c <TM1638_CLK_SET+0x28>)
 8000c64:	8811      	ldrh	r1, [r2, #0]
 8000c66:	79fa      	ldrb	r2, [r7, #7]
 8000c68:	4618      	mov	r0, r3
 8000c6a:	f001 f826 	bl	8001cba <HAL_GPIO_WritePin>
}
 8000c6e:	bf00      	nop
 8000c70:	3708      	adds	r7, #8
 8000c72:	46bd      	mov	sp, r7
 8000c74:	bd80      	pop	{r7, pc}
 8000c76:	bf00      	nop
 8000c78:	20000070 	.word	0x20000070
 8000c7c:	20000054 	.word	0x20000054

08000c80 <TM1638_CLK_HIGH>:

void TM1638_CLK_HIGH() {
 8000c80:	b580      	push	{r7, lr}
 8000c82:	af00      	add	r7, sp, #0
	TM1638_CLK_SET(GPIO_PIN_SET);
 8000c84:	2001      	movs	r0, #1
 8000c86:	f7ff ffe5 	bl	8000c54 <TM1638_CLK_SET>
}
 8000c8a:	bf00      	nop
 8000c8c:	bd80      	pop	{r7, pc}

08000c8e <TM1638_CLK_LOW>:

void TM1638_CLK_LOW() {
 8000c8e:	b580      	push	{r7, lr}
 8000c90:	af00      	add	r7, sp, #0
	TM1638_CLK_SET(GPIO_PIN_RESET);
 8000c92:	2000      	movs	r0, #0
 8000c94:	f7ff ffde 	bl	8000c54 <TM1638_CLK_SET>
}
 8000c98:	bf00      	nop
 8000c9a:	bd80      	pop	{r7, pc}

08000c9c <TM1638_DIO_SET>:

void TM1638_DIO_SET(GPIO_PinState state) {
 8000c9c:	b580      	push	{r7, lr}
 8000c9e:	b082      	sub	sp, #8
 8000ca0:	af00      	add	r7, sp, #0
 8000ca2:	4603      	mov	r3, r0
 8000ca4:	71fb      	strb	r3, [r7, #7]
	HAL_GPIO_WritePin(TM1638_DIO_PORT, TM1638_DIO_PIN, state);
 8000ca6:	4b06      	ldr	r3, [pc, #24]	; (8000cc0 <TM1638_DIO_SET+0x24>)
 8000ca8:	681b      	ldr	r3, [r3, #0]
 8000caa:	4a06      	ldr	r2, [pc, #24]	; (8000cc4 <TM1638_DIO_SET+0x28>)
 8000cac:	8811      	ldrh	r1, [r2, #0]
 8000cae:	79fa      	ldrb	r2, [r7, #7]
 8000cb0:	4618      	mov	r0, r3
 8000cb2:	f001 f802 	bl	8001cba <HAL_GPIO_WritePin>
}
 8000cb6:	bf00      	nop
 8000cb8:	3708      	adds	r7, #8
 8000cba:	46bd      	mov	sp, r7
 8000cbc:	bd80      	pop	{r7, pc}
 8000cbe:	bf00      	nop
 8000cc0:	20000058 	.word	0x20000058
 8000cc4:	20000068 	.word	0x20000068

08000cc8 <TM1638_DIO_HIGH>:

void TM1638_DIO_HIGH() {
 8000cc8:	b580      	push	{r7, lr}
 8000cca:	af00      	add	r7, sp, #0
	TM1638_DIO_SET(GPIO_PIN_SET);
 8000ccc:	2001      	movs	r0, #1
 8000cce:	f7ff ffe5 	bl	8000c9c <TM1638_DIO_SET>
}
 8000cd2:	bf00      	nop
 8000cd4:	bd80      	pop	{r7, pc}

08000cd6 <TM1638_SEND_BYTE>:

void TM1638_DIO_LOW() {
	TM1638_DIO_SET(GPIO_PIN_RESET);
}

void TM1638_SEND_BYTE(uint8_t byte) {
 8000cd6:	b580      	push	{r7, lr}
 8000cd8:	b084      	sub	sp, #16
 8000cda:	af00      	add	r7, sp, #0
 8000cdc:	4603      	mov	r3, r0
 8000cde:	71fb      	strb	r3, [r7, #7]
	// LSB_FIRST
	for (uint8_t i = 0; i < 8; i++)  {
 8000ce0:	2300      	movs	r3, #0
 8000ce2:	73fb      	strb	r3, [r7, #15]
 8000ce4:	e014      	b.n	8000d10 <TM1638_SEND_BYTE+0x3a>
		// send bit at index i
		TM1638_DIO_SET(!!(byte & (1 << i)));
 8000ce6:	79fa      	ldrb	r2, [r7, #7]
 8000ce8:	7bfb      	ldrb	r3, [r7, #15]
 8000cea:	fa42 f303 	asr.w	r3, r2, r3
 8000cee:	f003 0301 	and.w	r3, r3, #1
 8000cf2:	2b00      	cmp	r3, #0
 8000cf4:	bf14      	ite	ne
 8000cf6:	2301      	movne	r3, #1
 8000cf8:	2300      	moveq	r3, #0
 8000cfa:	b2db      	uxtb	r3, r3
 8000cfc:	4618      	mov	r0, r3
 8000cfe:	f7ff ffcd 	bl	8000c9c <TM1638_DIO_SET>

		// send pulse
		TM1638_CLK_HIGH();
 8000d02:	f7ff ffbd 	bl	8000c80 <TM1638_CLK_HIGH>
		TM1638_CLK_LOW();
 8000d06:	f7ff ffc2 	bl	8000c8e <TM1638_CLK_LOW>
	for (uint8_t i = 0; i < 8; i++)  {
 8000d0a:	7bfb      	ldrb	r3, [r7, #15]
 8000d0c:	3301      	adds	r3, #1
 8000d0e:	73fb      	strb	r3, [r7, #15]
 8000d10:	7bfb      	ldrb	r3, [r7, #15]
 8000d12:	2b07      	cmp	r3, #7
 8000d14:	d9e7      	bls.n	8000ce6 <TM1638_SEND_BYTE+0x10>
	}
}
 8000d16:	bf00      	nop
 8000d18:	bf00      	nop
 8000d1a:	3710      	adds	r7, #16
 8000d1c:	46bd      	mov	sp, r7
 8000d1e:	bd80      	pop	{r7, pc}

08000d20 <TM1638_GetDisplayConfigCommand>:

uint8_t TM1638_GetDisplayConfigCommand() {
 8000d20:	b480      	push	{r7}
 8000d22:	b083      	sub	sp, #12
 8000d24:	af00      	add	r7, sp, #0
	uint8_t byteToSend = TM1638_HEX_CMD_DISP;
 8000d26:	2380      	movs	r3, #128	; 0x80
 8000d28:	71fb      	strb	r3, [r7, #7]
	switch(displayState) {
 8000d2a:	4b26      	ldr	r3, [pc, #152]	; (8000dc4 <TM1638_GetDisplayConfigCommand+0xa4>)
 8000d2c:	781b      	ldrb	r3, [r3, #0]
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d006      	beq.n	8000d40 <TM1638_GetDisplayConfigCommand+0x20>
 8000d32:	2b01      	cmp	r3, #1
 8000d34:	d105      	bne.n	8000d42 <TM1638_GetDisplayConfigCommand+0x22>
		case DISPLAY_STATE_ON:
			byteToSend |= TM1638_HEX_CMD_DISP_ON;
 8000d36:	79fb      	ldrb	r3, [r7, #7]
 8000d38:	f043 0308 	orr.w	r3, r3, #8
 8000d3c:	71fb      	strb	r3, [r7, #7]
			break;
 8000d3e:	e000      	b.n	8000d42 <TM1638_GetDisplayConfigCommand+0x22>
		case DISPLAY_STATE_OFF:
			byteToSend |= TM1638_HEX_CMD_DISP_OFF;
			break;
 8000d40:	bf00      	nop
	}

	switch(displayBrightness) {
 8000d42:	4b21      	ldr	r3, [pc, #132]	; (8000dc8 <TM1638_GetDisplayConfigCommand+0xa8>)
 8000d44:	781b      	ldrb	r3, [r3, #0]
 8000d46:	2b07      	cmp	r3, #7
 8000d48:	d835      	bhi.n	8000db6 <TM1638_GetDisplayConfigCommand+0x96>
 8000d4a:	a201      	add	r2, pc, #4	; (adr r2, 8000d50 <TM1638_GetDisplayConfigCommand+0x30>)
 8000d4c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000d50:	08000db7 	.word	0x08000db7
 8000d54:	08000d71 	.word	0x08000d71
 8000d58:	08000d7b 	.word	0x08000d7b
 8000d5c:	08000d85 	.word	0x08000d85
 8000d60:	08000d8f 	.word	0x08000d8f
 8000d64:	08000d99 	.word	0x08000d99
 8000d68:	08000da3 	.word	0x08000da3
 8000d6c:	08000dad 	.word	0x08000dad
		case DISPLAY_BRIGHTNESS_LEVEL_0:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_0;
			break;
		case DISPLAY_BRIGHTNESS_LEVEL_1:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_1;
 8000d70:	79fb      	ldrb	r3, [r7, #7]
 8000d72:	f043 0301 	orr.w	r3, r3, #1
 8000d76:	71fb      	strb	r3, [r7, #7]
			break;
 8000d78:	e01d      	b.n	8000db6 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_2:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_2;
 8000d7a:	79fb      	ldrb	r3, [r7, #7]
 8000d7c:	f043 0302 	orr.w	r3, r3, #2
 8000d80:	71fb      	strb	r3, [r7, #7]
			break;
 8000d82:	e018      	b.n	8000db6 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_3:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_3;
 8000d84:	79fb      	ldrb	r3, [r7, #7]
 8000d86:	f043 0303 	orr.w	r3, r3, #3
 8000d8a:	71fb      	strb	r3, [r7, #7]
			break;
 8000d8c:	e013      	b.n	8000db6 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_4:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_4;
 8000d8e:	79fb      	ldrb	r3, [r7, #7]
 8000d90:	f043 0304 	orr.w	r3, r3, #4
 8000d94:	71fb      	strb	r3, [r7, #7]
			break;
 8000d96:	e00e      	b.n	8000db6 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_5:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_5;
 8000d98:	79fb      	ldrb	r3, [r7, #7]
 8000d9a:	f043 0305 	orr.w	r3, r3, #5
 8000d9e:	71fb      	strb	r3, [r7, #7]
			break;
 8000da0:	e009      	b.n	8000db6 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_6:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_6;
 8000da2:	79fb      	ldrb	r3, [r7, #7]
 8000da4:	f043 0306 	orr.w	r3, r3, #6
 8000da8:	71fb      	strb	r3, [r7, #7]
			break;
 8000daa:	e004      	b.n	8000db6 <TM1638_GetDisplayConfigCommand+0x96>
		case DISPLAY_BRIGHTNESS_LEVEL_7:
			byteToSend |= TM1638_HEX_CMD_DISP_BRIGHTNESS_7;
 8000dac:	79fb      	ldrb	r3, [r7, #7]
 8000dae:	f043 0307 	orr.w	r3, r3, #7
 8000db2:	71fb      	strb	r3, [r7, #7]
			break;
 8000db4:	bf00      	nop
	}

	return byteToSend;
 8000db6:	79fb      	ldrb	r3, [r7, #7]
}
 8000db8:	4618      	mov	r0, r3
 8000dba:	370c      	adds	r7, #12
 8000dbc:	46bd      	mov	sp, r7
 8000dbe:	bc80      	pop	{r7}
 8000dc0:	4770      	bx	lr
 8000dc2:	bf00      	nop
 8000dc4:	20000056 	.word	0x20000056
 8000dc8:	20000078 	.word	0x20000078

08000dcc <TM1638_GetDigitHexAt>:

uint8_t TM1638_GetDigitHexAt(uint8_t positionFromLeft) {
 8000dcc:	b480      	push	{r7}
 8000dce:	b085      	sub	sp, #20
 8000dd0:	af00      	add	r7, sp, #0
 8000dd2:	4603      	mov	r3, r0
 8000dd4:	71fb      	strb	r3, [r7, #7]
	if(positionFromLeft == 0 && numberToDisplay < 0) return TM1638_HEX_SIGN_MINUS;
 8000dd6:	79fb      	ldrb	r3, [r7, #7]
 8000dd8:	2b00      	cmp	r3, #0
 8000dda:	d105      	bne.n	8000de8 <TM1638_GetDigitHexAt+0x1c>
 8000ddc:	4b32      	ldr	r3, [pc, #200]	; (8000ea8 <TM1638_GetDigitHexAt+0xdc>)
 8000dde:	681b      	ldr	r3, [r3, #0]
 8000de0:	2b00      	cmp	r3, #0
 8000de2:	da01      	bge.n	8000de8 <TM1638_GetDigitHexAt+0x1c>
 8000de4:	2340      	movs	r3, #64	; 0x40
 8000de6:	e05a      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>

	int absNumberToDisplay = ABS(numberToDisplay);
 8000de8:	4b2f      	ldr	r3, [pc, #188]	; (8000ea8 <TM1638_GetDigitHexAt+0xdc>)
 8000dea:	681b      	ldr	r3, [r3, #0]
 8000dec:	2b00      	cmp	r3, #0
 8000dee:	bfb8      	it	lt
 8000df0:	425b      	neglt	r3, r3
 8000df2:	60fb      	str	r3, [r7, #12]
	for(int i = 7 - positionFromLeft; i > 0; --i) {
 8000df4:	79fb      	ldrb	r3, [r7, #7]
 8000df6:	f1c3 0307 	rsb	r3, r3, #7
 8000dfa:	60bb      	str	r3, [r7, #8]
 8000dfc:	e00a      	b.n	8000e14 <TM1638_GetDigitHexAt+0x48>
		absNumberToDisplay /= 10;
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	4a2a      	ldr	r2, [pc, #168]	; (8000eac <TM1638_GetDigitHexAt+0xe0>)
 8000e02:	fb82 1203 	smull	r1, r2, r2, r3
 8000e06:	1092      	asrs	r2, r2, #2
 8000e08:	17db      	asrs	r3, r3, #31
 8000e0a:	1ad3      	subs	r3, r2, r3
 8000e0c:	60fb      	str	r3, [r7, #12]
	for(int i = 7 - positionFromLeft; i > 0; --i) {
 8000e0e:	68bb      	ldr	r3, [r7, #8]
 8000e10:	3b01      	subs	r3, #1
 8000e12:	60bb      	str	r3, [r7, #8]
 8000e14:	68bb      	ldr	r3, [r7, #8]
 8000e16:	2b00      	cmp	r3, #0
 8000e18:	dcf1      	bgt.n	8000dfe <TM1638_GetDigitHexAt+0x32>
	}

	if(absNumberToDisplay > 0 || positionFromLeft == 7) {
 8000e1a:	68fb      	ldr	r3, [r7, #12]
 8000e1c:	2b00      	cmp	r3, #0
 8000e1e:	dc02      	bgt.n	8000e26 <TM1638_GetDigitHexAt+0x5a>
 8000e20:	79fb      	ldrb	r3, [r7, #7]
 8000e22:	2b07      	cmp	r3, #7
 8000e24:	d13a      	bne.n	8000e9c <TM1638_GetDigitHexAt+0xd0>
		switch(absNumberToDisplay %= 10) {
 8000e26:	68fa      	ldr	r2, [r7, #12]
 8000e28:	4b20      	ldr	r3, [pc, #128]	; (8000eac <TM1638_GetDigitHexAt+0xe0>)
 8000e2a:	fb83 1302 	smull	r1, r3, r3, r2
 8000e2e:	1099      	asrs	r1, r3, #2
 8000e30:	17d3      	asrs	r3, r2, #31
 8000e32:	1ac9      	subs	r1, r1, r3
 8000e34:	460b      	mov	r3, r1
 8000e36:	009b      	lsls	r3, r3, #2
 8000e38:	440b      	add	r3, r1
 8000e3a:	005b      	lsls	r3, r3, #1
 8000e3c:	1ad3      	subs	r3, r2, r3
 8000e3e:	60fb      	str	r3, [r7, #12]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	2b09      	cmp	r3, #9
 8000e44:	d82a      	bhi.n	8000e9c <TM1638_GetDigitHexAt+0xd0>
 8000e46:	a201      	add	r2, pc, #4	; (adr r2, 8000e4c <TM1638_GetDigitHexAt+0x80>)
 8000e48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8000e4c:	08000e75 	.word	0x08000e75
 8000e50:	08000e79 	.word	0x08000e79
 8000e54:	08000e7d 	.word	0x08000e7d
 8000e58:	08000e81 	.word	0x08000e81
 8000e5c:	08000e85 	.word	0x08000e85
 8000e60:	08000e89 	.word	0x08000e89
 8000e64:	08000e8d 	.word	0x08000e8d
 8000e68:	08000e91 	.word	0x08000e91
 8000e6c:	08000e95 	.word	0x08000e95
 8000e70:	08000e99 	.word	0x08000e99
			case 0: return TM1638_HEX_DIGIT_0;
 8000e74:	233f      	movs	r3, #63	; 0x3f
 8000e76:	e012      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 1: return TM1638_HEX_DIGIT_1;
 8000e78:	2306      	movs	r3, #6
 8000e7a:	e010      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 2: return TM1638_HEX_DIGIT_2;
 8000e7c:	235b      	movs	r3, #91	; 0x5b
 8000e7e:	e00e      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 3: return TM1638_HEX_DIGIT_3;
 8000e80:	234f      	movs	r3, #79	; 0x4f
 8000e82:	e00c      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 4: return TM1638_HEX_DIGIT_4;
 8000e84:	2366      	movs	r3, #102	; 0x66
 8000e86:	e00a      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 5: return TM1638_HEX_DIGIT_5;
 8000e88:	236d      	movs	r3, #109	; 0x6d
 8000e8a:	e008      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 6: return TM1638_HEX_DIGIT_6;
 8000e8c:	237d      	movs	r3, #125	; 0x7d
 8000e8e:	e006      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 7: return TM1638_HEX_DIGIT_7;
 8000e90:	2307      	movs	r3, #7
 8000e92:	e004      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 8: return TM1638_HEX_DIGIT_8;
 8000e94:	237f      	movs	r3, #127	; 0x7f
 8000e96:	e002      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
			case 9: return TM1638_HEX_DIGIT_9;
 8000e98:	236f      	movs	r3, #111	; 0x6f
 8000e9a:	e000      	b.n	8000e9e <TM1638_GetDigitHexAt+0xd2>
		}
	}

	return TM1638_HEX_SIGN_EMPTY;
 8000e9c:	2300      	movs	r3, #0
}
 8000e9e:	4618      	mov	r0, r3
 8000ea0:	3714      	adds	r7, #20
 8000ea2:	46bd      	mov	sp, r7
 8000ea4:	bc80      	pop	{r7}
 8000ea6:	4770      	bx	lr
 8000ea8:	20000074 	.word	0x20000074
 8000eac:	66666667 	.word	0x66666667

08000eb0 <TM1638_GetLedHexAt>:

uint8_t TM1638_GetLedHexAt(uint8_t positionFromLeft) {
 8000eb0:	b480      	push	{r7}
 8000eb2:	b083      	sub	sp, #12
 8000eb4:	af00      	add	r7, sp, #0
 8000eb6:	4603      	mov	r3, r0
 8000eb8:	71fb      	strb	r3, [r7, #7]
	if(positionFromLeft > 7 )
 8000eba:	79fb      	ldrb	r3, [r7, #7]
 8000ebc:	2b07      	cmp	r3, #7
 8000ebe:	d901      	bls.n	8000ec4 <TM1638_GetLedHexAt+0x14>
		return TM1638_HEX_LED_OFF;
 8000ec0:	2300      	movs	r3, #0
 8000ec2:	e007      	b.n	8000ed4 <TM1638_GetLedHexAt+0x24>
	else
		return ledStatuses[positionFromLeft] == LED_ON ? TM1638_HEX_LED_ON : TM1638_HEX_LED_OFF;
 8000ec4:	79fb      	ldrb	r3, [r7, #7]
 8000ec6:	4a06      	ldr	r2, [pc, #24]	; (8000ee0 <TM1638_GetLedHexAt+0x30>)
 8000ec8:	5cd3      	ldrb	r3, [r2, r3]
 8000eca:	2b01      	cmp	r3, #1
 8000ecc:	d101      	bne.n	8000ed2 <TM1638_GetLedHexAt+0x22>
 8000ece:	23ff      	movs	r3, #255	; 0xff
 8000ed0:	e000      	b.n	8000ed4 <TM1638_GetLedHexAt+0x24>
 8000ed2:	2300      	movs	r3, #0
}
 8000ed4:	4618      	mov	r0, r3
 8000ed6:	370c      	adds	r7, #12
 8000ed8:	46bd      	mov	sp, r7
 8000eda:	bc80      	pop	{r7}
 8000edc:	4770      	bx	lr
 8000ede:	bf00      	nop
 8000ee0:	20000060 	.word	0x20000060

08000ee4 <TM1638_SendDisplayCommand>:

void TM1638_SendDisplayCommand() {
 8000ee4:	b580      	push	{r7, lr}
 8000ee6:	b082      	sub	sp, #8
 8000ee8:	af00      	add	r7, sp, #0
	TM1638_SEND_BYTE(TM1638_GetDisplayConfigCommand());
 8000eea:	f7ff ff19 	bl	8000d20 <TM1638_GetDisplayConfigCommand>
 8000eee:	4603      	mov	r3, r0
 8000ef0:	4618      	mov	r0, r3
 8000ef2:	f7ff fef0 	bl	8000cd6 <TM1638_SEND_BYTE>

	for (uint8_t i = 0; i < 8; ++i) {
 8000ef6:	2300      	movs	r3, #0
 8000ef8:	71fb      	strb	r3, [r7, #7]
 8000efa:	e012      	b.n	8000f22 <TM1638_SendDisplayCommand+0x3e>
		TM1638_SEND_BYTE(TM1638_GetDigitHexAt(i));
 8000efc:	79fb      	ldrb	r3, [r7, #7]
 8000efe:	4618      	mov	r0, r3
 8000f00:	f7ff ff64 	bl	8000dcc <TM1638_GetDigitHexAt>
 8000f04:	4603      	mov	r3, r0
 8000f06:	4618      	mov	r0, r3
 8000f08:	f7ff fee5 	bl	8000cd6 <TM1638_SEND_BYTE>
		TM1638_SEND_BYTE(TM1638_GetLedHexAt(i));
 8000f0c:	79fb      	ldrb	r3, [r7, #7]
 8000f0e:	4618      	mov	r0, r3
 8000f10:	f7ff ffce 	bl	8000eb0 <TM1638_GetLedHexAt>
 8000f14:	4603      	mov	r3, r0
 8000f16:	4618      	mov	r0, r3
 8000f18:	f7ff fedd 	bl	8000cd6 <TM1638_SEND_BYTE>
	for (uint8_t i = 0; i < 8; ++i) {
 8000f1c:	79fb      	ldrb	r3, [r7, #7]
 8000f1e:	3301      	adds	r3, #1
 8000f20:	71fb      	strb	r3, [r7, #7]
 8000f22:	79fb      	ldrb	r3, [r7, #7]
 8000f24:	2b07      	cmp	r3, #7
 8000f26:	d9e9      	bls.n	8000efc <TM1638_SendDisplayCommand+0x18>
	}
}
 8000f28:	bf00      	nop
 8000f2a:	bf00      	nop
 8000f2c:	3708      	adds	r7, #8
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	bd80      	pop	{r7, pc}
	...

08000f34 <TM1638_SendDataCommand>:

void TM1638_SendDataCommand() {
 8000f34:	b580      	push	{r7, lr}
 8000f36:	b082      	sub	sp, #8
 8000f38:	af00      	add	r7, sp, #0
	uint8_t byteToSend = TM1638_HEX_CMD_DATA;
 8000f3a:	2340      	movs	r3, #64	; 0x40
 8000f3c:	71fb      	strb	r3, [r7, #7]
	switch(dataAccessMode) {
 8000f3e:	4b16      	ldr	r3, [pc, #88]	; (8000f98 <TM1638_SendDataCommand+0x64>)
 8000f40:	781b      	ldrb	r3, [r3, #0]
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d006      	beq.n	8000f54 <TM1638_SendDataCommand+0x20>
 8000f46:	2b01      	cmp	r3, #1
 8000f48:	d105      	bne.n	8000f56 <TM1638_SendDataCommand+0x22>
		case DATA_ACCESS_WRITE:
			byteToSend |= TM1638_HEX_CMD_DATA_WRITE_MODE;
			break;
		case DATA_ACCESS_READ:
			byteToSend |= TM1638_HEX_CMD_DATA_READ_MODE;
 8000f4a:	79fb      	ldrb	r3, [r7, #7]
 8000f4c:	f043 0302 	orr.w	r3, r3, #2
 8000f50:	71fb      	strb	r3, [r7, #7]
			break;
 8000f52:	e000      	b.n	8000f56 <TM1638_SendDataCommand+0x22>
			break;
 8000f54:	bf00      	nop
	}

	switch(dataAddressMode) {
 8000f56:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <TM1638_SendDataCommand+0x68>)
 8000f58:	781b      	ldrb	r3, [r3, #0]
 8000f5a:	2b00      	cmp	r3, #0
 8000f5c:	d006      	beq.n	8000f6c <TM1638_SendDataCommand+0x38>
 8000f5e:	2b01      	cmp	r3, #1
 8000f60:	d105      	bne.n	8000f6e <TM1638_SendDataCommand+0x3a>
		case DATA_ADDRESS_AUTO:
			byteToSend |= TM1638_HEX_CMD_DATA_AUTO_ADDR_MODE;
			break;
		case DATA_ADDRESS_FIX:
			byteToSend |= TM1638_HEX_CMD_DATA_FIX_ADDR_MODE;
 8000f62:	79fb      	ldrb	r3, [r7, #7]
 8000f64:	f043 0304 	orr.w	r3, r3, #4
 8000f68:	71fb      	strb	r3, [r7, #7]
			break;
 8000f6a:	e000      	b.n	8000f6e <TM1638_SendDataCommand+0x3a>
			break;
 8000f6c:	bf00      	nop
	}

	switch(dataOperationMode) {
 8000f6e:	4b0c      	ldr	r3, [pc, #48]	; (8000fa0 <TM1638_SendDataCommand+0x6c>)
 8000f70:	781b      	ldrb	r3, [r3, #0]
 8000f72:	2b00      	cmp	r3, #0
 8000f74:	d006      	beq.n	8000f84 <TM1638_SendDataCommand+0x50>
 8000f76:	2b01      	cmp	r3, #1
 8000f78:	d105      	bne.n	8000f86 <TM1638_SendDataCommand+0x52>
		case DATA_OPERATION_NORMAL:
			byteToSend |= TM1638_HEX_CMD_DATA_NORMAL_MODE;
			break;
		case DATA_OPERATION_TEST:
			byteToSend |= TM1638_HEX_CMD_DATA_TEST_MODE;
 8000f7a:	79fb      	ldrb	r3, [r7, #7]
 8000f7c:	f043 0308 	orr.w	r3, r3, #8
 8000f80:	71fb      	strb	r3, [r7, #7]
			break;
 8000f82:	e000      	b.n	8000f86 <TM1638_SendDataCommand+0x52>
			break;
 8000f84:	bf00      	nop
	}

	TM1638_SEND_BYTE(byteToSend);
 8000f86:	79fb      	ldrb	r3, [r7, #7]
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f7ff fea4 	bl	8000cd6 <TM1638_SEND_BYTE>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}
 8000f96:	bf00      	nop
 8000f98:	2000005c 	.word	0x2000005c
 8000f9c:	20000052 	.word	0x20000052
 8000fa0:	20000079 	.word	0x20000079

08000fa4 <TM1638_UpdateDisplay>:

void TM1638_UpdateDisplay() {
 8000fa4:	b580      	push	{r7, lr}
 8000fa6:	b082      	sub	sp, #8
 8000fa8:	af00      	add	r7, sp, #0

	TM1638_DataAccessMode _dataAccessMode = dataAccessMode;
 8000faa:	4b15      	ldr	r3, [pc, #84]	; (8001000 <TM1638_UpdateDisplay+0x5c>)
 8000fac:	781b      	ldrb	r3, [r3, #0]
 8000fae:	71fb      	strb	r3, [r7, #7]
	TM1638_DataAddressMode _dataAddressMode = dataAddressMode;
 8000fb0:	4b14      	ldr	r3, [pc, #80]	; (8001004 <TM1638_UpdateDisplay+0x60>)
 8000fb2:	781b      	ldrb	r3, [r3, #0]
 8000fb4:	71bb      	strb	r3, [r7, #6]
	TM1638_DataOperationMode _dataOperationMode = dataOperationMode;
 8000fb6:	4b14      	ldr	r3, [pc, #80]	; (8001008 <TM1638_UpdateDisplay+0x64>)
 8000fb8:	781b      	ldrb	r3, [r3, #0]
 8000fba:	717b      	strb	r3, [r7, #5]

	dataAccessMode = DATA_ACCESS_WRITE;
 8000fbc:	4b10      	ldr	r3, [pc, #64]	; (8001000 <TM1638_UpdateDisplay+0x5c>)
 8000fbe:	2200      	movs	r2, #0
 8000fc0:	701a      	strb	r2, [r3, #0]
	dataAddressMode = DATA_ADDRESS_AUTO;
 8000fc2:	4b10      	ldr	r3, [pc, #64]	; (8001004 <TM1638_UpdateDisplay+0x60>)
 8000fc4:	2200      	movs	r2, #0
 8000fc6:	701a      	strb	r2, [r3, #0]
	dataOperationMode = DATA_OPERATION_NORMAL;
 8000fc8:	4b0f      	ldr	r3, [pc, #60]	; (8001008 <TM1638_UpdateDisplay+0x64>)
 8000fca:	2200      	movs	r2, #0
 8000fcc:	701a      	strb	r2, [r3, #0]

	TM1638_STB_LOW();
 8000fce:	f7ff fe3a 	bl	8000c46 <TM1638_STB_LOW>
	TM1638_SendDataCommand();
 8000fd2:	f7ff ffaf 	bl	8000f34 <TM1638_SendDataCommand>
	TM1638_STB_HIGH();
 8000fd6:	f7ff fe2f 	bl	8000c38 <TM1638_STB_HIGH>

	TM1638_STB_LOW();
 8000fda:	f7ff fe34 	bl	8000c46 <TM1638_STB_LOW>
	TM1638_SendDisplayCommand();
 8000fde:	f7ff ff81 	bl	8000ee4 <TM1638_SendDisplayCommand>
	TM1638_STB_HIGH();
 8000fe2:	f7ff fe29 	bl	8000c38 <TM1638_STB_HIGH>

	dataAccessMode = _dataAccessMode;
 8000fe6:	4a06      	ldr	r2, [pc, #24]	; (8001000 <TM1638_UpdateDisplay+0x5c>)
 8000fe8:	79fb      	ldrb	r3, [r7, #7]
 8000fea:	7013      	strb	r3, [r2, #0]
	dataAddressMode = _dataAddressMode;
 8000fec:	4a05      	ldr	r2, [pc, #20]	; (8001004 <TM1638_UpdateDisplay+0x60>)
 8000fee:	79bb      	ldrb	r3, [r7, #6]
 8000ff0:	7013      	strb	r3, [r2, #0]
	dataOperationMode = _dataOperationMode;
 8000ff2:	4a05      	ldr	r2, [pc, #20]	; (8001008 <TM1638_UpdateDisplay+0x64>)
 8000ff4:	797b      	ldrb	r3, [r7, #5]
 8000ff6:	7013      	strb	r3, [r2, #0]
}
 8000ff8:	bf00      	nop
 8000ffa:	3708      	adds	r7, #8
 8000ffc:	46bd      	mov	sp, r7
 8000ffe:	bd80      	pop	{r7, pc}
 8001000:	2000005c 	.word	0x2000005c
 8001004:	20000052 	.word	0x20000052
 8001008:	20000079 	.word	0x20000079

0800100c <TM1638_Init>:
	uint16_t STB_PIN,
	GPIO_TypeDef* CLK_PORT,
	uint16_t CLK_PIN,
	GPIO_TypeDef* DIO_PORT,
	uint16_t DIO_PIN
) {
 800100c:	b580      	push	{r7, lr}
 800100e:	b086      	sub	sp, #24
 8001010:	af00      	add	r7, sp, #0
 8001012:	60f8      	str	r0, [r7, #12]
 8001014:	607a      	str	r2, [r7, #4]
 8001016:	461a      	mov	r2, r3
 8001018:	460b      	mov	r3, r1
 800101a:	817b      	strh	r3, [r7, #10]
 800101c:	4613      	mov	r3, r2
 800101e:	813b      	strh	r3, [r7, #8]
	TM1638_STB_PORT = STB_PORT;
 8001020:	4a1f      	ldr	r2, [pc, #124]	; (80010a0 <TM1638_Init+0x94>)
 8001022:	68fb      	ldr	r3, [r7, #12]
 8001024:	6013      	str	r3, [r2, #0]
	TM1638_STB_PIN = STB_PIN;
 8001026:	4a1f      	ldr	r2, [pc, #124]	; (80010a4 <TM1638_Init+0x98>)
 8001028:	897b      	ldrh	r3, [r7, #10]
 800102a:	8013      	strh	r3, [r2, #0]
	TM1638_CLK_PORT = CLK_PORT;
 800102c:	4a1e      	ldr	r2, [pc, #120]	; (80010a8 <TM1638_Init+0x9c>)
 800102e:	687b      	ldr	r3, [r7, #4]
 8001030:	6013      	str	r3, [r2, #0]
	TM1638_CLK_PIN = CLK_PIN;
 8001032:	4a1e      	ldr	r2, [pc, #120]	; (80010ac <TM1638_Init+0xa0>)
 8001034:	893b      	ldrh	r3, [r7, #8]
 8001036:	8013      	strh	r3, [r2, #0]
	TM1638_DIO_PORT = DIO_PORT;
 8001038:	4a1d      	ldr	r2, [pc, #116]	; (80010b0 <TM1638_Init+0xa4>)
 800103a:	6a3b      	ldr	r3, [r7, #32]
 800103c:	6013      	str	r3, [r2, #0]
	TM1638_DIO_PIN = DIO_PIN;
 800103e:	4a1d      	ldr	r2, [pc, #116]	; (80010b4 <TM1638_Init+0xa8>)
 8001040:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001042:	8013      	strh	r3, [r2, #0]

	displayBrightness = DISPLAY_BRIGHTNESS_LEVEL_0;
 8001044:	4b1c      	ldr	r3, [pc, #112]	; (80010b8 <TM1638_Init+0xac>)
 8001046:	2200      	movs	r2, #0
 8001048:	701a      	strb	r2, [r3, #0]
	displayState = DISPLAY_STATE_OFF;
 800104a:	4b1c      	ldr	r3, [pc, #112]	; (80010bc <TM1638_Init+0xb0>)
 800104c:	2200      	movs	r2, #0
 800104e:	701a      	strb	r2, [r3, #0]
	dataAccessMode = DATA_ACCESS_WRITE;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <TM1638_Init+0xb4>)
 8001052:	2200      	movs	r2, #0
 8001054:	701a      	strb	r2, [r3, #0]
	dataAddressMode = DATA_ADDRESS_AUTO;
 8001056:	4b1b      	ldr	r3, [pc, #108]	; (80010c4 <TM1638_Init+0xb8>)
 8001058:	2200      	movs	r2, #0
 800105a:	701a      	strb	r2, [r3, #0]
	dataOperationMode = DATA_OPERATION_NORMAL;
 800105c:	4b1a      	ldr	r3, [pc, #104]	; (80010c8 <TM1638_Init+0xbc>)
 800105e:	2200      	movs	r2, #0
 8001060:	701a      	strb	r2, [r3, #0]

	numberToDisplay = 0;
 8001062:	4b1a      	ldr	r3, [pc, #104]	; (80010cc <TM1638_Init+0xc0>)
 8001064:	2200      	movs	r2, #0
 8001066:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < 8; ++i) {
 8001068:	2300      	movs	r3, #0
 800106a:	75fb      	strb	r3, [r7, #23]
 800106c:	e006      	b.n	800107c <TM1638_Init+0x70>
		ledStatuses[i] = LED_OFF;
 800106e:	7dfb      	ldrb	r3, [r7, #23]
 8001070:	4a17      	ldr	r2, [pc, #92]	; (80010d0 <TM1638_Init+0xc4>)
 8001072:	2100      	movs	r1, #0
 8001074:	54d1      	strb	r1, [r2, r3]
	for (uint8_t i = 0; i < 8; ++i) {
 8001076:	7dfb      	ldrb	r3, [r7, #23]
 8001078:	3301      	adds	r3, #1
 800107a:	75fb      	strb	r3, [r7, #23]
 800107c:	7dfb      	ldrb	r3, [r7, #23]
 800107e:	2b07      	cmp	r3, #7
 8001080:	d9f5      	bls.n	800106e <TM1638_Init+0x62>
// TODO
//	TM1638_CLK_OUTPUT();
//	TM1638_STB_OUTPUT();
//	TM1638_DIO_OUTPUT();

	TM1638_CLK_HIGH();
 8001082:	f7ff fdfd 	bl	8000c80 <TM1638_CLK_HIGH>
	TM1638_STB_HIGH();
 8001086:	f7ff fdd7 	bl	8000c38 <TM1638_STB_HIGH>
	TM1638_DIO_HIGH();
 800108a:	f7ff fe1d 	bl	8000cc8 <TM1638_DIO_HIGH>

	TM1638_SendDataCommand();
 800108e:	f7ff ff51 	bl	8000f34 <TM1638_SendDataCommand>
	TM1638_UpdateDisplay();
 8001092:	f7ff ff87 	bl	8000fa4 <TM1638_UpdateDisplay>
}
 8001096:	bf00      	nop
 8001098:	3718      	adds	r7, #24
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	2000006c 	.word	0x2000006c
 80010a4:	20000050 	.word	0x20000050
 80010a8:	20000070 	.word	0x20000070
 80010ac:	20000054 	.word	0x20000054
 80010b0:	20000058 	.word	0x20000058
 80010b4:	20000068 	.word	0x20000068
 80010b8:	20000078 	.word	0x20000078
 80010bc:	20000056 	.word	0x20000056
 80010c0:	2000005c 	.word	0x2000005c
 80010c4:	20000052 	.word	0x20000052
 80010c8:	20000079 	.word	0x20000079
 80010cc:	20000074 	.word	0x20000074
 80010d0:	20000060 	.word	0x20000060

080010d4 <TM1638_SetDisplayBrightness>:

void TM1638_SetDisplayBrightness(TM1638_DisplayBrightness brightness) {
 80010d4:	b580      	push	{r7, lr}
 80010d6:	b082      	sub	sp, #8
 80010d8:	af00      	add	r7, sp, #0
 80010da:	4603      	mov	r3, r0
 80010dc:	71fb      	strb	r3, [r7, #7]
	displayBrightness = brightness;
 80010de:	4a04      	ldr	r2, [pc, #16]	; (80010f0 <TM1638_SetDisplayBrightness+0x1c>)
 80010e0:	79fb      	ldrb	r3, [r7, #7]
 80010e2:	7013      	strb	r3, [r2, #0]
	TM1638_UpdateDisplay();
 80010e4:	f7ff ff5e 	bl	8000fa4 <TM1638_UpdateDisplay>
}
 80010e8:	bf00      	nop
 80010ea:	3708      	adds	r7, #8
 80010ec:	46bd      	mov	sp, r7
 80010ee:	bd80      	pop	{r7, pc}
 80010f0:	20000078 	.word	0x20000078

080010f4 <TM1638_SetDisplayState>:

void TM1638_SetDisplayState(TM1638_DisplayState state) {
 80010f4:	b580      	push	{r7, lr}
 80010f6:	b082      	sub	sp, #8
 80010f8:	af00      	add	r7, sp, #0
 80010fa:	4603      	mov	r3, r0
 80010fc:	71fb      	strb	r3, [r7, #7]
	displayState = state;
 80010fe:	4a04      	ldr	r2, [pc, #16]	; (8001110 <TM1638_SetDisplayState+0x1c>)
 8001100:	79fb      	ldrb	r3, [r7, #7]
 8001102:	7013      	strb	r3, [r2, #0]
	TM1638_UpdateDisplay();
 8001104:	f7ff ff4e 	bl	8000fa4 <TM1638_UpdateDisplay>
}
 8001108:	bf00      	nop
 800110a:	3708      	adds	r7, #8
 800110c:	46bd      	mov	sp, r7
 800110e:	bd80      	pop	{r7, pc}
 8001110:	20000056 	.word	0x20000056

08001114 <TM1638_SetNumberToDisplay>:

void TM1638_SetNumberToDisplay(int number) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b082      	sub	sp, #8
 8001118:	af00      	add	r7, sp, #0
 800111a:	6078      	str	r0, [r7, #4]
	numberToDisplay = number;
 800111c:	4a04      	ldr	r2, [pc, #16]	; (8001130 <TM1638_SetNumberToDisplay+0x1c>)
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	6013      	str	r3, [r2, #0]
	TM1638_UpdateDisplay();
 8001122:	f7ff ff3f 	bl	8000fa4 <TM1638_UpdateDisplay>
}
 8001126:	bf00      	nop
 8001128:	3708      	adds	r7, #8
 800112a:	46bd      	mov	sp, r7
 800112c:	bd80      	pop	{r7, pc}
 800112e:	bf00      	nop
 8001130:	20000074 	.word	0x20000074

08001134 <TM1638_SetLedStatus>:

void TM1638_SetLedStatus(uint8_t position, TM1638_LedStatus status) {
 8001134:	b580      	push	{r7, lr}
 8001136:	b082      	sub	sp, #8
 8001138:	af00      	add	r7, sp, #0
 800113a:	4603      	mov	r3, r0
 800113c:	460a      	mov	r2, r1
 800113e:	71fb      	strb	r3, [r7, #7]
 8001140:	4613      	mov	r3, r2
 8001142:	71bb      	strb	r3, [r7, #6]
	if(position < 8) {
 8001144:	79fb      	ldrb	r3, [r7, #7]
 8001146:	2b07      	cmp	r3, #7
 8001148:	d805      	bhi.n	8001156 <TM1638_SetLedStatus+0x22>
		ledStatuses[position] = status;
 800114a:	79fb      	ldrb	r3, [r7, #7]
 800114c:	4904      	ldr	r1, [pc, #16]	; (8001160 <TM1638_SetLedStatus+0x2c>)
 800114e:	79ba      	ldrb	r2, [r7, #6]
 8001150:	54ca      	strb	r2, [r1, r3]
		TM1638_UpdateDisplay();
 8001152:	f7ff ff27 	bl	8000fa4 <TM1638_UpdateDisplay>
	}
}
 8001156:	bf00      	nop
 8001158:	3708      	adds	r7, #8
 800115a:	46bd      	mov	sp, r7
 800115c:	bd80      	pop	{r7, pc}
 800115e:	bf00      	nop
 8001160:	20000060 	.word	0x20000060
 8001164:	00000000 	.word	0x00000000

08001168 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001168:	b580      	push	{r7, lr}
 800116a:	b08c      	sub	sp, #48	; 0x30
 800116c:	af02      	add	r7, sp, #8
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800116e:	f000 fa75 	bl	800165c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001172:	f000 f8a5 	bl	80012c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001176:	f000 f90f 	bl	8001398 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800117a:	f000 f8e3 	bl	8001344 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */
  TM1638_Init(
 800117e:	2308      	movs	r3, #8
 8001180:	9301      	str	r3, [sp, #4]
 8001182:	4b4d      	ldr	r3, [pc, #308]	; (80012b8 <main+0x150>)
 8001184:	9300      	str	r3, [sp, #0]
 8001186:	2301      	movs	r3, #1
 8001188:	4a4b      	ldr	r2, [pc, #300]	; (80012b8 <main+0x150>)
 800118a:	2102      	movs	r1, #2
 800118c:	484a      	ldr	r0, [pc, #296]	; (80012b8 <main+0x150>)
 800118e:	f7ff ff3d 	bl	800100c <TM1638_Init>
	  DISP_CLK_Pin,
	  DISP_DIO_GPIO_Port,
	  DISP_DIO_Pin
  );

  TM1638_SetDisplayBrightness(DISPLAY_BRIGHTNESS_LEVEL_1);
 8001192:	2001      	movs	r0, #1
 8001194:	f7ff ff9e 	bl	80010d4 <TM1638_SetDisplayBrightness>
  TM1638_SetDisplayState(DISPLAY_STATE_ON);
 8001198:	2001      	movs	r0, #1
 800119a:	f7ff ffab 	bl	80010f4 <TM1638_SetDisplayState>

  TM1638_SetLedStatus(0, LED_ON);
 800119e:	2101      	movs	r1, #1
 80011a0:	2000      	movs	r0, #0
 80011a2:	f7ff ffc7 	bl	8001134 <TM1638_SetLedStatus>
  TM1638_SetLedStatus(1, LED_ON);
 80011a6:	2101      	movs	r1, #1
 80011a8:	2001      	movs	r0, #1
 80011aa:	f7ff ffc3 	bl	8001134 <TM1638_SetLedStatus>

  HX711_Init(
 80011ae:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80011b2:	4a41      	ldr	r2, [pc, #260]	; (80012b8 <main+0x150>)
 80011b4:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80011b8:	483f      	ldr	r0, [pc, #252]	; (80012b8 <main+0x150>)
 80011ba:	f7ff fc61 	bl	8000a80 <HX711_Init>
      HX711_SCK_Pin,
	  HX711_DT_GPIO_Port,
	  HX711_DT_Pin
  );

  double shift = 0;
 80011be:	f04f 0200 	mov.w	r2, #0
 80011c2:	f04f 0300 	mov.w	r3, #0
 80011c6:	e9c7 2308 	strd	r2, r3, [r7, #32]
  double coeff = 1;
 80011ca:	f04f 0200 	mov.w	r2, #0
 80011ce:	4b3b      	ldr	r3, [pc, #236]	; (80012bc <main+0x154>)
 80011d0:	e9c7 2306 	strd	r2, r3, [r7, #24]
  HX711_SetGainLevel(GAIN_128);
 80011d4:	2000      	movs	r0, #0
 80011d6:	f7ff fc97 	bl	8000b08 <HX711_SetGainLevel>
  HX711_Calibrate(shift, coeff);
 80011da:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80011de:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 80011e2:	f7ff fca7 	bl	8000b34 <HX711_Calibrate>
  HX711_PowerUp();
 80011e6:	f7ff fc78 	bl	8000ada <HX711_PowerUp>

  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) { //While blue button not pushed
 80011ea:	e00b      	b.n	8001204 <main+0x9c>
	  double value = HX711_ReadValue();
 80011ec:	f7ff fcbc 	bl	8000b68 <HX711_ReadValue>
 80011f0:	e9c7 0100 	strd	r0, r1, [r7]
	  TM1638_SetNumberToDisplay(value);
 80011f4:	e9d7 0100 	ldrd	r0, r1, [r7]
 80011f8:	f7ff fb78 	bl	80008ec <__aeabi_d2iz>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4618      	mov	r0, r3
 8001200:	f7ff ff88 	bl	8001114 <TM1638_SetNumberToDisplay>
  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) { //While blue button not pushed
 8001204:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001208:	482b      	ldr	r0, [pc, #172]	; (80012b8 <main+0x150>)
 800120a:	f000 fd3f 	bl	8001c8c <HAL_GPIO_ReadPin>
 800120e:	4603      	mov	r3, r0
 8001210:	2b01      	cmp	r3, #1
 8001212:	d0eb      	beq.n	80011ec <main+0x84>
  }

  shift = HX711_ReadAverageValue(10);
 8001214:	200a      	movs	r0, #10
 8001216:	f7ff fcc7 	bl	8000ba8 <HX711_ReadAverageValue>
 800121a:	e9c7 0108 	strd	r0, r1, [r7, #32]
  HX711_Calibrate(shift, coeff);
 800121e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001222:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001226:	f7ff fc85 	bl	8000b34 <HX711_Calibrate>
  TM1638_SetLedStatus(1, LED_OFF);
 800122a:	2100      	movs	r1, #0
 800122c:	2001      	movs	r0, #1
 800122e:	f7ff ff81 	bl	8001134 <TM1638_SetLedStatus>

  HAL_Delay(1000);
 8001232:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001236:	f000 fa73 	bl	8001720 <HAL_Delay>

  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) { //While blue button not pushed
 800123a:	e00b      	b.n	8001254 <main+0xec>
	  double value = HX711_ReadValue();
 800123c:	f7ff fc94 	bl	8000b68 <HX711_ReadValue>
 8001240:	e9c7 0102 	strd	r0, r1, [r7, #8]
	  TM1638_SetNumberToDisplay(value);
 8001244:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001248:	f7ff fb50 	bl	80008ec <__aeabi_d2iz>
 800124c:	4603      	mov	r3, r0
 800124e:	4618      	mov	r0, r3
 8001250:	f7ff ff60 	bl	8001114 <TM1638_SetNumberToDisplay>
  while(HAL_GPIO_ReadPin(B1_GPIO_Port, B1_Pin) == GPIO_PIN_SET) { //While blue button not pushed
 8001254:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8001258:	4817      	ldr	r0, [pc, #92]	; (80012b8 <main+0x150>)
 800125a:	f000 fd17 	bl	8001c8c <HAL_GPIO_ReadPin>
 800125e:	4603      	mov	r3, r0
 8001260:	2b01      	cmp	r3, #1
 8001262:	d0eb      	beq.n	800123c <main+0xd4>
  }

  coeff = 2353 / HX711_ReadAverageValue(10);
 8001264:	200a      	movs	r0, #10
 8001266:	f7ff fc9f 	bl	8000ba8 <HX711_ReadAverageValue>
 800126a:	4602      	mov	r2, r0
 800126c:	460b      	mov	r3, r1
 800126e:	a110      	add	r1, pc, #64	; (adr r1, 80012b0 <main+0x148>)
 8001270:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001274:	f7ff fa52 	bl	800071c <__aeabi_ddiv>
 8001278:	4602      	mov	r2, r0
 800127a:	460b      	mov	r3, r1
 800127c:	e9c7 2306 	strd	r2, r3, [r7, #24]
  HX711_Calibrate(shift, coeff);
 8001280:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001284:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8001288:	f7ff fc54 	bl	8000b34 <HX711_Calibrate>
  TM1638_SetLedStatus(0, LED_OFF);
 800128c:	2100      	movs	r1, #0
 800128e:	2000      	movs	r0, #0
 8001290:	f7ff ff50 	bl	8001134 <TM1638_SetLedStatus>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  double value = HX711_ReadAverageValue(10);
 8001294:	200a      	movs	r0, #10
 8001296:	f7ff fc87 	bl	8000ba8 <HX711_ReadAverageValue>
 800129a:	e9c7 0104 	strd	r0, r1, [r7, #16]
	  TM1638_SetNumberToDisplay(value);
 800129e:	e9d7 0104 	ldrd	r0, r1, [r7, #16]
 80012a2:	f7ff fb23 	bl	80008ec <__aeabi_d2iz>
 80012a6:	4603      	mov	r3, r0
 80012a8:	4618      	mov	r0, r3
 80012aa:	f7ff ff33 	bl	8001114 <TM1638_SetNumberToDisplay>
  while (1) {
 80012ae:	e7f1      	b.n	8001294 <main+0x12c>
 80012b0:	00000000 	.word	0x00000000
 80012b4:	40a26200 	.word	0x40a26200
 80012b8:	40011000 	.word	0x40011000
 80012bc:	3ff00000 	.word	0x3ff00000

080012c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b090      	sub	sp, #64	; 0x40
 80012c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80012c6:	f107 0318 	add.w	r3, r7, #24
 80012ca:	2228      	movs	r2, #40	; 0x28
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f001 fa48 	bl	8002764 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]
 80012dc:	609a      	str	r2, [r3, #8]
 80012de:	60da      	str	r2, [r3, #12]
 80012e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80012e2:	2302      	movs	r3, #2
 80012e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80012e6:	2301      	movs	r3, #1
 80012e8:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80012ea:	2310      	movs	r3, #16
 80012ec:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80012ee:	2302      	movs	r3, #2
 80012f0:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80012f2:	2300      	movs	r3, #0
 80012f4:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80012f6:	f44f 1360 	mov.w	r3, #3670016	; 0x380000
 80012fa:	63fb      	str	r3, [r7, #60]	; 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80012fc:	f107 0318 	add.w	r3, r7, #24
 8001300:	4618      	mov	r0, r3
 8001302:	f000 fd15 	bl	8001d30 <HAL_RCC_OscConfig>
 8001306:	4603      	mov	r3, r0
 8001308:	2b00      	cmp	r3, #0
 800130a:	d001      	beq.n	8001310 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800130c:	f000 f8d4 	bl	80014b8 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001310:	230f      	movs	r3, #15
 8001312:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001314:	2302      	movs	r3, #2
 8001316:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001318:	2300      	movs	r3, #0
 800131a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800131c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001320:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001322:	2300      	movs	r3, #0
 8001324:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001326:	1d3b      	adds	r3, r7, #4
 8001328:	2102      	movs	r1, #2
 800132a:	4618      	mov	r0, r3
 800132c:	f000 ff80 	bl	8002230 <HAL_RCC_ClockConfig>
 8001330:	4603      	mov	r3, r0
 8001332:	2b00      	cmp	r3, #0
 8001334:	d001      	beq.n	800133a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001336:	f000 f8bf 	bl	80014b8 <Error_Handler>
  }
}
 800133a:	bf00      	nop
 800133c:	3740      	adds	r7, #64	; 0x40
 800133e:	46bd      	mov	sp, r7
 8001340:	bd80      	pop	{r7, pc}
	...

08001344 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001344:	b580      	push	{r7, lr}
 8001346:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_Init 0 */
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */
  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001348:	4b11      	ldr	r3, [pc, #68]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800134a:	4a12      	ldr	r2, [pc, #72]	; (8001394 <MX_USART2_UART_Init+0x50>)
 800134c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800134e:	4b10      	ldr	r3, [pc, #64]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001354:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001356:	4b0e      	ldr	r3, [pc, #56]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001358:	2200      	movs	r2, #0
 800135a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800135c:	4b0c      	ldr	r3, [pc, #48]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800135e:	2200      	movs	r2, #0
 8001360:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001362:	4b0b      	ldr	r3, [pc, #44]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001364:	2200      	movs	r2, #0
 8001366:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001368:	4b09      	ldr	r3, [pc, #36]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800136a:	220c      	movs	r2, #12
 800136c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800136e:	4b08      	ldr	r3, [pc, #32]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001374:	4b06      	ldr	r3, [pc, #24]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 8001376:	2200      	movs	r2, #0
 8001378:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800137a:	4805      	ldr	r0, [pc, #20]	; (8001390 <MX_USART2_UART_Init+0x4c>)
 800137c:	f001 f8f2 	bl	8002564 <HAL_UART_Init>
 8001380:	4603      	mov	r3, r0
 8001382:	2b00      	cmp	r3, #0
 8001384:	d001      	beq.n	800138a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001386:	f000 f897 	bl	80014b8 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */
  /* USER CODE END USART2_Init 2 */

}
 800138a:	bf00      	nop
 800138c:	bd80      	pop	{r7, pc}
 800138e:	bf00      	nop
 8001390:	2000007c 	.word	0x2000007c
 8001394:	40004400 	.word	0x40004400

08001398 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001398:	b580      	push	{r7, lr}
 800139a:	b088      	sub	sp, #32
 800139c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800139e:	f107 0310 	add.w	r3, r7, #16
 80013a2:	2200      	movs	r2, #0
 80013a4:	601a      	str	r2, [r3, #0]
 80013a6:	605a      	str	r2, [r3, #4]
 80013a8:	609a      	str	r2, [r3, #8]
 80013aa:	60da      	str	r2, [r3, #12]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80013ac:	4b3e      	ldr	r3, [pc, #248]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013ae:	699b      	ldr	r3, [r3, #24]
 80013b0:	4a3d      	ldr	r2, [pc, #244]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013b2:	f043 0310 	orr.w	r3, r3, #16
 80013b6:	6193      	str	r3, [r2, #24]
 80013b8:	4b3b      	ldr	r3, [pc, #236]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013ba:	699b      	ldr	r3, [r3, #24]
 80013bc:	f003 0310 	and.w	r3, r3, #16
 80013c0:	60fb      	str	r3, [r7, #12]
 80013c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80013c4:	4b38      	ldr	r3, [pc, #224]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013c6:	699b      	ldr	r3, [r3, #24]
 80013c8:	4a37      	ldr	r2, [pc, #220]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013ca:	f043 0320 	orr.w	r3, r3, #32
 80013ce:	6193      	str	r3, [r2, #24]
 80013d0:	4b35      	ldr	r3, [pc, #212]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013d2:	699b      	ldr	r3, [r3, #24]
 80013d4:	f003 0320 	and.w	r3, r3, #32
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80013dc:	4b32      	ldr	r3, [pc, #200]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013de:	699b      	ldr	r3, [r3, #24]
 80013e0:	4a31      	ldr	r2, [pc, #196]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013e2:	f043 0304 	orr.w	r3, r3, #4
 80013e6:	6193      	str	r3, [r2, #24]
 80013e8:	4b2f      	ldr	r3, [pc, #188]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013ea:	699b      	ldr	r3, [r3, #24]
 80013ec:	f003 0304 	and.w	r3, r3, #4
 80013f0:	607b      	str	r3, [r7, #4]
 80013f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80013f4:	4b2c      	ldr	r3, [pc, #176]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013f6:	699b      	ldr	r3, [r3, #24]
 80013f8:	4a2b      	ldr	r2, [pc, #172]	; (80014a8 <MX_GPIO_Init+0x110>)
 80013fa:	f043 0308 	orr.w	r3, r3, #8
 80013fe:	6193      	str	r3, [r2, #24]
 8001400:	4b29      	ldr	r3, [pc, #164]	; (80014a8 <MX_GPIO_Init+0x110>)
 8001402:	699b      	ldr	r3, [r3, #24]
 8001404:	f003 0308 	and.w	r3, r3, #8
 8001408:	603b      	str	r3, [r7, #0]
 800140a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, DISP_CLK_Pin|DISP_STB_Pin|DISP_DIO_Pin|HX711_SCK_Pin, GPIO_PIN_RESET);
 800140c:	2200      	movs	r2, #0
 800140e:	f240 410b 	movw	r1, #1035	; 0x40b
 8001412:	4826      	ldr	r0, [pc, #152]	; (80014ac <MX_GPIO_Init+0x114>)
 8001414:	f000 fc51 	bl	8001cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001418:	2200      	movs	r2, #0
 800141a:	2120      	movs	r1, #32
 800141c:	4824      	ldr	r0, [pc, #144]	; (80014b0 <MX_GPIO_Init+0x118>)
 800141e:	f000 fc4c 	bl	8001cba <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001422:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001426:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001428:	4b22      	ldr	r3, [pc, #136]	; (80014b4 <MX_GPIO_Init+0x11c>)
 800142a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800142c:	2300      	movs	r3, #0
 800142e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001430:	f107 0310 	add.w	r3, r7, #16
 8001434:	4619      	mov	r1, r3
 8001436:	481d      	ldr	r0, [pc, #116]	; (80014ac <MX_GPIO_Init+0x114>)
 8001438:	f000 faa4 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pins : DISP_CLK_Pin DISP_STB_Pin DISP_DIO_Pin HX711_SCK_Pin */
  GPIO_InitStruct.Pin = DISP_CLK_Pin|DISP_STB_Pin|DISP_DIO_Pin|HX711_SCK_Pin;
 800143c:	f240 430b 	movw	r3, #1035	; 0x40b
 8001440:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001442:	2301      	movs	r3, #1
 8001444:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001446:	2300      	movs	r3, #0
 8001448:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800144a:	2302      	movs	r3, #2
 800144c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800144e:	f107 0310 	add.w	r3, r7, #16
 8001452:	4619      	mov	r1, r3
 8001454:	4815      	ldr	r0, [pc, #84]	; (80014ac <MX_GPIO_Init+0x114>)
 8001456:	f000 fa95 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800145a:	2320      	movs	r3, #32
 800145c:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800145e:	2301      	movs	r3, #1
 8001460:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001462:	2300      	movs	r3, #0
 8001464:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001466:	2302      	movs	r3, #2
 8001468:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800146a:	f107 0310 	add.w	r3, r7, #16
 800146e:	4619      	mov	r1, r3
 8001470:	480f      	ldr	r0, [pc, #60]	; (80014b0 <MX_GPIO_Init+0x118>)
 8001472:	f000 fa87 	bl	8001984 <HAL_GPIO_Init>

  /*Configure GPIO pin : HX711_DT_Pin */
  GPIO_InitStruct.Pin = HX711_DT_Pin;
 8001476:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800147a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800147c:	2300      	movs	r3, #0
 800147e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001480:	2300      	movs	r3, #0
 8001482:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(HX711_DT_GPIO_Port, &GPIO_InitStruct);
 8001484:	f107 0310 	add.w	r3, r7, #16
 8001488:	4619      	mov	r1, r3
 800148a:	4808      	ldr	r0, [pc, #32]	; (80014ac <MX_GPIO_Init+0x114>)
 800148c:	f000 fa7a 	bl	8001984 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI15_10_IRQn, 0, 0);
 8001490:	2200      	movs	r2, #0
 8001492:	2100      	movs	r1, #0
 8001494:	2028      	movs	r0, #40	; 0x28
 8001496:	f000 fa3e 	bl	8001916 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI15_10_IRQn);
 800149a:	2028      	movs	r0, #40	; 0x28
 800149c:	f000 fa57 	bl	800194e <HAL_NVIC_EnableIRQ>

}
 80014a0:	bf00      	nop
 80014a2:	3720      	adds	r7, #32
 80014a4:	46bd      	mov	sp, r7
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	40021000 	.word	0x40021000
 80014ac:	40011000 	.word	0x40011000
 80014b0:	40010800 	.word	0x40010800
 80014b4:	10110000 	.word	0x10110000

080014b8 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80014b8:	b480      	push	{r7}
 80014ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* USER CODE END Error_Handler_Debug */
}
 80014bc:	bf00      	nop
 80014be:	46bd      	mov	sp, r7
 80014c0:	bc80      	pop	{r7}
 80014c2:	4770      	bx	lr

080014c4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80014c4:	b480      	push	{r7}
 80014c6:	b085      	sub	sp, #20
 80014c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80014ca:	4b15      	ldr	r3, [pc, #84]	; (8001520 <HAL_MspInit+0x5c>)
 80014cc:	699b      	ldr	r3, [r3, #24]
 80014ce:	4a14      	ldr	r2, [pc, #80]	; (8001520 <HAL_MspInit+0x5c>)
 80014d0:	f043 0301 	orr.w	r3, r3, #1
 80014d4:	6193      	str	r3, [r2, #24]
 80014d6:	4b12      	ldr	r3, [pc, #72]	; (8001520 <HAL_MspInit+0x5c>)
 80014d8:	699b      	ldr	r3, [r3, #24]
 80014da:	f003 0301 	and.w	r3, r3, #1
 80014de:	60bb      	str	r3, [r7, #8]
 80014e0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80014e2:	4b0f      	ldr	r3, [pc, #60]	; (8001520 <HAL_MspInit+0x5c>)
 80014e4:	69db      	ldr	r3, [r3, #28]
 80014e6:	4a0e      	ldr	r2, [pc, #56]	; (8001520 <HAL_MspInit+0x5c>)
 80014e8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80014ec:	61d3      	str	r3, [r2, #28]
 80014ee:	4b0c      	ldr	r3, [pc, #48]	; (8001520 <HAL_MspInit+0x5c>)
 80014f0:	69db      	ldr	r3, [r3, #28]
 80014f2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80014f6:	607b      	str	r3, [r7, #4]
 80014f8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80014fa:	4b0a      	ldr	r3, [pc, #40]	; (8001524 <HAL_MspInit+0x60>)
 80014fc:	685b      	ldr	r3, [r3, #4]
 80014fe:	60fb      	str	r3, [r7, #12]
 8001500:	68fb      	ldr	r3, [r7, #12]
 8001502:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
 8001506:	60fb      	str	r3, [r7, #12]
 8001508:	68fb      	ldr	r3, [r7, #12]
 800150a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800150e:	60fb      	str	r3, [r7, #12]
 8001510:	4a04      	ldr	r2, [pc, #16]	; (8001524 <HAL_MspInit+0x60>)
 8001512:	68fb      	ldr	r3, [r7, #12]
 8001514:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001516:	bf00      	nop
 8001518:	3714      	adds	r7, #20
 800151a:	46bd      	mov	sp, r7
 800151c:	bc80      	pop	{r7}
 800151e:	4770      	bx	lr
 8001520:	40021000 	.word	0x40021000
 8001524:	40010000 	.word	0x40010000

08001528 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001528:	b580      	push	{r7, lr}
 800152a:	b088      	sub	sp, #32
 800152c:	af00      	add	r7, sp, #0
 800152e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001530:	f107 0310 	add.w	r3, r7, #16
 8001534:	2200      	movs	r2, #0
 8001536:	601a      	str	r2, [r3, #0]
 8001538:	605a      	str	r2, [r3, #4]
 800153a:	609a      	str	r2, [r3, #8]
 800153c:	60da      	str	r2, [r3, #12]
  if(huart->Instance==USART2)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	4a15      	ldr	r2, [pc, #84]	; (8001598 <HAL_UART_MspInit+0x70>)
 8001544:	4293      	cmp	r3, r2
 8001546:	d123      	bne.n	8001590 <HAL_UART_MspInit+0x68>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8001548:	4b14      	ldr	r3, [pc, #80]	; (800159c <HAL_UART_MspInit+0x74>)
 800154a:	69db      	ldr	r3, [r3, #28]
 800154c:	4a13      	ldr	r2, [pc, #76]	; (800159c <HAL_UART_MspInit+0x74>)
 800154e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001552:	61d3      	str	r3, [r2, #28]
 8001554:	4b11      	ldr	r3, [pc, #68]	; (800159c <HAL_UART_MspInit+0x74>)
 8001556:	69db      	ldr	r3, [r3, #28]
 8001558:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800155c:	60fb      	str	r3, [r7, #12]
 800155e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001560:	4b0e      	ldr	r3, [pc, #56]	; (800159c <HAL_UART_MspInit+0x74>)
 8001562:	699b      	ldr	r3, [r3, #24]
 8001564:	4a0d      	ldr	r2, [pc, #52]	; (800159c <HAL_UART_MspInit+0x74>)
 8001566:	f043 0304 	orr.w	r3, r3, #4
 800156a:	6193      	str	r3, [r2, #24]
 800156c:	4b0b      	ldr	r3, [pc, #44]	; (800159c <HAL_UART_MspInit+0x74>)
 800156e:	699b      	ldr	r3, [r3, #24]
 8001570:	f003 0304 	and.w	r3, r3, #4
 8001574:	60bb      	str	r3, [r7, #8]
 8001576:	68bb      	ldr	r3, [r7, #8]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8001578:	230c      	movs	r3, #12
 800157a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800157c:	2302      	movs	r3, #2
 800157e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001580:	2302      	movs	r3, #2
 8001582:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001584:	f107 0310 	add.w	r3, r7, #16
 8001588:	4619      	mov	r1, r3
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <HAL_UART_MspInit+0x78>)
 800158c:	f000 f9fa 	bl	8001984 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8001590:	bf00      	nop
 8001592:	3720      	adds	r7, #32
 8001594:	46bd      	mov	sp, r7
 8001596:	bd80      	pop	{r7, pc}
 8001598:	40004400 	.word	0x40004400
 800159c:	40021000 	.word	0x40021000
 80015a0:	40010800 	.word	0x40010800

080015a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80015a4:	b480      	push	{r7}
 80015a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80015a8:	e7fe      	b.n	80015a8 <NMI_Handler+0x4>

080015aa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80015aa:	b480      	push	{r7}
 80015ac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80015ae:	e7fe      	b.n	80015ae <HardFault_Handler+0x4>

080015b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80015b0:	b480      	push	{r7}
 80015b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80015b4:	e7fe      	b.n	80015b4 <MemManage_Handler+0x4>

080015b6 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80015b6:	b480      	push	{r7}
 80015b8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80015ba:	e7fe      	b.n	80015ba <BusFault_Handler+0x4>

080015bc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80015bc:	b480      	push	{r7}
 80015be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80015c0:	e7fe      	b.n	80015c0 <UsageFault_Handler+0x4>

080015c2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80015c2:	b480      	push	{r7}
 80015c4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80015c6:	bf00      	nop
 80015c8:	46bd      	mov	sp, r7
 80015ca:	bc80      	pop	{r7}
 80015cc:	4770      	bx	lr

080015ce <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80015ce:	b480      	push	{r7}
 80015d0:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80015d2:	bf00      	nop
 80015d4:	46bd      	mov	sp, r7
 80015d6:	bc80      	pop	{r7}
 80015d8:	4770      	bx	lr

080015da <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80015da:	b480      	push	{r7}
 80015dc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80015de:	bf00      	nop
 80015e0:	46bd      	mov	sp, r7
 80015e2:	bc80      	pop	{r7}
 80015e4:	4770      	bx	lr

080015e6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80015e6:	b580      	push	{r7, lr}
 80015e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80015ea:	f000 f87d 	bl	80016e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80015ee:	bf00      	nop
 80015f0:	bd80      	pop	{r7, pc}

080015f2 <EXTI15_10_IRQHandler>:

/**
  * @brief This function handles EXTI line[15:10] interrupts.
  */
void EXTI15_10_IRQHandler(void)
{
 80015f2:	b580      	push	{r7, lr}
 80015f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI15_10_IRQn 0 */

  /* USER CODE END EXTI15_10_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_13);
 80015f6:	f44f 5000 	mov.w	r0, #8192	; 0x2000
 80015fa:	f000 fb77 	bl	8001cec <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI15_10_IRQn 1 */

  /* USER CODE END EXTI15_10_IRQn 1 */
}
 80015fe:	bf00      	nop
 8001600:	bd80      	pop	{r7, pc}

08001602 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001602:	b480      	push	{r7}
 8001604:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001606:	bf00      	nop
 8001608:	46bd      	mov	sp, r7
 800160a:	bc80      	pop	{r7}
 800160c:	4770      	bx	lr
	...

08001610 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001610:	480c      	ldr	r0, [pc, #48]	; (8001644 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001612:	490d      	ldr	r1, [pc, #52]	; (8001648 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001614:	4a0d      	ldr	r2, [pc, #52]	; (800164c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001616:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001618:	e002      	b.n	8001620 <LoopCopyDataInit>

0800161a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800161a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800161c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800161e:	3304      	adds	r3, #4

08001620 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001620:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001622:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001624:	d3f9      	bcc.n	800161a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001626:	4a0a      	ldr	r2, [pc, #40]	; (8001650 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001628:	4c0a      	ldr	r4, [pc, #40]	; (8001654 <LoopFillZerobss+0x22>)
  movs r3, #0
 800162a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800162c:	e001      	b.n	8001632 <LoopFillZerobss>

0800162e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800162e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001630:	3204      	adds	r2, #4

08001632 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001632:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001634:	d3fb      	bcc.n	800162e <FillZerobss>

/* Call the clock system intitialization function.*/
    bl  SystemInit
 8001636:	f7ff ffe4 	bl	8001602 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800163a:	f001 f86f 	bl	800271c <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800163e:	f7ff fd93 	bl	8001168 <main>
  bx lr
 8001642:	4770      	bx	lr
  ldr r0, =_sdata
 8001644:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001648:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 800164c:	080027bc 	.word	0x080027bc
  ldr r2, =_sbss
 8001650:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001654:	200000c4 	.word	0x200000c4

08001658 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001658:	e7fe      	b.n	8001658 <ADC1_2_IRQHandler>
	...

0800165c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800165c:	b580      	push	{r7, lr}
 800165e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001660:	4b08      	ldr	r3, [pc, #32]	; (8001684 <HAL_Init+0x28>)
 8001662:	681b      	ldr	r3, [r3, #0]
 8001664:	4a07      	ldr	r2, [pc, #28]	; (8001684 <HAL_Init+0x28>)
 8001666:	f043 0310 	orr.w	r3, r3, #16
 800166a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800166c:	2003      	movs	r0, #3
 800166e:	f000 f947 	bl	8001900 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001672:	2000      	movs	r0, #0
 8001674:	f000 f808 	bl	8001688 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001678:	f7ff ff24 	bl	80014c4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800167c:	2300      	movs	r3, #0
}
 800167e:	4618      	mov	r0, r3
 8001680:	bd80      	pop	{r7, pc}
 8001682:	bf00      	nop
 8001684:	40022000 	.word	0x40022000

08001688 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001688:	b580      	push	{r7, lr}
 800168a:	b082      	sub	sp, #8
 800168c:	af00      	add	r7, sp, #0
 800168e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001690:	4b12      	ldr	r3, [pc, #72]	; (80016dc <HAL_InitTick+0x54>)
 8001692:	681a      	ldr	r2, [r3, #0]
 8001694:	4b12      	ldr	r3, [pc, #72]	; (80016e0 <HAL_InitTick+0x58>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	4619      	mov	r1, r3
 800169a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800169e:	fbb3 f3f1 	udiv	r3, r3, r1
 80016a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80016a6:	4618      	mov	r0, r3
 80016a8:	f000 f95f 	bl	800196a <HAL_SYSTICK_Config>
 80016ac:	4603      	mov	r3, r0
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d001      	beq.n	80016b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80016b2:	2301      	movs	r3, #1
 80016b4:	e00e      	b.n	80016d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80016b6:	687b      	ldr	r3, [r7, #4]
 80016b8:	2b0f      	cmp	r3, #15
 80016ba:	d80a      	bhi.n	80016d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80016bc:	2200      	movs	r2, #0
 80016be:	6879      	ldr	r1, [r7, #4]
 80016c0:	f04f 30ff 	mov.w	r0, #4294967295
 80016c4:	f000 f927 	bl	8001916 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80016c8:	4a06      	ldr	r2, [pc, #24]	; (80016e4 <HAL_InitTick+0x5c>)
 80016ca:	687b      	ldr	r3, [r7, #4]
 80016cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80016ce:	2300      	movs	r3, #0
 80016d0:	e000      	b.n	80016d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80016d2:	2301      	movs	r3, #1
}
 80016d4:	4618      	mov	r0, r3
 80016d6:	3708      	adds	r7, #8
 80016d8:	46bd      	mov	sp, r7
 80016da:	bd80      	pop	{r7, pc}
 80016dc:	20000008 	.word	0x20000008
 80016e0:	20000010 	.word	0x20000010
 80016e4:	2000000c 	.word	0x2000000c

080016e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80016e8:	b480      	push	{r7}
 80016ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80016ec:	4b05      	ldr	r3, [pc, #20]	; (8001704 <HAL_IncTick+0x1c>)
 80016ee:	781b      	ldrb	r3, [r3, #0]
 80016f0:	461a      	mov	r2, r3
 80016f2:	4b05      	ldr	r3, [pc, #20]	; (8001708 <HAL_IncTick+0x20>)
 80016f4:	681b      	ldr	r3, [r3, #0]
 80016f6:	4413      	add	r3, r2
 80016f8:	4a03      	ldr	r2, [pc, #12]	; (8001708 <HAL_IncTick+0x20>)
 80016fa:	6013      	str	r3, [r2, #0]
}
 80016fc:	bf00      	nop
 80016fe:	46bd      	mov	sp, r7
 8001700:	bc80      	pop	{r7}
 8001702:	4770      	bx	lr
 8001704:	20000010 	.word	0x20000010
 8001708:	200000c0 	.word	0x200000c0

0800170c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800170c:	b480      	push	{r7}
 800170e:	af00      	add	r7, sp, #0
  return uwTick;
 8001710:	4b02      	ldr	r3, [pc, #8]	; (800171c <HAL_GetTick+0x10>)
 8001712:	681b      	ldr	r3, [r3, #0]
}
 8001714:	4618      	mov	r0, r3
 8001716:	46bd      	mov	sp, r7
 8001718:	bc80      	pop	{r7}
 800171a:	4770      	bx	lr
 800171c:	200000c0 	.word	0x200000c0

08001720 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001720:	b580      	push	{r7, lr}
 8001722:	b084      	sub	sp, #16
 8001724:	af00      	add	r7, sp, #0
 8001726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001728:	f7ff fff0 	bl	800170c <HAL_GetTick>
 800172c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800172e:	687b      	ldr	r3, [r7, #4]
 8001730:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001732:	68fb      	ldr	r3, [r7, #12]
 8001734:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001738:	d005      	beq.n	8001746 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800173a:	4b0a      	ldr	r3, [pc, #40]	; (8001764 <HAL_Delay+0x44>)
 800173c:	781b      	ldrb	r3, [r3, #0]
 800173e:	461a      	mov	r2, r3
 8001740:	68fb      	ldr	r3, [r7, #12]
 8001742:	4413      	add	r3, r2
 8001744:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001746:	bf00      	nop
 8001748:	f7ff ffe0 	bl	800170c <HAL_GetTick>
 800174c:	4602      	mov	r2, r0
 800174e:	68bb      	ldr	r3, [r7, #8]
 8001750:	1ad3      	subs	r3, r2, r3
 8001752:	68fa      	ldr	r2, [r7, #12]
 8001754:	429a      	cmp	r2, r3
 8001756:	d8f7      	bhi.n	8001748 <HAL_Delay+0x28>
  {
  }
}
 8001758:	bf00      	nop
 800175a:	bf00      	nop
 800175c:	3710      	adds	r7, #16
 800175e:	46bd      	mov	sp, r7
 8001760:	bd80      	pop	{r7, pc}
 8001762:	bf00      	nop
 8001764:	20000010 	.word	0x20000010

08001768 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001768:	b480      	push	{r7}
 800176a:	b085      	sub	sp, #20
 800176c:	af00      	add	r7, sp, #0
 800176e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001770:	687b      	ldr	r3, [r7, #4]
 8001772:	f003 0307 	and.w	r3, r3, #7
 8001776:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001778:	4b0c      	ldr	r3, [pc, #48]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800177a:	68db      	ldr	r3, [r3, #12]
 800177c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800177e:	68ba      	ldr	r2, [r7, #8]
 8001780:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001784:	4013      	ands	r3, r2
 8001786:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 800178c:	68bb      	ldr	r3, [r7, #8]
 800178e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001790:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001794:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001798:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800179a:	4a04      	ldr	r2, [pc, #16]	; (80017ac <__NVIC_SetPriorityGrouping+0x44>)
 800179c:	68bb      	ldr	r3, [r7, #8]
 800179e:	60d3      	str	r3, [r2, #12]
}
 80017a0:	bf00      	nop
 80017a2:	3714      	adds	r7, #20
 80017a4:	46bd      	mov	sp, r7
 80017a6:	bc80      	pop	{r7}
 80017a8:	4770      	bx	lr
 80017aa:	bf00      	nop
 80017ac:	e000ed00 	.word	0xe000ed00

080017b0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80017b4:	4b04      	ldr	r3, [pc, #16]	; (80017c8 <__NVIC_GetPriorityGrouping+0x18>)
 80017b6:	68db      	ldr	r3, [r3, #12]
 80017b8:	0a1b      	lsrs	r3, r3, #8
 80017ba:	f003 0307 	and.w	r3, r3, #7
}
 80017be:	4618      	mov	r0, r3
 80017c0:	46bd      	mov	sp, r7
 80017c2:	bc80      	pop	{r7}
 80017c4:	4770      	bx	lr
 80017c6:	bf00      	nop
 80017c8:	e000ed00 	.word	0xe000ed00

080017cc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80017cc:	b480      	push	{r7}
 80017ce:	b083      	sub	sp, #12
 80017d0:	af00      	add	r7, sp, #0
 80017d2:	4603      	mov	r3, r0
 80017d4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80017d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017da:	2b00      	cmp	r3, #0
 80017dc:	db0b      	blt.n	80017f6 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80017de:	79fb      	ldrb	r3, [r7, #7]
 80017e0:	f003 021f 	and.w	r2, r3, #31
 80017e4:	4906      	ldr	r1, [pc, #24]	; (8001800 <__NVIC_EnableIRQ+0x34>)
 80017e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017ea:	095b      	lsrs	r3, r3, #5
 80017ec:	2001      	movs	r0, #1
 80017ee:	fa00 f202 	lsl.w	r2, r0, r2
 80017f2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80017f6:	bf00      	nop
 80017f8:	370c      	adds	r7, #12
 80017fa:	46bd      	mov	sp, r7
 80017fc:	bc80      	pop	{r7}
 80017fe:	4770      	bx	lr
 8001800:	e000e100 	.word	0xe000e100

08001804 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001804:	b480      	push	{r7}
 8001806:	b083      	sub	sp, #12
 8001808:	af00      	add	r7, sp, #0
 800180a:	4603      	mov	r3, r0
 800180c:	6039      	str	r1, [r7, #0]
 800180e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001810:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001814:	2b00      	cmp	r3, #0
 8001816:	db0a      	blt.n	800182e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001818:	683b      	ldr	r3, [r7, #0]
 800181a:	b2da      	uxtb	r2, r3
 800181c:	490c      	ldr	r1, [pc, #48]	; (8001850 <__NVIC_SetPriority+0x4c>)
 800181e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001822:	0112      	lsls	r2, r2, #4
 8001824:	b2d2      	uxtb	r2, r2
 8001826:	440b      	add	r3, r1
 8001828:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800182c:	e00a      	b.n	8001844 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800182e:	683b      	ldr	r3, [r7, #0]
 8001830:	b2da      	uxtb	r2, r3
 8001832:	4908      	ldr	r1, [pc, #32]	; (8001854 <__NVIC_SetPriority+0x50>)
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	f003 030f 	and.w	r3, r3, #15
 800183a:	3b04      	subs	r3, #4
 800183c:	0112      	lsls	r2, r2, #4
 800183e:	b2d2      	uxtb	r2, r2
 8001840:	440b      	add	r3, r1
 8001842:	761a      	strb	r2, [r3, #24]
}
 8001844:	bf00      	nop
 8001846:	370c      	adds	r7, #12
 8001848:	46bd      	mov	sp, r7
 800184a:	bc80      	pop	{r7}
 800184c:	4770      	bx	lr
 800184e:	bf00      	nop
 8001850:	e000e100 	.word	0xe000e100
 8001854:	e000ed00 	.word	0xe000ed00

08001858 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001858:	b480      	push	{r7}
 800185a:	b089      	sub	sp, #36	; 0x24
 800185c:	af00      	add	r7, sp, #0
 800185e:	60f8      	str	r0, [r7, #12]
 8001860:	60b9      	str	r1, [r7, #8]
 8001862:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001864:	68fb      	ldr	r3, [r7, #12]
 8001866:	f003 0307 	and.w	r3, r3, #7
 800186a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800186c:	69fb      	ldr	r3, [r7, #28]
 800186e:	f1c3 0307 	rsb	r3, r3, #7
 8001872:	2b04      	cmp	r3, #4
 8001874:	bf28      	it	cs
 8001876:	2304      	movcs	r3, #4
 8001878:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800187a:	69fb      	ldr	r3, [r7, #28]
 800187c:	3304      	adds	r3, #4
 800187e:	2b06      	cmp	r3, #6
 8001880:	d902      	bls.n	8001888 <NVIC_EncodePriority+0x30>
 8001882:	69fb      	ldr	r3, [r7, #28]
 8001884:	3b03      	subs	r3, #3
 8001886:	e000      	b.n	800188a <NVIC_EncodePriority+0x32>
 8001888:	2300      	movs	r3, #0
 800188a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800188c:	f04f 32ff 	mov.w	r2, #4294967295
 8001890:	69bb      	ldr	r3, [r7, #24]
 8001892:	fa02 f303 	lsl.w	r3, r2, r3
 8001896:	43da      	mvns	r2, r3
 8001898:	68bb      	ldr	r3, [r7, #8]
 800189a:	401a      	ands	r2, r3
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80018a0:	f04f 31ff 	mov.w	r1, #4294967295
 80018a4:	697b      	ldr	r3, [r7, #20]
 80018a6:	fa01 f303 	lsl.w	r3, r1, r3
 80018aa:	43d9      	mvns	r1, r3
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80018b0:	4313      	orrs	r3, r2
         );
}
 80018b2:	4618      	mov	r0, r3
 80018b4:	3724      	adds	r7, #36	; 0x24
 80018b6:	46bd      	mov	sp, r7
 80018b8:	bc80      	pop	{r7}
 80018ba:	4770      	bx	lr

080018bc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80018bc:	b580      	push	{r7, lr}
 80018be:	b082      	sub	sp, #8
 80018c0:	af00      	add	r7, sp, #0
 80018c2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	3b01      	subs	r3, #1
 80018c8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80018cc:	d301      	bcc.n	80018d2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80018ce:	2301      	movs	r3, #1
 80018d0:	e00f      	b.n	80018f2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80018d2:	4a0a      	ldr	r2, [pc, #40]	; (80018fc <SysTick_Config+0x40>)
 80018d4:	687b      	ldr	r3, [r7, #4]
 80018d6:	3b01      	subs	r3, #1
 80018d8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80018da:	210f      	movs	r1, #15
 80018dc:	f04f 30ff 	mov.w	r0, #4294967295
 80018e0:	f7ff ff90 	bl	8001804 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80018e4:	4b05      	ldr	r3, [pc, #20]	; (80018fc <SysTick_Config+0x40>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80018ea:	4b04      	ldr	r3, [pc, #16]	; (80018fc <SysTick_Config+0x40>)
 80018ec:	2207      	movs	r2, #7
 80018ee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80018f0:	2300      	movs	r3, #0
}
 80018f2:	4618      	mov	r0, r3
 80018f4:	3708      	adds	r7, #8
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	e000e010 	.word	0xe000e010

08001900 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b082      	sub	sp, #8
 8001904:	af00      	add	r7, sp, #0
 8001906:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001908:	6878      	ldr	r0, [r7, #4]
 800190a:	f7ff ff2d 	bl	8001768 <__NVIC_SetPriorityGrouping>
}
 800190e:	bf00      	nop
 8001910:	3708      	adds	r7, #8
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001916:	b580      	push	{r7, lr}
 8001918:	b086      	sub	sp, #24
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	60b9      	str	r1, [r7, #8]
 8001920:	607a      	str	r2, [r7, #4]
 8001922:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001924:	2300      	movs	r3, #0
 8001926:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001928:	f7ff ff42 	bl	80017b0 <__NVIC_GetPriorityGrouping>
 800192c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800192e:	687a      	ldr	r2, [r7, #4]
 8001930:	68b9      	ldr	r1, [r7, #8]
 8001932:	6978      	ldr	r0, [r7, #20]
 8001934:	f7ff ff90 	bl	8001858 <NVIC_EncodePriority>
 8001938:	4602      	mov	r2, r0
 800193a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800193e:	4611      	mov	r1, r2
 8001940:	4618      	mov	r0, r3
 8001942:	f7ff ff5f 	bl	8001804 <__NVIC_SetPriority>
}
 8001946:	bf00      	nop
 8001948:	3718      	adds	r7, #24
 800194a:	46bd      	mov	sp, r7
 800194c:	bd80      	pop	{r7, pc}

0800194e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800194e:	b580      	push	{r7, lr}
 8001950:	b082      	sub	sp, #8
 8001952:	af00      	add	r7, sp, #0
 8001954:	4603      	mov	r3, r0
 8001956:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001958:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800195c:	4618      	mov	r0, r3
 800195e:	f7ff ff35 	bl	80017cc <__NVIC_EnableIRQ>
}
 8001962:	bf00      	nop
 8001964:	3708      	adds	r7, #8
 8001966:	46bd      	mov	sp, r7
 8001968:	bd80      	pop	{r7, pc}

0800196a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800196a:	b580      	push	{r7, lr}
 800196c:	b082      	sub	sp, #8
 800196e:	af00      	add	r7, sp, #0
 8001970:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001972:	6878      	ldr	r0, [r7, #4]
 8001974:	f7ff ffa2 	bl	80018bc <SysTick_Config>
 8001978:	4603      	mov	r3, r0
}
 800197a:	4618      	mov	r0, r3
 800197c:	3708      	adds	r7, #8
 800197e:	46bd      	mov	sp, r7
 8001980:	bd80      	pop	{r7, pc}
	...

08001984 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001984:	b480      	push	{r7}
 8001986:	b08b      	sub	sp, #44	; 0x2c
 8001988:	af00      	add	r7, sp, #0
 800198a:	6078      	str	r0, [r7, #4]
 800198c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 800198e:	2300      	movs	r3, #0
 8001990:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001992:	2300      	movs	r3, #0
 8001994:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001996:	e169      	b.n	8001c6c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001998:	2201      	movs	r2, #1
 800199a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800199c:	fa02 f303 	lsl.w	r3, r2, r3
 80019a0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80019a2:	683b      	ldr	r3, [r7, #0]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	69fa      	ldr	r2, [r7, #28]
 80019a8:	4013      	ands	r3, r2
 80019aa:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80019ac:	69ba      	ldr	r2, [r7, #24]
 80019ae:	69fb      	ldr	r3, [r7, #28]
 80019b0:	429a      	cmp	r2, r3
 80019b2:	f040 8158 	bne.w	8001c66 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80019b6:	683b      	ldr	r3, [r7, #0]
 80019b8:	685b      	ldr	r3, [r3, #4]
 80019ba:	4a9a      	ldr	r2, [pc, #616]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019bc:	4293      	cmp	r3, r2
 80019be:	d05e      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019c0:	4a98      	ldr	r2, [pc, #608]	; (8001c24 <HAL_GPIO_Init+0x2a0>)
 80019c2:	4293      	cmp	r3, r2
 80019c4:	d875      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019c6:	4a98      	ldr	r2, [pc, #608]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019c8:	4293      	cmp	r3, r2
 80019ca:	d058      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019cc:	4a96      	ldr	r2, [pc, #600]	; (8001c28 <HAL_GPIO_Init+0x2a4>)
 80019ce:	4293      	cmp	r3, r2
 80019d0:	d86f      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019d2:	4a96      	ldr	r2, [pc, #600]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019d4:	4293      	cmp	r3, r2
 80019d6:	d052      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019d8:	4a94      	ldr	r2, [pc, #592]	; (8001c2c <HAL_GPIO_Init+0x2a8>)
 80019da:	4293      	cmp	r3, r2
 80019dc:	d869      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019de:	4a94      	ldr	r2, [pc, #592]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e0:	4293      	cmp	r3, r2
 80019e2:	d04c      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019e4:	4a92      	ldr	r2, [pc, #584]	; (8001c30 <HAL_GPIO_Init+0x2ac>)
 80019e6:	4293      	cmp	r3, r2
 80019e8:	d863      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019ea:	4a92      	ldr	r2, [pc, #584]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019ec:	4293      	cmp	r3, r2
 80019ee:	d046      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
 80019f0:	4a90      	ldr	r2, [pc, #576]	; (8001c34 <HAL_GPIO_Init+0x2b0>)
 80019f2:	4293      	cmp	r3, r2
 80019f4:	d85d      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019f6:	2b12      	cmp	r3, #18
 80019f8:	d82a      	bhi.n	8001a50 <HAL_GPIO_Init+0xcc>
 80019fa:	2b12      	cmp	r3, #18
 80019fc:	d859      	bhi.n	8001ab2 <HAL_GPIO_Init+0x12e>
 80019fe:	a201      	add	r2, pc, #4	; (adr r2, 8001a04 <HAL_GPIO_Init+0x80>)
 8001a00:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001a04:	08001a7f 	.word	0x08001a7f
 8001a08:	08001a59 	.word	0x08001a59
 8001a0c:	08001a6b 	.word	0x08001a6b
 8001a10:	08001aad 	.word	0x08001aad
 8001a14:	08001ab3 	.word	0x08001ab3
 8001a18:	08001ab3 	.word	0x08001ab3
 8001a1c:	08001ab3 	.word	0x08001ab3
 8001a20:	08001ab3 	.word	0x08001ab3
 8001a24:	08001ab3 	.word	0x08001ab3
 8001a28:	08001ab3 	.word	0x08001ab3
 8001a2c:	08001ab3 	.word	0x08001ab3
 8001a30:	08001ab3 	.word	0x08001ab3
 8001a34:	08001ab3 	.word	0x08001ab3
 8001a38:	08001ab3 	.word	0x08001ab3
 8001a3c:	08001ab3 	.word	0x08001ab3
 8001a40:	08001ab3 	.word	0x08001ab3
 8001a44:	08001ab3 	.word	0x08001ab3
 8001a48:	08001a61 	.word	0x08001a61
 8001a4c:	08001a75 	.word	0x08001a75
 8001a50:	4a79      	ldr	r2, [pc, #484]	; (8001c38 <HAL_GPIO_Init+0x2b4>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d013      	beq.n	8001a7e <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001a56:	e02c      	b.n	8001ab2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001a58:	683b      	ldr	r3, [r7, #0]
 8001a5a:	68db      	ldr	r3, [r3, #12]
 8001a5c:	623b      	str	r3, [r7, #32]
          break;
 8001a5e:	e029      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001a60:	683b      	ldr	r3, [r7, #0]
 8001a62:	68db      	ldr	r3, [r3, #12]
 8001a64:	3304      	adds	r3, #4
 8001a66:	623b      	str	r3, [r7, #32]
          break;
 8001a68:	e024      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001a6a:	683b      	ldr	r3, [r7, #0]
 8001a6c:	68db      	ldr	r3, [r3, #12]
 8001a6e:	3308      	adds	r3, #8
 8001a70:	623b      	str	r3, [r7, #32]
          break;
 8001a72:	e01f      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001a74:	683b      	ldr	r3, [r7, #0]
 8001a76:	68db      	ldr	r3, [r3, #12]
 8001a78:	330c      	adds	r3, #12
 8001a7a:	623b      	str	r3, [r7, #32]
          break;
 8001a7c:	e01a      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001a7e:	683b      	ldr	r3, [r7, #0]
 8001a80:	689b      	ldr	r3, [r3, #8]
 8001a82:	2b00      	cmp	r3, #0
 8001a84:	d102      	bne.n	8001a8c <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001a86:	2304      	movs	r3, #4
 8001a88:	623b      	str	r3, [r7, #32]
          break;
 8001a8a:	e013      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001a8c:	683b      	ldr	r3, [r7, #0]
 8001a8e:	689b      	ldr	r3, [r3, #8]
 8001a90:	2b01      	cmp	r3, #1
 8001a92:	d105      	bne.n	8001aa0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001a94:	2308      	movs	r3, #8
 8001a96:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	69fa      	ldr	r2, [r7, #28]
 8001a9c:	611a      	str	r2, [r3, #16]
          break;
 8001a9e:	e009      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001aa0:	2308      	movs	r3, #8
 8001aa2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001aa4:	687b      	ldr	r3, [r7, #4]
 8001aa6:	69fa      	ldr	r2, [r7, #28]
 8001aa8:	615a      	str	r2, [r3, #20]
          break;
 8001aaa:	e003      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001aac:	2300      	movs	r3, #0
 8001aae:	623b      	str	r3, [r7, #32]
          break;
 8001ab0:	e000      	b.n	8001ab4 <HAL_GPIO_Init+0x130>
          break;
 8001ab2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001ab4:	69bb      	ldr	r3, [r7, #24]
 8001ab6:	2bff      	cmp	r3, #255	; 0xff
 8001ab8:	d801      	bhi.n	8001abe <HAL_GPIO_Init+0x13a>
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	e001      	b.n	8001ac2 <HAL_GPIO_Init+0x13e>
 8001abe:	687b      	ldr	r3, [r7, #4]
 8001ac0:	3304      	adds	r3, #4
 8001ac2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001ac4:	69bb      	ldr	r3, [r7, #24]
 8001ac6:	2bff      	cmp	r3, #255	; 0xff
 8001ac8:	d802      	bhi.n	8001ad0 <HAL_GPIO_Init+0x14c>
 8001aca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001acc:	009b      	lsls	r3, r3, #2
 8001ace:	e002      	b.n	8001ad6 <HAL_GPIO_Init+0x152>
 8001ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ad2:	3b08      	subs	r3, #8
 8001ad4:	009b      	lsls	r3, r3, #2
 8001ad6:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001ad8:	697b      	ldr	r3, [r7, #20]
 8001ada:	681a      	ldr	r2, [r3, #0]
 8001adc:	210f      	movs	r1, #15
 8001ade:	693b      	ldr	r3, [r7, #16]
 8001ae0:	fa01 f303 	lsl.w	r3, r1, r3
 8001ae4:	43db      	mvns	r3, r3
 8001ae6:	401a      	ands	r2, r3
 8001ae8:	6a39      	ldr	r1, [r7, #32]
 8001aea:	693b      	ldr	r3, [r7, #16]
 8001aec:	fa01 f303 	lsl.w	r3, r1, r3
 8001af0:	431a      	orrs	r2, r3
 8001af2:	697b      	ldr	r3, [r7, #20]
 8001af4:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001af6:	683b      	ldr	r3, [r7, #0]
 8001af8:	685b      	ldr	r3, [r3, #4]
 8001afa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001afe:	2b00      	cmp	r3, #0
 8001b00:	f000 80b1 	beq.w	8001c66 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001b04:	4b4d      	ldr	r3, [pc, #308]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b06:	699b      	ldr	r3, [r3, #24]
 8001b08:	4a4c      	ldr	r2, [pc, #304]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b0a:	f043 0301 	orr.w	r3, r3, #1
 8001b0e:	6193      	str	r3, [r2, #24]
 8001b10:	4b4a      	ldr	r3, [pc, #296]	; (8001c3c <HAL_GPIO_Init+0x2b8>)
 8001b12:	699b      	ldr	r3, [r3, #24]
 8001b14:	f003 0301 	and.w	r3, r3, #1
 8001b18:	60bb      	str	r3, [r7, #8]
 8001b1a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001b1c:	4a48      	ldr	r2, [pc, #288]	; (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b20:	089b      	lsrs	r3, r3, #2
 8001b22:	3302      	adds	r3, #2
 8001b24:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001b28:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001b2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b2c:	f003 0303 	and.w	r3, r3, #3
 8001b30:	009b      	lsls	r3, r3, #2
 8001b32:	220f      	movs	r2, #15
 8001b34:	fa02 f303 	lsl.w	r3, r2, r3
 8001b38:	43db      	mvns	r3, r3
 8001b3a:	68fa      	ldr	r2, [r7, #12]
 8001b3c:	4013      	ands	r3, r2
 8001b3e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001b40:	687b      	ldr	r3, [r7, #4]
 8001b42:	4a40      	ldr	r2, [pc, #256]	; (8001c44 <HAL_GPIO_Init+0x2c0>)
 8001b44:	4293      	cmp	r3, r2
 8001b46:	d013      	beq.n	8001b70 <HAL_GPIO_Init+0x1ec>
 8001b48:	687b      	ldr	r3, [r7, #4]
 8001b4a:	4a3f      	ldr	r2, [pc, #252]	; (8001c48 <HAL_GPIO_Init+0x2c4>)
 8001b4c:	4293      	cmp	r3, r2
 8001b4e:	d00d      	beq.n	8001b6c <HAL_GPIO_Init+0x1e8>
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	4a3e      	ldr	r2, [pc, #248]	; (8001c4c <HAL_GPIO_Init+0x2c8>)
 8001b54:	4293      	cmp	r3, r2
 8001b56:	d007      	beq.n	8001b68 <HAL_GPIO_Init+0x1e4>
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a3d      	ldr	r2, [pc, #244]	; (8001c50 <HAL_GPIO_Init+0x2cc>)
 8001b5c:	4293      	cmp	r3, r2
 8001b5e:	d101      	bne.n	8001b64 <HAL_GPIO_Init+0x1e0>
 8001b60:	2303      	movs	r3, #3
 8001b62:	e006      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b64:	2304      	movs	r3, #4
 8001b66:	e004      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b68:	2302      	movs	r3, #2
 8001b6a:	e002      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b6c:	2301      	movs	r3, #1
 8001b6e:	e000      	b.n	8001b72 <HAL_GPIO_Init+0x1ee>
 8001b70:	2300      	movs	r3, #0
 8001b72:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b74:	f002 0203 	and.w	r2, r2, #3
 8001b78:	0092      	lsls	r2, r2, #2
 8001b7a:	4093      	lsls	r3, r2
 8001b7c:	68fa      	ldr	r2, [r7, #12]
 8001b7e:	4313      	orrs	r3, r2
 8001b80:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001b82:	492f      	ldr	r1, [pc, #188]	; (8001c40 <HAL_GPIO_Init+0x2bc>)
 8001b84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001b86:	089b      	lsrs	r3, r3, #2
 8001b88:	3302      	adds	r3, #2
 8001b8a:	68fa      	ldr	r2, [r7, #12]
 8001b8c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001b90:	683b      	ldr	r3, [r7, #0]
 8001b92:	685b      	ldr	r3, [r3, #4]
 8001b94:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001b98:	2b00      	cmp	r3, #0
 8001b9a:	d006      	beq.n	8001baa <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001b9c:	4b2d      	ldr	r3, [pc, #180]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001b9e:	681a      	ldr	r2, [r3, #0]
 8001ba0:	492c      	ldr	r1, [pc, #176]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001ba2:	69bb      	ldr	r3, [r7, #24]
 8001ba4:	4313      	orrs	r3, r2
 8001ba6:	600b      	str	r3, [r1, #0]
 8001ba8:	e006      	b.n	8001bb8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001baa:	4b2a      	ldr	r3, [pc, #168]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bac:	681a      	ldr	r2, [r3, #0]
 8001bae:	69bb      	ldr	r3, [r7, #24]
 8001bb0:	43db      	mvns	r3, r3
 8001bb2:	4928      	ldr	r1, [pc, #160]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bb4:	4013      	ands	r3, r2
 8001bb6:	600b      	str	r3, [r1, #0]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001bb8:	683b      	ldr	r3, [r7, #0]
 8001bba:	685b      	ldr	r3, [r3, #4]
 8001bbc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001bc0:	2b00      	cmp	r3, #0
 8001bc2:	d006      	beq.n	8001bd2 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001bc4:	4b23      	ldr	r3, [pc, #140]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bc6:	685a      	ldr	r2, [r3, #4]
 8001bc8:	4922      	ldr	r1, [pc, #136]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bca:	69bb      	ldr	r3, [r7, #24]
 8001bcc:	4313      	orrs	r3, r2
 8001bce:	604b      	str	r3, [r1, #4]
 8001bd0:	e006      	b.n	8001be0 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001bd2:	4b20      	ldr	r3, [pc, #128]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bd4:	685a      	ldr	r2, [r3, #4]
 8001bd6:	69bb      	ldr	r3, [r7, #24]
 8001bd8:	43db      	mvns	r3, r3
 8001bda:	491e      	ldr	r1, [pc, #120]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bdc:	4013      	ands	r3, r2
 8001bde:	604b      	str	r3, [r1, #4]
        }

        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001be0:	683b      	ldr	r3, [r7, #0]
 8001be2:	685b      	ldr	r3, [r3, #4]
 8001be4:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	d006      	beq.n	8001bfa <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001bec:	4b19      	ldr	r3, [pc, #100]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bee:	689a      	ldr	r2, [r3, #8]
 8001bf0:	4918      	ldr	r1, [pc, #96]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bf2:	69bb      	ldr	r3, [r7, #24]
 8001bf4:	4313      	orrs	r3, r2
 8001bf6:	608b      	str	r3, [r1, #8]
 8001bf8:	e006      	b.n	8001c08 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001bfa:	4b16      	ldr	r3, [pc, #88]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001bfc:	689a      	ldr	r2, [r3, #8]
 8001bfe:	69bb      	ldr	r3, [r7, #24]
 8001c00:	43db      	mvns	r3, r3
 8001c02:	4914      	ldr	r1, [pc, #80]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c04:	4013      	ands	r3, r2
 8001c06:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001c08:	683b      	ldr	r3, [r7, #0]
 8001c0a:	685b      	ldr	r3, [r3, #4]
 8001c0c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d021      	beq.n	8001c58 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001c14:	4b0f      	ldr	r3, [pc, #60]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c16:	68da      	ldr	r2, [r3, #12]
 8001c18:	490e      	ldr	r1, [pc, #56]	; (8001c54 <HAL_GPIO_Init+0x2d0>)
 8001c1a:	69bb      	ldr	r3, [r7, #24]
 8001c1c:	4313      	orrs	r3, r2
 8001c1e:	60cb      	str	r3, [r1, #12]
 8001c20:	e021      	b.n	8001c66 <HAL_GPIO_Init+0x2e2>
 8001c22:	bf00      	nop
 8001c24:	10320000 	.word	0x10320000
 8001c28:	10310000 	.word	0x10310000
 8001c2c:	10220000 	.word	0x10220000
 8001c30:	10210000 	.word	0x10210000
 8001c34:	10120000 	.word	0x10120000
 8001c38:	10110000 	.word	0x10110000
 8001c3c:	40021000 	.word	0x40021000
 8001c40:	40010000 	.word	0x40010000
 8001c44:	40010800 	.word	0x40010800
 8001c48:	40010c00 	.word	0x40010c00
 8001c4c:	40011000 	.word	0x40011000
 8001c50:	40011400 	.word	0x40011400
 8001c54:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001c58:	4b0b      	ldr	r3, [pc, #44]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	69bb      	ldr	r3, [r7, #24]
 8001c5e:	43db      	mvns	r3, r3
 8001c60:	4909      	ldr	r1, [pc, #36]	; (8001c88 <HAL_GPIO_Init+0x304>)
 8001c62:	4013      	ands	r3, r2
 8001c64:	60cb      	str	r3, [r1, #12]
        }
      }
    }

	position++;
 8001c66:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c68:	3301      	adds	r3, #1
 8001c6a:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001c6c:	683b      	ldr	r3, [r7, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001c72:	fa22 f303 	lsr.w	r3, r2, r3
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	f47f ae8e 	bne.w	8001998 <HAL_GPIO_Init+0x14>
  }
}
 8001c7c:	bf00      	nop
 8001c7e:	bf00      	nop
 8001c80:	372c      	adds	r7, #44	; 0x2c
 8001c82:	46bd      	mov	sp, r7
 8001c84:	bc80      	pop	{r7}
 8001c86:	4770      	bx	lr
 8001c88:	40010400 	.word	0x40010400

08001c8c <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	b085      	sub	sp, #20
 8001c90:	af00      	add	r7, sp, #0
 8001c92:	6078      	str	r0, [r7, #4]
 8001c94:	460b      	mov	r3, r1
 8001c96:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	689a      	ldr	r2, [r3, #8]
 8001c9c:	887b      	ldrh	r3, [r7, #2]
 8001c9e:	4013      	ands	r3, r2
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d002      	beq.n	8001caa <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	73fb      	strb	r3, [r7, #15]
 8001ca8:	e001      	b.n	8001cae <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001caa:	2300      	movs	r3, #0
 8001cac:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001cae:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cb0:	4618      	mov	r0, r3
 8001cb2:	3714      	adds	r7, #20
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	bc80      	pop	{r7}
 8001cb8:	4770      	bx	lr

08001cba <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001cba:	b480      	push	{r7}
 8001cbc:	b083      	sub	sp, #12
 8001cbe:	af00      	add	r7, sp, #0
 8001cc0:	6078      	str	r0, [r7, #4]
 8001cc2:	460b      	mov	r3, r1
 8001cc4:	807b      	strh	r3, [r7, #2]
 8001cc6:	4613      	mov	r3, r2
 8001cc8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001cca:	787b      	ldrb	r3, [r7, #1]
 8001ccc:	2b00      	cmp	r3, #0
 8001cce:	d003      	beq.n	8001cd8 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001cd0:	887a      	ldrh	r2, [r7, #2]
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001cd6:	e003      	b.n	8001ce0 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001cd8:	887b      	ldrh	r3, [r7, #2]
 8001cda:	041a      	lsls	r2, r3, #16
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	611a      	str	r2, [r3, #16]
}
 8001ce0:	bf00      	nop
 8001ce2:	370c      	adds	r7, #12
 8001ce4:	46bd      	mov	sp, r7
 8001ce6:	bc80      	pop	{r7}
 8001ce8:	4770      	bx	lr
	...

08001cec <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8001cec:	b580      	push	{r7, lr}
 8001cee:	b082      	sub	sp, #8
 8001cf0:	af00      	add	r7, sp, #0
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if (__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != 0x00u)
 8001cf6:	4b08      	ldr	r3, [pc, #32]	; (8001d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001cf8:	695a      	ldr	r2, [r3, #20]
 8001cfa:	88fb      	ldrh	r3, [r7, #6]
 8001cfc:	4013      	ands	r3, r2
 8001cfe:	2b00      	cmp	r3, #0
 8001d00:	d006      	beq.n	8001d10 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8001d02:	4a05      	ldr	r2, [pc, #20]	; (8001d18 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8001d04:	88fb      	ldrh	r3, [r7, #6]
 8001d06:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8001d08:	88fb      	ldrh	r3, [r7, #6]
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	f000 f806 	bl	8001d1c <HAL_GPIO_EXTI_Callback>
  }
}
 8001d10:	bf00      	nop
 8001d12:	3708      	adds	r7, #8
 8001d14:	46bd      	mov	sp, r7
 8001d16:	bd80      	pop	{r7, pc}
 8001d18:	40010400 	.word	0x40010400

08001d1c <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin: Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8001d1c:	b480      	push	{r7}
 8001d1e:	b083      	sub	sp, #12
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	4603      	mov	r3, r0
 8001d24:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 8001d26:	bf00      	nop
 8001d28:	370c      	adds	r7, #12
 8001d2a:	46bd      	mov	sp, r7
 8001d2c:	bc80      	pop	{r7}
 8001d2e:	4770      	bx	lr

08001d30 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001d30:	b580      	push	{r7, lr}
 8001d32:	b086      	sub	sp, #24
 8001d34:	af00      	add	r7, sp, #0
 8001d36:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2b00      	cmp	r3, #0
 8001d3c:	d101      	bne.n	8001d42 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	e26c      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	681b      	ldr	r3, [r3, #0]
 8001d46:	f003 0301 	and.w	r3, r3, #1
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	f000 8087 	beq.w	8001e5e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001d50:	4b92      	ldr	r3, [pc, #584]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d52:	685b      	ldr	r3, [r3, #4]
 8001d54:	f003 030c 	and.w	r3, r3, #12
 8001d58:	2b04      	cmp	r3, #4
 8001d5a:	d00c      	beq.n	8001d76 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001d5c:	4b8f      	ldr	r3, [pc, #572]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d5e:	685b      	ldr	r3, [r3, #4]
 8001d60:	f003 030c 	and.w	r3, r3, #12
 8001d64:	2b08      	cmp	r3, #8
 8001d66:	d112      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5e>
 8001d68:	4b8c      	ldr	r3, [pc, #560]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001d70:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d74:	d10b      	bne.n	8001d8e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001d76:	4b89      	ldr	r3, [pc, #548]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d78:	681b      	ldr	r3, [r3, #0]
 8001d7a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001d7e:	2b00      	cmp	r3, #0
 8001d80:	d06c      	beq.n	8001e5c <HAL_RCC_OscConfig+0x12c>
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	685b      	ldr	r3, [r3, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d168      	bne.n	8001e5c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001d8a:	2301      	movs	r3, #1
 8001d8c:	e246      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001d8e:	687b      	ldr	r3, [r7, #4]
 8001d90:	685b      	ldr	r3, [r3, #4]
 8001d92:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001d96:	d106      	bne.n	8001da6 <HAL_RCC_OscConfig+0x76>
 8001d98:	4b80      	ldr	r3, [pc, #512]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d9a:	681b      	ldr	r3, [r3, #0]
 8001d9c:	4a7f      	ldr	r2, [pc, #508]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001d9e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001da2:	6013      	str	r3, [r2, #0]
 8001da4:	e02e      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	685b      	ldr	r3, [r3, #4]
 8001daa:	2b00      	cmp	r3, #0
 8001dac:	d10c      	bne.n	8001dc8 <HAL_RCC_OscConfig+0x98>
 8001dae:	4b7b      	ldr	r3, [pc, #492]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	4a7a      	ldr	r2, [pc, #488]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001db4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001db8:	6013      	str	r3, [r2, #0]
 8001dba:	4b78      	ldr	r3, [pc, #480]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	4a77      	ldr	r2, [pc, #476]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dc0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001dc4:	6013      	str	r3, [r2, #0]
 8001dc6:	e01d      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	685b      	ldr	r3, [r3, #4]
 8001dcc:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001dd0:	d10c      	bne.n	8001dec <HAL_RCC_OscConfig+0xbc>
 8001dd2:	4b72      	ldr	r3, [pc, #456]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4a71      	ldr	r2, [pc, #452]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dd8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001ddc:	6013      	str	r3, [r2, #0]
 8001dde:	4b6f      	ldr	r3, [pc, #444]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	4a6e      	ldr	r2, [pc, #440]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001de4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001de8:	6013      	str	r3, [r2, #0]
 8001dea:	e00b      	b.n	8001e04 <HAL_RCC_OscConfig+0xd4>
 8001dec:	4b6b      	ldr	r3, [pc, #428]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a6a      	ldr	r2, [pc, #424]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001df2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8001df6:	6013      	str	r3, [r2, #0]
 8001df8:	4b68      	ldr	r3, [pc, #416]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dfa:	681b      	ldr	r3, [r3, #0]
 8001dfc:	4a67      	ldr	r2, [pc, #412]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001dfe:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8001e02:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001e04:	687b      	ldr	r3, [r7, #4]
 8001e06:	685b      	ldr	r3, [r3, #4]
 8001e08:	2b00      	cmp	r3, #0
 8001e0a:	d013      	beq.n	8001e34 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e0c:	f7ff fc7e 	bl	800170c <HAL_GetTick>
 8001e10:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e12:	e008      	b.n	8001e26 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e14:	f7ff fc7a 	bl	800170c <HAL_GetTick>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	1ad3      	subs	r3, r2, r3
 8001e1e:	2b64      	cmp	r3, #100	; 0x64
 8001e20:	d901      	bls.n	8001e26 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001e22:	2303      	movs	r3, #3
 8001e24:	e1fa      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001e26:	4b5d      	ldr	r3, [pc, #372]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e28:	681b      	ldr	r3, [r3, #0]
 8001e2a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	d0f0      	beq.n	8001e14 <HAL_RCC_OscConfig+0xe4>
 8001e32:	e014      	b.n	8001e5e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001e34:	f7ff fc6a 	bl	800170c <HAL_GetTick>
 8001e38:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e3a:	e008      	b.n	8001e4e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001e3c:	f7ff fc66 	bl	800170c <HAL_GetTick>
 8001e40:	4602      	mov	r2, r0
 8001e42:	693b      	ldr	r3, [r7, #16]
 8001e44:	1ad3      	subs	r3, r2, r3
 8001e46:	2b64      	cmp	r3, #100	; 0x64
 8001e48:	d901      	bls.n	8001e4e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001e4a:	2303      	movs	r3, #3
 8001e4c:	e1e6      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001e4e:	4b53      	ldr	r3, [pc, #332]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d1f0      	bne.n	8001e3c <HAL_RCC_OscConfig+0x10c>
 8001e5a:	e000      	b.n	8001e5e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001e5c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001e5e:	687b      	ldr	r3, [r7, #4]
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	f003 0302 	and.w	r3, r3, #2
 8001e66:	2b00      	cmp	r3, #0
 8001e68:	d063      	beq.n	8001f32 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001e6a:	4b4c      	ldr	r3, [pc, #304]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e6c:	685b      	ldr	r3, [r3, #4]
 8001e6e:	f003 030c 	and.w	r3, r3, #12
 8001e72:	2b00      	cmp	r3, #0
 8001e74:	d00b      	beq.n	8001e8e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001e76:	4b49      	ldr	r3, [pc, #292]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e78:	685b      	ldr	r3, [r3, #4]
 8001e7a:	f003 030c 	and.w	r3, r3, #12
 8001e7e:	2b08      	cmp	r3, #8
 8001e80:	d11c      	bne.n	8001ebc <HAL_RCC_OscConfig+0x18c>
 8001e82:	4b46      	ldr	r3, [pc, #280]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e84:	685b      	ldr	r3, [r3, #4]
 8001e86:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001e8a:	2b00      	cmp	r3, #0
 8001e8c:	d116      	bne.n	8001ebc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001e8e:	4b43      	ldr	r3, [pc, #268]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	f003 0302 	and.w	r3, r3, #2
 8001e96:	2b00      	cmp	r3, #0
 8001e98:	d005      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x176>
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	691b      	ldr	r3, [r3, #16]
 8001e9e:	2b01      	cmp	r3, #1
 8001ea0:	d001      	beq.n	8001ea6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001ea2:	2301      	movs	r3, #1
 8001ea4:	e1ba      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ea6:	4b3d      	ldr	r3, [pc, #244]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	695b      	ldr	r3, [r3, #20]
 8001eb2:	00db      	lsls	r3, r3, #3
 8001eb4:	4939      	ldr	r1, [pc, #228]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001eb6:	4313      	orrs	r3, r2
 8001eb8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001eba:	e03a      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001ebc:	687b      	ldr	r3, [r7, #4]
 8001ebe:	691b      	ldr	r3, [r3, #16]
 8001ec0:	2b00      	cmp	r3, #0
 8001ec2:	d020      	beq.n	8001f06 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8001ec4:	4b36      	ldr	r3, [pc, #216]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001ec6:	2201      	movs	r2, #1
 8001ec8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001eca:	f7ff fc1f 	bl	800170c <HAL_GetTick>
 8001ece:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ed0:	e008      	b.n	8001ee4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001ed2:	f7ff fc1b 	bl	800170c <HAL_GetTick>
 8001ed6:	4602      	mov	r2, r0
 8001ed8:	693b      	ldr	r3, [r7, #16]
 8001eda:	1ad3      	subs	r3, r2, r3
 8001edc:	2b02      	cmp	r3, #2
 8001ede:	d901      	bls.n	8001ee4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8001ee0:	2303      	movs	r3, #3
 8001ee2:	e19b      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001ee4:	4b2d      	ldr	r3, [pc, #180]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	f003 0302 	and.w	r3, r3, #2
 8001eec:	2b00      	cmp	r3, #0
 8001eee:	d0f0      	beq.n	8001ed2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001ef0:	4b2a      	ldr	r3, [pc, #168]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001ef8:	687b      	ldr	r3, [r7, #4]
 8001efa:	695b      	ldr	r3, [r3, #20]
 8001efc:	00db      	lsls	r3, r3, #3
 8001efe:	4927      	ldr	r1, [pc, #156]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001f00:	4313      	orrs	r3, r2
 8001f02:	600b      	str	r3, [r1, #0]
 8001f04:	e015      	b.n	8001f32 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001f06:	4b26      	ldr	r3, [pc, #152]	; (8001fa0 <HAL_RCC_OscConfig+0x270>)
 8001f08:	2200      	movs	r2, #0
 8001f0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f0c:	f7ff fbfe 	bl	800170c <HAL_GetTick>
 8001f10:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f12:	e008      	b.n	8001f26 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001f14:	f7ff fbfa 	bl	800170c <HAL_GetTick>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	693b      	ldr	r3, [r7, #16]
 8001f1c:	1ad3      	subs	r3, r2, r3
 8001f1e:	2b02      	cmp	r3, #2
 8001f20:	d901      	bls.n	8001f26 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001f22:	2303      	movs	r3, #3
 8001f24:	e17a      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001f26:	4b1d      	ldr	r3, [pc, #116]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d1f0      	bne.n	8001f14 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	f003 0308 	and.w	r3, r3, #8
 8001f3a:	2b00      	cmp	r3, #0
 8001f3c:	d03a      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001f3e:	687b      	ldr	r3, [r7, #4]
 8001f40:	699b      	ldr	r3, [r3, #24]
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d019      	beq.n	8001f7a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001f46:	4b17      	ldr	r3, [pc, #92]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f48:	2201      	movs	r2, #1
 8001f4a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f4c:	f7ff fbde 	bl	800170c <HAL_GetTick>
 8001f50:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f52:	e008      	b.n	8001f66 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f54:	f7ff fbda 	bl	800170c <HAL_GetTick>
 8001f58:	4602      	mov	r2, r0
 8001f5a:	693b      	ldr	r3, [r7, #16]
 8001f5c:	1ad3      	subs	r3, r2, r3
 8001f5e:	2b02      	cmp	r3, #2
 8001f60:	d901      	bls.n	8001f66 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001f62:	2303      	movs	r3, #3
 8001f64:	e15a      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001f66:	4b0d      	ldr	r3, [pc, #52]	; (8001f9c <HAL_RCC_OscConfig+0x26c>)
 8001f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001f6a:	f003 0302 	and.w	r3, r3, #2
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d0f0      	beq.n	8001f54 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001f72:	2001      	movs	r0, #1
 8001f74:	f000 fad8 	bl	8002528 <RCC_Delay>
 8001f78:	e01c      	b.n	8001fb4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001f7a:	4b0a      	ldr	r3, [pc, #40]	; (8001fa4 <HAL_RCC_OscConfig+0x274>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001f80:	f7ff fbc4 	bl	800170c <HAL_GetTick>
 8001f84:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001f86:	e00f      	b.n	8001fa8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001f88:	f7ff fbc0 	bl	800170c <HAL_GetTick>
 8001f8c:	4602      	mov	r2, r0
 8001f8e:	693b      	ldr	r3, [r7, #16]
 8001f90:	1ad3      	subs	r3, r2, r3
 8001f92:	2b02      	cmp	r3, #2
 8001f94:	d908      	bls.n	8001fa8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001f96:	2303      	movs	r3, #3
 8001f98:	e140      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
 8001f9a:	bf00      	nop
 8001f9c:	40021000 	.word	0x40021000
 8001fa0:	42420000 	.word	0x42420000
 8001fa4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001fa8:	4b9e      	ldr	r3, [pc, #632]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8001faa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001fac:	f003 0302 	and.w	r3, r3, #2
 8001fb0:	2b00      	cmp	r3, #0
 8001fb2:	d1e9      	bne.n	8001f88 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001fb4:	687b      	ldr	r3, [r7, #4]
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	f003 0304 	and.w	r3, r3, #4
 8001fbc:	2b00      	cmp	r3, #0
 8001fbe:	f000 80a6 	beq.w	800210e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001fc6:	4b97      	ldr	r3, [pc, #604]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8001fc8:	69db      	ldr	r3, [r3, #28]
 8001fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fce:	2b00      	cmp	r3, #0
 8001fd0:	d10d      	bne.n	8001fee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001fd2:	4b94      	ldr	r3, [pc, #592]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8001fd4:	69db      	ldr	r3, [r3, #28]
 8001fd6:	4a93      	ldr	r2, [pc, #588]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8001fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001fdc:	61d3      	str	r3, [r2, #28]
 8001fde:	4b91      	ldr	r3, [pc, #580]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8001fe0:	69db      	ldr	r3, [r3, #28]
 8001fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001fe6:	60bb      	str	r3, [r7, #8]
 8001fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8001fea:	2301      	movs	r3, #1
 8001fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001fee:	4b8e      	ldr	r3, [pc, #568]	; (8002228 <HAL_RCC_OscConfig+0x4f8>)
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d118      	bne.n	800202c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8001ffa:	4b8b      	ldr	r3, [pc, #556]	; (8002228 <HAL_RCC_OscConfig+0x4f8>)
 8001ffc:	681b      	ldr	r3, [r3, #0]
 8001ffe:	4a8a      	ldr	r2, [pc, #552]	; (8002228 <HAL_RCC_OscConfig+0x4f8>)
 8002000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002006:	f7ff fb81 	bl	800170c <HAL_GetTick>
 800200a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800200c:	e008      	b.n	8002020 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800200e:	f7ff fb7d 	bl	800170c <HAL_GetTick>
 8002012:	4602      	mov	r2, r0
 8002014:	693b      	ldr	r3, [r7, #16]
 8002016:	1ad3      	subs	r3, r2, r3
 8002018:	2b64      	cmp	r3, #100	; 0x64
 800201a:	d901      	bls.n	8002020 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800201c:	2303      	movs	r3, #3
 800201e:	e0fd      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002020:	4b81      	ldr	r3, [pc, #516]	; (8002228 <HAL_RCC_OscConfig+0x4f8>)
 8002022:	681b      	ldr	r3, [r3, #0]
 8002024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002028:	2b00      	cmp	r3, #0
 800202a:	d0f0      	beq.n	800200e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	68db      	ldr	r3, [r3, #12]
 8002030:	2b01      	cmp	r3, #1
 8002032:	d106      	bne.n	8002042 <HAL_RCC_OscConfig+0x312>
 8002034:	4b7b      	ldr	r3, [pc, #492]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002036:	6a1b      	ldr	r3, [r3, #32]
 8002038:	4a7a      	ldr	r2, [pc, #488]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800203a:	f043 0301 	orr.w	r3, r3, #1
 800203e:	6213      	str	r3, [r2, #32]
 8002040:	e02d      	b.n	800209e <HAL_RCC_OscConfig+0x36e>
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	68db      	ldr	r3, [r3, #12]
 8002046:	2b00      	cmp	r3, #0
 8002048:	d10c      	bne.n	8002064 <HAL_RCC_OscConfig+0x334>
 800204a:	4b76      	ldr	r3, [pc, #472]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800204c:	6a1b      	ldr	r3, [r3, #32]
 800204e:	4a75      	ldr	r2, [pc, #468]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002050:	f023 0301 	bic.w	r3, r3, #1
 8002054:	6213      	str	r3, [r2, #32]
 8002056:	4b73      	ldr	r3, [pc, #460]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002058:	6a1b      	ldr	r3, [r3, #32]
 800205a:	4a72      	ldr	r2, [pc, #456]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800205c:	f023 0304 	bic.w	r3, r3, #4
 8002060:	6213      	str	r3, [r2, #32]
 8002062:	e01c      	b.n	800209e <HAL_RCC_OscConfig+0x36e>
 8002064:	687b      	ldr	r3, [r7, #4]
 8002066:	68db      	ldr	r3, [r3, #12]
 8002068:	2b05      	cmp	r3, #5
 800206a:	d10c      	bne.n	8002086 <HAL_RCC_OscConfig+0x356>
 800206c:	4b6d      	ldr	r3, [pc, #436]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800206e:	6a1b      	ldr	r3, [r3, #32]
 8002070:	4a6c      	ldr	r2, [pc, #432]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002072:	f043 0304 	orr.w	r3, r3, #4
 8002076:	6213      	str	r3, [r2, #32]
 8002078:	4b6a      	ldr	r3, [pc, #424]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800207a:	6a1b      	ldr	r3, [r3, #32]
 800207c:	4a69      	ldr	r2, [pc, #420]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800207e:	f043 0301 	orr.w	r3, r3, #1
 8002082:	6213      	str	r3, [r2, #32]
 8002084:	e00b      	b.n	800209e <HAL_RCC_OscConfig+0x36e>
 8002086:	4b67      	ldr	r3, [pc, #412]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002088:	6a1b      	ldr	r3, [r3, #32]
 800208a:	4a66      	ldr	r2, [pc, #408]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800208c:	f023 0301 	bic.w	r3, r3, #1
 8002090:	6213      	str	r3, [r2, #32]
 8002092:	4b64      	ldr	r3, [pc, #400]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002094:	6a1b      	ldr	r3, [r3, #32]
 8002096:	4a63      	ldr	r2, [pc, #396]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002098:	f023 0304 	bic.w	r3, r3, #4
 800209c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800209e:	687b      	ldr	r3, [r7, #4]
 80020a0:	68db      	ldr	r3, [r3, #12]
 80020a2:	2b00      	cmp	r3, #0
 80020a4:	d015      	beq.n	80020d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020a6:	f7ff fb31 	bl	800170c <HAL_GetTick>
 80020aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020ac:	e00a      	b.n	80020c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020ae:	f7ff fb2d 	bl	800170c <HAL_GetTick>
 80020b2:	4602      	mov	r2, r0
 80020b4:	693b      	ldr	r3, [r7, #16]
 80020b6:	1ad3      	subs	r3, r2, r3
 80020b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80020bc:	4293      	cmp	r3, r2
 80020be:	d901      	bls.n	80020c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80020c0:	2303      	movs	r3, #3
 80020c2:	e0ab      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80020c4:	4b57      	ldr	r3, [pc, #348]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 80020c6:	6a1b      	ldr	r3, [r3, #32]
 80020c8:	f003 0302 	and.w	r3, r3, #2
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	d0ee      	beq.n	80020ae <HAL_RCC_OscConfig+0x37e>
 80020d0:	e014      	b.n	80020fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020d2:	f7ff fb1b 	bl	800170c <HAL_GetTick>
 80020d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020d8:	e00a      	b.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80020da:	f7ff fb17 	bl	800170c <HAL_GetTick>
 80020de:	4602      	mov	r2, r0
 80020e0:	693b      	ldr	r3, [r7, #16]
 80020e2:	1ad3      	subs	r3, r2, r3
 80020e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80020e8:	4293      	cmp	r3, r2
 80020ea:	d901      	bls.n	80020f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80020ec:	2303      	movs	r3, #3
 80020ee:	e095      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80020f0:	4b4c      	ldr	r3, [pc, #304]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 80020f2:	6a1b      	ldr	r3, [r3, #32]
 80020f4:	f003 0302 	and.w	r3, r3, #2
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d1ee      	bne.n	80020da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80020fc:	7dfb      	ldrb	r3, [r7, #23]
 80020fe:	2b01      	cmp	r3, #1
 8002100:	d105      	bne.n	800210e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002102:	4b48      	ldr	r3, [pc, #288]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002104:	69db      	ldr	r3, [r3, #28]
 8002106:	4a47      	ldr	r2, [pc, #284]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800210c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800210e:	687b      	ldr	r3, [r7, #4]
 8002110:	69db      	ldr	r3, [r3, #28]
 8002112:	2b00      	cmp	r3, #0
 8002114:	f000 8081 	beq.w	800221a <HAL_RCC_OscConfig+0x4ea>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002118:	4b42      	ldr	r3, [pc, #264]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800211a:	685b      	ldr	r3, [r3, #4]
 800211c:	f003 030c 	and.w	r3, r3, #12
 8002120:	2b08      	cmp	r3, #8
 8002122:	d061      	beq.n	80021e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	69db      	ldr	r3, [r3, #28]
 8002128:	2b02      	cmp	r3, #2
 800212a:	d146      	bne.n	80021ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800212c:	4b3f      	ldr	r3, [pc, #252]	; (800222c <HAL_RCC_OscConfig+0x4fc>)
 800212e:	2200      	movs	r2, #0
 8002130:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002132:	f7ff faeb 	bl	800170c <HAL_GetTick>
 8002136:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002138:	e008      	b.n	800214c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800213a:	f7ff fae7 	bl	800170c <HAL_GetTick>
 800213e:	4602      	mov	r2, r0
 8002140:	693b      	ldr	r3, [r7, #16]
 8002142:	1ad3      	subs	r3, r2, r3
 8002144:	2b02      	cmp	r3, #2
 8002146:	d901      	bls.n	800214c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002148:	2303      	movs	r3, #3
 800214a:	e067      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800214c:	4b35      	ldr	r3, [pc, #212]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 800214e:	681b      	ldr	r3, [r3, #0]
 8002150:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8002154:	2b00      	cmp	r3, #0
 8002156:	d1f0      	bne.n	800213a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002158:	687b      	ldr	r3, [r7, #4]
 800215a:	6a1b      	ldr	r3, [r3, #32]
 800215c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8002160:	d108      	bne.n	8002174 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002162:	4b30      	ldr	r3, [pc, #192]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800216a:	687b      	ldr	r3, [r7, #4]
 800216c:	689b      	ldr	r3, [r3, #8]
 800216e:	492d      	ldr	r1, [pc, #180]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002170:	4313      	orrs	r3, r2
 8002172:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002174:	4b2b      	ldr	r3, [pc, #172]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002176:	685b      	ldr	r3, [r3, #4]
 8002178:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800217c:	687b      	ldr	r3, [r7, #4]
 800217e:	6a19      	ldr	r1, [r3, #32]
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002184:	430b      	orrs	r3, r1
 8002186:	4927      	ldr	r1, [pc, #156]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 8002188:	4313      	orrs	r3, r2
 800218a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800218c:	4b27      	ldr	r3, [pc, #156]	; (800222c <HAL_RCC_OscConfig+0x4fc>)
 800218e:	2201      	movs	r2, #1
 8002190:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002192:	f7ff fabb 	bl	800170c <HAL_GetTick>
 8002196:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002198:	e008      	b.n	80021ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800219a:	f7ff fab7 	bl	800170c <HAL_GetTick>
 800219e:	4602      	mov	r2, r0
 80021a0:	693b      	ldr	r3, [r7, #16]
 80021a2:	1ad3      	subs	r3, r2, r3
 80021a4:	2b02      	cmp	r3, #2
 80021a6:	d901      	bls.n	80021ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80021a8:	2303      	movs	r3, #3
 80021aa:	e037      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80021ac:	4b1d      	ldr	r3, [pc, #116]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021b4:	2b00      	cmp	r3, #0
 80021b6:	d0f0      	beq.n	800219a <HAL_RCC_OscConfig+0x46a>
 80021b8:	e02f      	b.n	800221a <HAL_RCC_OscConfig+0x4ea>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80021ba:	4b1c      	ldr	r3, [pc, #112]	; (800222c <HAL_RCC_OscConfig+0x4fc>)
 80021bc:	2200      	movs	r2, #0
 80021be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021c0:	f7ff faa4 	bl	800170c <HAL_GetTick>
 80021c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021c6:	e008      	b.n	80021da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80021c8:	f7ff faa0 	bl	800170c <HAL_GetTick>
 80021cc:	4602      	mov	r2, r0
 80021ce:	693b      	ldr	r3, [r7, #16]
 80021d0:	1ad3      	subs	r3, r2, r3
 80021d2:	2b02      	cmp	r3, #2
 80021d4:	d901      	bls.n	80021da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80021d6:	2303      	movs	r3, #3
 80021d8:	e020      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80021da:	4b12      	ldr	r3, [pc, #72]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 80021dc:	681b      	ldr	r3, [r3, #0]
 80021de:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80021e2:	2b00      	cmp	r3, #0
 80021e4:	d1f0      	bne.n	80021c8 <HAL_RCC_OscConfig+0x498>
 80021e6:	e018      	b.n	800221a <HAL_RCC_OscConfig+0x4ea>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	69db      	ldr	r3, [r3, #28]
 80021ec:	2b01      	cmp	r3, #1
 80021ee:	d101      	bne.n	80021f4 <HAL_RCC_OscConfig+0x4c4>
      {
        return HAL_ERROR;
 80021f0:	2301      	movs	r3, #1
 80021f2:	e013      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80021f4:	4b0b      	ldr	r3, [pc, #44]	; (8002224 <HAL_RCC_OscConfig+0x4f4>)
 80021f6:	685b      	ldr	r3, [r3, #4]
 80021f8:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80021fa:	68fb      	ldr	r3, [r7, #12]
 80021fc:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 8002200:	687b      	ldr	r3, [r7, #4]
 8002202:	6a1b      	ldr	r3, [r3, #32]
 8002204:	429a      	cmp	r2, r3
 8002206:	d106      	bne.n	8002216 <HAL_RCC_OscConfig+0x4e6>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002208:	68fb      	ldr	r3, [r7, #12]
 800220a:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002212:	429a      	cmp	r2, r3
 8002214:	d001      	beq.n	800221a <HAL_RCC_OscConfig+0x4ea>
        {
          return HAL_ERROR;
 8002216:	2301      	movs	r3, #1
 8002218:	e000      	b.n	800221c <HAL_RCC_OscConfig+0x4ec>
        }
      }
    }
  }

  return HAL_OK;
 800221a:	2300      	movs	r3, #0
}
 800221c:	4618      	mov	r0, r3
 800221e:	3718      	adds	r7, #24
 8002220:	46bd      	mov	sp, r7
 8002222:	bd80      	pop	{r7, pc}
 8002224:	40021000 	.word	0x40021000
 8002228:	40007000 	.word	0x40007000
 800222c:	42420060 	.word	0x42420060

08002230 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	b084      	sub	sp, #16
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
 8002238:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	2b00      	cmp	r3, #0
 800223e:	d101      	bne.n	8002244 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002240:	2301      	movs	r3, #1
 8002242:	e0d0      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002244:	4b6a      	ldr	r3, [pc, #424]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	f003 0307 	and.w	r3, r3, #7
 800224c:	683a      	ldr	r2, [r7, #0]
 800224e:	429a      	cmp	r2, r3
 8002250:	d910      	bls.n	8002274 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002252:	4b67      	ldr	r3, [pc, #412]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002254:	681b      	ldr	r3, [r3, #0]
 8002256:	f023 0207 	bic.w	r2, r3, #7
 800225a:	4965      	ldr	r1, [pc, #404]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 800225c:	683b      	ldr	r3, [r7, #0]
 800225e:	4313      	orrs	r3, r2
 8002260:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002262:	4b63      	ldr	r3, [pc, #396]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002264:	681b      	ldr	r3, [r3, #0]
 8002266:	f003 0307 	and.w	r3, r3, #7
 800226a:	683a      	ldr	r2, [r7, #0]
 800226c:	429a      	cmp	r2, r3
 800226e:	d001      	beq.n	8002274 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002270:	2301      	movs	r3, #1
 8002272:	e0b8      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	681b      	ldr	r3, [r3, #0]
 8002278:	f003 0302 	and.w	r3, r3, #2
 800227c:	2b00      	cmp	r3, #0
 800227e:	d020      	beq.n	80022c2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	f003 0304 	and.w	r3, r3, #4
 8002288:	2b00      	cmp	r3, #0
 800228a:	d005      	beq.n	8002298 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800228c:	4b59      	ldr	r3, [pc, #356]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800228e:	685b      	ldr	r3, [r3, #4]
 8002290:	4a58      	ldr	r2, [pc, #352]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002292:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 8002296:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002298:	687b      	ldr	r3, [r7, #4]
 800229a:	681b      	ldr	r3, [r3, #0]
 800229c:	f003 0308 	and.w	r3, r3, #8
 80022a0:	2b00      	cmp	r3, #0
 80022a2:	d005      	beq.n	80022b0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80022a4:	4b53      	ldr	r3, [pc, #332]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022a6:	685b      	ldr	r3, [r3, #4]
 80022a8:	4a52      	ldr	r2, [pc, #328]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022aa:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 80022ae:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80022b0:	4b50      	ldr	r3, [pc, #320]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022b2:	685b      	ldr	r3, [r3, #4]
 80022b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	689b      	ldr	r3, [r3, #8]
 80022bc:	494d      	ldr	r1, [pc, #308]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022be:	4313      	orrs	r3, r2
 80022c0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	681b      	ldr	r3, [r3, #0]
 80022c6:	f003 0301 	and.w	r3, r3, #1
 80022ca:	2b00      	cmp	r3, #0
 80022cc:	d040      	beq.n	8002350 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	685b      	ldr	r3, [r3, #4]
 80022d2:	2b01      	cmp	r3, #1
 80022d4:	d107      	bne.n	80022e6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80022d6:	4b47      	ldr	r3, [pc, #284]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80022de:	2b00      	cmp	r3, #0
 80022e0:	d115      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022e2:	2301      	movs	r3, #1
 80022e4:	e07f      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80022e6:	687b      	ldr	r3, [r7, #4]
 80022e8:	685b      	ldr	r3, [r3, #4]
 80022ea:	2b02      	cmp	r3, #2
 80022ec:	d107      	bne.n	80022fe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80022ee:	4b41      	ldr	r3, [pc, #260]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d109      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e073      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80022fe:	4b3d      	ldr	r3, [pc, #244]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0302 	and.w	r3, r3, #2
 8002306:	2b00      	cmp	r3, #0
 8002308:	d101      	bne.n	800230e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800230a:	2301      	movs	r3, #1
 800230c:	e06b      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800230e:	4b39      	ldr	r3, [pc, #228]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002310:	685b      	ldr	r3, [r3, #4]
 8002312:	f023 0203 	bic.w	r2, r3, #3
 8002316:	687b      	ldr	r3, [r7, #4]
 8002318:	685b      	ldr	r3, [r3, #4]
 800231a:	4936      	ldr	r1, [pc, #216]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800231c:	4313      	orrs	r3, r2
 800231e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002320:	f7ff f9f4 	bl	800170c <HAL_GetTick>
 8002324:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002326:	e00a      	b.n	800233e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002328:	f7ff f9f0 	bl	800170c <HAL_GetTick>
 800232c:	4602      	mov	r2, r0
 800232e:	68fb      	ldr	r3, [r7, #12]
 8002330:	1ad3      	subs	r3, r2, r3
 8002332:	f241 3288 	movw	r2, #5000	; 0x1388
 8002336:	4293      	cmp	r3, r2
 8002338:	d901      	bls.n	800233e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800233a:	2303      	movs	r3, #3
 800233c:	e053      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800233e:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 8002340:	685b      	ldr	r3, [r3, #4]
 8002342:	f003 020c 	and.w	r2, r3, #12
 8002346:	687b      	ldr	r3, [r7, #4]
 8002348:	685b      	ldr	r3, [r3, #4]
 800234a:	009b      	lsls	r3, r3, #2
 800234c:	429a      	cmp	r2, r3
 800234e:	d1eb      	bne.n	8002328 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002350:	4b27      	ldr	r3, [pc, #156]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f003 0307 	and.w	r3, r3, #7
 8002358:	683a      	ldr	r2, [r7, #0]
 800235a:	429a      	cmp	r2, r3
 800235c:	d210      	bcs.n	8002380 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800235e:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002360:	681b      	ldr	r3, [r3, #0]
 8002362:	f023 0207 	bic.w	r2, r3, #7
 8002366:	4922      	ldr	r1, [pc, #136]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002368:	683b      	ldr	r3, [r7, #0]
 800236a:	4313      	orrs	r3, r2
 800236c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800236e:	4b20      	ldr	r3, [pc, #128]	; (80023f0 <HAL_RCC_ClockConfig+0x1c0>)
 8002370:	681b      	ldr	r3, [r3, #0]
 8002372:	f003 0307 	and.w	r3, r3, #7
 8002376:	683a      	ldr	r2, [r7, #0]
 8002378:	429a      	cmp	r2, r3
 800237a:	d001      	beq.n	8002380 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800237c:	2301      	movs	r3, #1
 800237e:	e032      	b.n	80023e6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002380:	687b      	ldr	r3, [r7, #4]
 8002382:	681b      	ldr	r3, [r3, #0]
 8002384:	f003 0304 	and.w	r3, r3, #4
 8002388:	2b00      	cmp	r3, #0
 800238a:	d008      	beq.n	800239e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800238c:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800238e:	685b      	ldr	r3, [r3, #4]
 8002390:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	68db      	ldr	r3, [r3, #12]
 8002398:	4916      	ldr	r1, [pc, #88]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 800239a:	4313      	orrs	r3, r2
 800239c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	681b      	ldr	r3, [r3, #0]
 80023a2:	f003 0308 	and.w	r3, r3, #8
 80023a6:	2b00      	cmp	r3, #0
 80023a8:	d009      	beq.n	80023be <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80023aa:	4b12      	ldr	r3, [pc, #72]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ac:	685b      	ldr	r3, [r3, #4]
 80023ae:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 80023b2:	687b      	ldr	r3, [r7, #4]
 80023b4:	691b      	ldr	r3, [r3, #16]
 80023b6:	00db      	lsls	r3, r3, #3
 80023b8:	490e      	ldr	r1, [pc, #56]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023ba:	4313      	orrs	r3, r2
 80023bc:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80023be:	f000 f821 	bl	8002404 <HAL_RCC_GetSysClockFreq>
 80023c2:	4602      	mov	r2, r0
 80023c4:	4b0b      	ldr	r3, [pc, #44]	; (80023f4 <HAL_RCC_ClockConfig+0x1c4>)
 80023c6:	685b      	ldr	r3, [r3, #4]
 80023c8:	091b      	lsrs	r3, r3, #4
 80023ca:	f003 030f 	and.w	r3, r3, #15
 80023ce:	490a      	ldr	r1, [pc, #40]	; (80023f8 <HAL_RCC_ClockConfig+0x1c8>)
 80023d0:	5ccb      	ldrb	r3, [r1, r3]
 80023d2:	fa22 f303 	lsr.w	r3, r2, r3
 80023d6:	4a09      	ldr	r2, [pc, #36]	; (80023fc <HAL_RCC_ClockConfig+0x1cc>)
 80023d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80023da:	4b09      	ldr	r3, [pc, #36]	; (8002400 <HAL_RCC_ClockConfig+0x1d0>)
 80023dc:	681b      	ldr	r3, [r3, #0]
 80023de:	4618      	mov	r0, r3
 80023e0:	f7ff f952 	bl	8001688 <HAL_InitTick>

  return HAL_OK;
 80023e4:	2300      	movs	r3, #0
}
 80023e6:	4618      	mov	r0, r3
 80023e8:	3710      	adds	r7, #16
 80023ea:	46bd      	mov	sp, r7
 80023ec:	bd80      	pop	{r7, pc}
 80023ee:	bf00      	nop
 80023f0:	40022000 	.word	0x40022000
 80023f4:	40021000 	.word	0x40021000
 80023f8:	0800279c 	.word	0x0800279c
 80023fc:	20000008 	.word	0x20000008
 8002400:	2000000c 	.word	0x2000000c

08002404 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002404:	b490      	push	{r4, r7}
 8002406:	b08a      	sub	sp, #40	; 0x28
 8002408:	af00      	add	r7, sp, #0
#if defined(RCC_CFGR2_PREDIV1SRC)
  const uint8_t aPLLMULFactorTable[14] = {0, 0, 4, 5, 6, 7, 8, 9, 0, 0, 0, 0, 0, 13};
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPLLMULFactorTable[16] = {2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16, 16};
 800240a:	4b2a      	ldr	r3, [pc, #168]	; (80024b4 <HAL_RCC_GetSysClockFreq+0xb0>)
 800240c:	1d3c      	adds	r4, r7, #4
 800240e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002410:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
#if defined(RCC_CFGR2_PREDIV1)
  const uint8_t aPredivFactorTable[16] = {1, 2, 3, 4, 5, 6, 7, 8, 9, 10, 11, 12, 13, 14, 15, 16};
#else
  const uint8_t aPredivFactorTable[2] = {1, 2};
 8002414:	f240 2301 	movw	r3, #513	; 0x201
 8002418:	803b      	strh	r3, [r7, #0]
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800241a:	2300      	movs	r3, #0
 800241c:	61fb      	str	r3, [r7, #28]
 800241e:	2300      	movs	r3, #0
 8002420:	61bb      	str	r3, [r7, #24]
 8002422:	2300      	movs	r3, #0
 8002424:	627b      	str	r3, [r7, #36]	; 0x24
 8002426:	2300      	movs	r3, #0
 8002428:	617b      	str	r3, [r7, #20]
  uint32_t sysclockfreq = 0U;
 800242a:	2300      	movs	r3, #0
 800242c:	623b      	str	r3, [r7, #32]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800242e:	4b22      	ldr	r3, [pc, #136]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 8002430:	685b      	ldr	r3, [r3, #4]
 8002432:	61fb      	str	r3, [r7, #28]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002434:	69fb      	ldr	r3, [r7, #28]
 8002436:	f003 030c 	and.w	r3, r3, #12
 800243a:	2b04      	cmp	r3, #4
 800243c:	d002      	beq.n	8002444 <HAL_RCC_GetSysClockFreq+0x40>
 800243e:	2b08      	cmp	r3, #8
 8002440:	d003      	beq.n	800244a <HAL_RCC_GetSysClockFreq+0x46>
 8002442:	e02d      	b.n	80024a0 <HAL_RCC_GetSysClockFreq+0x9c>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002444:	4b1d      	ldr	r3, [pc, #116]	; (80024bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002446:	623b      	str	r3, [r7, #32]
      break;
 8002448:	e02d      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800244a:	69fb      	ldr	r3, [r7, #28]
 800244c:	0c9b      	lsrs	r3, r3, #18
 800244e:	f003 030f 	and.w	r3, r3, #15
 8002452:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002456:	4413      	add	r3, r2
 8002458:	f813 3c24 	ldrb.w	r3, [r3, #-36]
 800245c:	617b      	str	r3, [r7, #20]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800245e:	69fb      	ldr	r3, [r7, #28]
 8002460:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002464:	2b00      	cmp	r3, #0
 8002466:	d013      	beq.n	8002490 <HAL_RCC_GetSysClockFreq+0x8c>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002468:	4b13      	ldr	r3, [pc, #76]	; (80024b8 <HAL_RCC_GetSysClockFreq+0xb4>)
 800246a:	685b      	ldr	r3, [r3, #4]
 800246c:	0c5b      	lsrs	r3, r3, #17
 800246e:	f003 0301 	and.w	r3, r3, #1
 8002472:	f107 0228 	add.w	r2, r7, #40	; 0x28
 8002476:	4413      	add	r3, r2
 8002478:	f813 3c28 	ldrb.w	r3, [r3, #-40]
 800247c:	61bb      	str	r3, [r7, #24]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 800247e:	697b      	ldr	r3, [r7, #20]
 8002480:	4a0e      	ldr	r2, [pc, #56]	; (80024bc <HAL_RCC_GetSysClockFreq+0xb8>)
 8002482:	fb02 f203 	mul.w	r2, r2, r3
 8002486:	69bb      	ldr	r3, [r7, #24]
 8002488:	fbb2 f3f3 	udiv	r3, r2, r3
 800248c:	627b      	str	r3, [r7, #36]	; 0x24
 800248e:	e004      	b.n	800249a <HAL_RCC_GetSysClockFreq+0x96>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002490:	697b      	ldr	r3, [r7, #20]
 8002492:	4a0b      	ldr	r2, [pc, #44]	; (80024c0 <HAL_RCC_GetSysClockFreq+0xbc>)
 8002494:	fb02 f303 	mul.w	r3, r2, r3
 8002498:	627b      	str	r3, [r7, #36]	; 0x24
      }
      sysclockfreq = pllclk;
 800249a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800249c:	623b      	str	r3, [r7, #32]
      break;
 800249e:	e002      	b.n	80024a6 <HAL_RCC_GetSysClockFreq+0xa2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <HAL_RCC_GetSysClockFreq+0xb8>)
 80024a2:	623b      	str	r3, [r7, #32]
      break;
 80024a4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80024a6:	6a3b      	ldr	r3, [r7, #32]
}
 80024a8:	4618      	mov	r0, r3
 80024aa:	3728      	adds	r7, #40	; 0x28
 80024ac:	46bd      	mov	sp, r7
 80024ae:	bc90      	pop	{r4, r7}
 80024b0:	4770      	bx	lr
 80024b2:	bf00      	nop
 80024b4:	0800278c 	.word	0x0800278c
 80024b8:	40021000 	.word	0x40021000
 80024bc:	007a1200 	.word	0x007a1200
 80024c0:	003d0900 	.word	0x003d0900

080024c4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80024c4:	b480      	push	{r7}
 80024c6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80024c8:	4b02      	ldr	r3, [pc, #8]	; (80024d4 <HAL_RCC_GetHCLKFreq+0x10>)
 80024ca:	681b      	ldr	r3, [r3, #0]
}
 80024cc:	4618      	mov	r0, r3
 80024ce:	46bd      	mov	sp, r7
 80024d0:	bc80      	pop	{r7}
 80024d2:	4770      	bx	lr
 80024d4:	20000008 	.word	0x20000008

080024d8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80024d8:	b580      	push	{r7, lr}
 80024da:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80024dc:	f7ff fff2 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 80024e0:	4602      	mov	r2, r0
 80024e2:	4b05      	ldr	r3, [pc, #20]	; (80024f8 <HAL_RCC_GetPCLK1Freq+0x20>)
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	0a1b      	lsrs	r3, r3, #8
 80024e8:	f003 0307 	and.w	r3, r3, #7
 80024ec:	4903      	ldr	r1, [pc, #12]	; (80024fc <HAL_RCC_GetPCLK1Freq+0x24>)
 80024ee:	5ccb      	ldrb	r3, [r1, r3]
 80024f0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80024f4:	4618      	mov	r0, r3
 80024f6:	bd80      	pop	{r7, pc}
 80024f8:	40021000 	.word	0x40021000
 80024fc:	080027ac 	.word	0x080027ac

08002500 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8002500:	b580      	push	{r7, lr}
 8002502:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8002504:	f7ff ffde 	bl	80024c4 <HAL_RCC_GetHCLKFreq>
 8002508:	4602      	mov	r2, r0
 800250a:	4b05      	ldr	r3, [pc, #20]	; (8002520 <HAL_RCC_GetPCLK2Freq+0x20>)
 800250c:	685b      	ldr	r3, [r3, #4]
 800250e:	0adb      	lsrs	r3, r3, #11
 8002510:	f003 0307 	and.w	r3, r3, #7
 8002514:	4903      	ldr	r1, [pc, #12]	; (8002524 <HAL_RCC_GetPCLK2Freq+0x24>)
 8002516:	5ccb      	ldrb	r3, [r1, r3]
 8002518:	fa22 f303 	lsr.w	r3, r2, r3
}
 800251c:	4618      	mov	r0, r3
 800251e:	bd80      	pop	{r7, pc}
 8002520:	40021000 	.word	0x40021000
 8002524:	080027ac 	.word	0x080027ac

08002528 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002528:	b480      	push	{r7}
 800252a:	b085      	sub	sp, #20
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002530:	4b0a      	ldr	r3, [pc, #40]	; (800255c <RCC_Delay+0x34>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4a0a      	ldr	r2, [pc, #40]	; (8002560 <RCC_Delay+0x38>)
 8002536:	fba2 2303 	umull	r2, r3, r2, r3
 800253a:	0a5b      	lsrs	r3, r3, #9
 800253c:	687a      	ldr	r2, [r7, #4]
 800253e:	fb02 f303 	mul.w	r3, r2, r3
 8002542:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002544:	bf00      	nop
  }
  while (Delay --);
 8002546:	68fb      	ldr	r3, [r7, #12]
 8002548:	1e5a      	subs	r2, r3, #1
 800254a:	60fa      	str	r2, [r7, #12]
 800254c:	2b00      	cmp	r3, #0
 800254e:	d1f9      	bne.n	8002544 <RCC_Delay+0x1c>
}
 8002550:	bf00      	nop
 8002552:	bf00      	nop
 8002554:	3714      	adds	r7, #20
 8002556:	46bd      	mov	sp, r7
 8002558:	bc80      	pop	{r7}
 800255a:	4770      	bx	lr
 800255c:	20000008 	.word	0x20000008
 8002560:	10624dd3 	.word	0x10624dd3

08002564 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8002564:	b580      	push	{r7, lr}
 8002566:	b082      	sub	sp, #8
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	2b00      	cmp	r3, #0
 8002570:	d101      	bne.n	8002576 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8002572:	2301      	movs	r3, #1
 8002574:	e03f      	b.n	80025f6 <HAL_UART_Init+0x92>
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
#if defined(USART_CR1_OVER8)
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));
#endif /* USART_CR1_OVER8 */

  if (huart->gState == HAL_UART_STATE_RESET)
 8002576:	687b      	ldr	r3, [r7, #4]
 8002578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800257c:	b2db      	uxtb	r3, r3
 800257e:	2b00      	cmp	r3, #0
 8002580:	d106      	bne.n	8002590 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	2200      	movs	r2, #0
 8002586:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800258a:	6878      	ldr	r0, [r7, #4]
 800258c:	f7fe ffcc 	bl	8001528 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8002590:	687b      	ldr	r3, [r7, #4]
 8002592:	2224      	movs	r2, #36	; 0x24
 8002594:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	68da      	ldr	r2, [r3, #12]
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80025a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80025a8:	6878      	ldr	r0, [r7, #4]
 80025aa:	f000 f829 	bl	8002600 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	691a      	ldr	r2, [r3, #16]
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80025bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	695a      	ldr	r2, [r3, #20]
 80025c4:	687b      	ldr	r3, [r7, #4]
 80025c6:	681b      	ldr	r3, [r3, #0]
 80025c8:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80025cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80025ce:	687b      	ldr	r3, [r7, #4]
 80025d0:	681b      	ldr	r3, [r3, #0]
 80025d2:	68da      	ldr	r2, [r3, #12]
 80025d4:	687b      	ldr	r3, [r7, #4]
 80025d6:	681b      	ldr	r3, [r3, #0]
 80025d8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80025dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80025de:	687b      	ldr	r3, [r7, #4]
 80025e0:	2200      	movs	r2, #0
 80025e2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80025e4:	687b      	ldr	r3, [r7, #4]
 80025e6:	2220      	movs	r2, #32
 80025e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80025ec:	687b      	ldr	r3, [r7, #4]
 80025ee:	2220      	movs	r2, #32
 80025f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80025f4:	2300      	movs	r3, #0
}
 80025f6:	4618      	mov	r0, r3
 80025f8:	3708      	adds	r7, #8
 80025fa:	46bd      	mov	sp, r7
 80025fc:	bd80      	pop	{r7, pc}
	...

08002600 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8002600:	b580      	push	{r7, lr}
 8002602:	b084      	sub	sp, #16
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	691b      	ldr	r3, [r3, #16]
 800260e:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	68da      	ldr	r2, [r3, #12]
 8002616:	687b      	ldr	r3, [r7, #4]
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	430a      	orrs	r2, r1
 800261c:	611a      	str	r2, [r3, #16]
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
  MODIFY_REG(huart->Instance->CR1,
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);
#else
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode;
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	689a      	ldr	r2, [r3, #8]
 8002622:	687b      	ldr	r3, [r7, #4]
 8002624:	691b      	ldr	r3, [r3, #16]
 8002626:	431a      	orrs	r2, r3
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	695b      	ldr	r3, [r3, #20]
 800262c:	4313      	orrs	r3, r2
 800262e:	60bb      	str	r3, [r7, #8]
  MODIFY_REG(huart->Instance->CR1,
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	68db      	ldr	r3, [r3, #12]
 8002636:	f423 53b0 	bic.w	r3, r3, #5632	; 0x1600
 800263a:	f023 030c 	bic.w	r3, r3, #12
 800263e:	687a      	ldr	r2, [r7, #4]
 8002640:	6812      	ldr	r2, [r2, #0]
 8002642:	68b9      	ldr	r1, [r7, #8]
 8002644:	430b      	orrs	r3, r1
 8002646:	60d3      	str	r3, [r2, #12]
             tmpreg);
#endif /* USART_CR1_OVER8 */

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	695b      	ldr	r3, [r3, #20]
 800264e:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	699a      	ldr	r2, [r3, #24]
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	430a      	orrs	r2, r1
 800265c:	615a      	str	r2, [r3, #20]


  if(huart->Instance == USART1)
 800265e:	687b      	ldr	r3, [r7, #4]
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	4a2c      	ldr	r2, [pc, #176]	; (8002714 <UART_SetConfig+0x114>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d103      	bne.n	8002670 <UART_SetConfig+0x70>
  {
    pclk = HAL_RCC_GetPCLK2Freq();
 8002668:	f7ff ff4a 	bl	8002500 <HAL_RCC_GetPCLK2Freq>
 800266c:	60f8      	str	r0, [r7, #12]
 800266e:	e002      	b.n	8002676 <UART_SetConfig+0x76>
  }
  else
  {
    pclk = HAL_RCC_GetPCLK1Freq();
 8002670:	f7ff ff32 	bl	80024d8 <HAL_RCC_GetPCLK1Freq>
 8002674:	60f8      	str	r0, [r7, #12]
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
#else
  huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002676:	68fa      	ldr	r2, [r7, #12]
 8002678:	4613      	mov	r3, r2
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	009a      	lsls	r2, r3, #2
 8002680:	441a      	add	r2, r3
 8002682:	687b      	ldr	r3, [r7, #4]
 8002684:	685b      	ldr	r3, [r3, #4]
 8002686:	009b      	lsls	r3, r3, #2
 8002688:	fbb2 f3f3 	udiv	r3, r2, r3
 800268c:	4a22      	ldr	r2, [pc, #136]	; (8002718 <UART_SetConfig+0x118>)
 800268e:	fba2 2303 	umull	r2, r3, r2, r3
 8002692:	095b      	lsrs	r3, r3, #5
 8002694:	0119      	lsls	r1, r3, #4
 8002696:	68fa      	ldr	r2, [r7, #12]
 8002698:	4613      	mov	r3, r2
 800269a:	009b      	lsls	r3, r3, #2
 800269c:	4413      	add	r3, r2
 800269e:	009a      	lsls	r2, r3, #2
 80026a0:	441a      	add	r2, r3
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	685b      	ldr	r3, [r3, #4]
 80026a6:	009b      	lsls	r3, r3, #2
 80026a8:	fbb2 f2f3 	udiv	r2, r2, r3
 80026ac:	4b1a      	ldr	r3, [pc, #104]	; (8002718 <UART_SetConfig+0x118>)
 80026ae:	fba3 0302 	umull	r0, r3, r3, r2
 80026b2:	095b      	lsrs	r3, r3, #5
 80026b4:	2064      	movs	r0, #100	; 0x64
 80026b6:	fb00 f303 	mul.w	r3, r0, r3
 80026ba:	1ad3      	subs	r3, r2, r3
 80026bc:	011b      	lsls	r3, r3, #4
 80026be:	3332      	adds	r3, #50	; 0x32
 80026c0:	4a15      	ldr	r2, [pc, #84]	; (8002718 <UART_SetConfig+0x118>)
 80026c2:	fba2 2303 	umull	r2, r3, r2, r3
 80026c6:	095b      	lsrs	r3, r3, #5
 80026c8:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80026cc:	4419      	add	r1, r3
 80026ce:	68fa      	ldr	r2, [r7, #12]
 80026d0:	4613      	mov	r3, r2
 80026d2:	009b      	lsls	r3, r3, #2
 80026d4:	4413      	add	r3, r2
 80026d6:	009a      	lsls	r2, r3, #2
 80026d8:	441a      	add	r2, r3
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	685b      	ldr	r3, [r3, #4]
 80026de:	009b      	lsls	r3, r3, #2
 80026e0:	fbb2 f2f3 	udiv	r2, r2, r3
 80026e4:	4b0c      	ldr	r3, [pc, #48]	; (8002718 <UART_SetConfig+0x118>)
 80026e6:	fba3 0302 	umull	r0, r3, r3, r2
 80026ea:	095b      	lsrs	r3, r3, #5
 80026ec:	2064      	movs	r0, #100	; 0x64
 80026ee:	fb00 f303 	mul.w	r3, r0, r3
 80026f2:	1ad3      	subs	r3, r2, r3
 80026f4:	011b      	lsls	r3, r3, #4
 80026f6:	3332      	adds	r3, #50	; 0x32
 80026f8:	4a07      	ldr	r2, [pc, #28]	; (8002718 <UART_SetConfig+0x118>)
 80026fa:	fba2 2303 	umull	r2, r3, r2, r3
 80026fe:	095b      	lsrs	r3, r3, #5
 8002700:	f003 020f 	and.w	r2, r3, #15
 8002704:	687b      	ldr	r3, [r7, #4]
 8002706:	681b      	ldr	r3, [r3, #0]
 8002708:	440a      	add	r2, r1
 800270a:	609a      	str	r2, [r3, #8]
#endif /* USART_CR1_OVER8 */
}
 800270c:	bf00      	nop
 800270e:	3710      	adds	r7, #16
 8002710:	46bd      	mov	sp, r7
 8002712:	bd80      	pop	{r7, pc}
 8002714:	40013800 	.word	0x40013800
 8002718:	51eb851f 	.word	0x51eb851f

0800271c <__libc_init_array>:
 800271c:	b570      	push	{r4, r5, r6, lr}
 800271e:	2600      	movs	r6, #0
 8002720:	4d0c      	ldr	r5, [pc, #48]	; (8002754 <__libc_init_array+0x38>)
 8002722:	4c0d      	ldr	r4, [pc, #52]	; (8002758 <__libc_init_array+0x3c>)
 8002724:	1b64      	subs	r4, r4, r5
 8002726:	10a4      	asrs	r4, r4, #2
 8002728:	42a6      	cmp	r6, r4
 800272a:	d109      	bne.n	8002740 <__libc_init_array+0x24>
 800272c:	f000 f822 	bl	8002774 <_init>
 8002730:	2600      	movs	r6, #0
 8002732:	4d0a      	ldr	r5, [pc, #40]	; (800275c <__libc_init_array+0x40>)
 8002734:	4c0a      	ldr	r4, [pc, #40]	; (8002760 <__libc_init_array+0x44>)
 8002736:	1b64      	subs	r4, r4, r5
 8002738:	10a4      	asrs	r4, r4, #2
 800273a:	42a6      	cmp	r6, r4
 800273c:	d105      	bne.n	800274a <__libc_init_array+0x2e>
 800273e:	bd70      	pop	{r4, r5, r6, pc}
 8002740:	f855 3b04 	ldr.w	r3, [r5], #4
 8002744:	4798      	blx	r3
 8002746:	3601      	adds	r6, #1
 8002748:	e7ee      	b.n	8002728 <__libc_init_array+0xc>
 800274a:	f855 3b04 	ldr.w	r3, [r5], #4
 800274e:	4798      	blx	r3
 8002750:	3601      	adds	r6, #1
 8002752:	e7f2      	b.n	800273a <__libc_init_array+0x1e>
 8002754:	080027b4 	.word	0x080027b4
 8002758:	080027b4 	.word	0x080027b4
 800275c:	080027b4 	.word	0x080027b4
 8002760:	080027b8 	.word	0x080027b8

08002764 <memset>:
 8002764:	4603      	mov	r3, r0
 8002766:	4402      	add	r2, r0
 8002768:	4293      	cmp	r3, r2
 800276a:	d100      	bne.n	800276e <memset+0xa>
 800276c:	4770      	bx	lr
 800276e:	f803 1b01 	strb.w	r1, [r3], #1
 8002772:	e7f9      	b.n	8002768 <memset+0x4>

08002774 <_init>:
 8002774:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002776:	bf00      	nop
 8002778:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800277a:	bc08      	pop	{r3}
 800277c:	469e      	mov	lr, r3
 800277e:	4770      	bx	lr

08002780 <_fini>:
 8002780:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002782:	bf00      	nop
 8002784:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002786:	bc08      	pop	{r3}
 8002788:	469e      	mov	lr, r3
 800278a:	4770      	bx	lr
